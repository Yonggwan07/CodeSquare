[
    {
        "label": "clear()",
        "documentation": [
            "localStorage가 가지고 있는 모든 데이터를 삭제합니다.http://www.w3.org/TR/webstorage/#storage : clear항목 참조"
        ]
    },
    {
        "label": "getAllItem(): Object",
        "documentation": [
            "localStorage가 가지고 있는 모든 데이터를 key,value형태의 오브젝트로 반환합니다.",
            "*@return* \n현재 컴포넌트 객체가 가지고 있는 모든 데이터 값"
        ]
    },
    {
        "label": "getItem(key: String): String",
        "documentation": [
            "key에 해당하는 값을 가져옵니다.http://www.w3.org/TR/webstorage/#storage : getItem항목 참조",
            "*@param* `key` &mdash; item의 key값",
            "*@return* \nkey와 매칭된 데이터가 있을 경우 해당 키에 대한 value를 반환하며, 그렇지 않을 경우 null을 리턴합니다."
        ]
    },
    {
        "label": "key(index: Number): String",
        "documentation": [
            "index에 해당하는 키값을 가져옵니다.http://www.w3.org/TR/webstorage/#storage : key항목 참조",
            "*@param* `index` &mdash; 저장소의 index (배열의 index와 비슷한 개념입니다.)",
            "*@return* \nindex에 해당하는 key값이 존재하는 경우 해당 key값을 반환하며, 그렇지 않을 경우 null을 리턴합니다."
        ]
    },
    {
        "label": "removeItem(key: String)",
        "documentation": [
            "입력된 key에 해당하는 item을 삭제합니다.http://www.w3.org/TR/webstorage/#storage : removeItem항목 참조localStorage의 변경된(삭제) 내용을 파일에 즉시 반영합니다.모든 데이터를 삭제하고 싶은 경우 clear()함수를 호출하면 편리합니다.",
            "*@param* `key` &mdash; 삭제하고자 하는 item의 key값"
        ]
    },
    {
        "label": "setItem(key: String, val: String)",
        "documentation": [
            "localStorage에 key와 value로 이루어진 데이터 하나를 저장합니다.http://www.w3.org/TR/webstorage/#storage : setItem항목 참조localStorage의 변경된(삽입) 내용을 파일에 즉시 반영합니다.",
            "*@param* `key` &mdash; item의 키",
            "*@param* `val` &mdash; item의 값"
        ]
    }
]