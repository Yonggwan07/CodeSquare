[
    {
        "label": "dateAdd(day1: String, offset: Number): String",
        "documentation": [
            "날짜에 지정된 수만큼 더합니다.( date + offset )",
            "*@param* `day1` &mdash; 지정 날짜",
            "*@param* `offset` &mdash; 날짜에 더할 숫자",
            "*@return* \n지정된 수 많큼 더해진 날짜"
        ]
    },
    {
        "label": "dateDiff(day1: String, day2: String): String",
        "documentation": [
            "두 날짜 사이의 차이를 반환합니다.( to - from )",
            "*@param* `day1` &mdash; 시작 날짜",
            "*@param* `day2` &mdash; 끝 날짜",
            "*@return* \n두 날짜의 차이"
        ]
    },
    {
        "label": "dateTimeAdd(day1: String, offset: Number, type: String): String",
        "documentation": [
            "날짜 및 시간에 지정된 수만큼 더합니다.( date + offset )type에서 설정한 값(day,month,hour,minute,time)에 따라서 증가되는 대상이 달라집니다.",
            "*@param* `day1` &mdash; 지정 날짜와 시간",
            "*@param* `offset` &mdash; 날짜에 더할 숫자",
            "*@param* `type` &mdash; 증가된 값이 적용될 대상(hour, minute )",
            "*@return* \n지정된 수 많큼 더해진 날짜"
        ]
    },
    {
        "label": "getCurrentServerDate(pattern?: String): String",
        "documentation": [
            "서버의 현재 시간을 반환합니다.Java의 SimpleDateFormat의 pattern을 인자로 받아서 시간을 표현합니다.pattern을 입력하지 않는 경우에는 yyyyMMdd 패턴의 결과를 반환합니다.y  \t\tYear  \t\t\t\t\t\t1996; 96M  \t\tMonth in year  \t\t\t\t07d  \t\tDay in month  \t\t\t\t10H  \t\tHour in day (0-23)  \t\t0m  \t\tMinute in hour  \t\t\t30s  \t\tSecond in minute  \t\t\t55S  \t\tMillisecond  \t\t\t\t978",
            "*@param* `pattern` &mdash; 날짜 형식( ex) yyyyMMdd )",
            "*@return* \n서버 날짜(시간) String"
        ]
    },
    {
        "label": "getDay(dateFormatStr: String): String",
        "documentation": [
            "\"yyyyMMdd\" 형태의 날짜를 입력받아서 해당 요일을 반환합니다. (예를 들어 '월요일' 등의 string을 반환)",
            "*@param* `dateFormatStr` &mdash; \"yyyyMMdd\" 형태의 날짜를 나타내는 string",
            "*@return* \n'월요일' 등의 요일을 나타내는 string"
        ]
    },
    {
        "label": "getFormattedDate(dateObj: Object, pattern?: String): String",
        "documentation": [
            "Date객체를 받아서 지정된 format으로 시간을 반환합니다.pattern을 입력하지 않는 경우에는 java의 System.currentTimeMillis()값을 반환합니다.",
            "*@param* `dateObj` &mdash; JavaScript date객체",
            "*@param* `pattern` &mdash; ",
            "*@return* \n지정된 format으로 시간을 반환\nLetter  Date or Time Component\t\tExamples\ny  \t\tYear  \t\t\t\t\t\t1996; 96\nM  \t\tMonth in year  \t\t\t\t07\nd  \t\tDay in month  \t\t\t\t10\nH  \t\tHour in day (0-23)  \t\t0\nm  \t\tMinute in hour  \t\t\t30\ns  \t\tSecond in minute  \t\t\t55\nS  \t\tMillisecond  \t\t\t\t978"
        ]
    },
    {
        "label": "getIOFormatDate(value: String, ioFormat: String, calendarValueType?: String): String",
        "documentation": [
            "날짜 값과 ioFormat 그리고 calendarValueType을 입력 받아서 파라미터로 전달 받은 ioFormat에 맞는 순서로 날짜 값을 반환하는 함수.관련 속성으로 inputCalendar컴포넌트의 useYearMonthFormat이 있다.",
            "*@param* `value` &mdash; 변환할 날짜 값",
            "*@param* `ioFormat` &mdash; 날짜 값에 적용할 ioFormat 값",
            "*@param* `calendarValueType` &mdash; 현재 날짜 값에 적용되어 있는 calendarValueType 값",
            "*@return* \n지정된 ioFormat으로 날짜 값을 반환"
        ]
    },
    {
        "label": "getIOUnFormatDate(value: String, ioFormat: String, calendarValueType?: String): String",
        "documentation": [
            "날짜 값과 ioFormat 그리고 calendarValueType을 입력 받아서 각각의 calendarValueType에 맞는 ioFormat 형식으로된 날짜 값을 한국식 표기 방식인 \"연\" > \"월\" > \"일\" > \"시간\" 순으로 재배열해주는 함수. 관련 속성으로 inputCalendar컴포넌트의 useMonthYearFormat이 있다.",
            "*@param* `value` &mdash; 변환할 날짜 값",
            "*@param* `ioFormat` &mdash; 현재 날짜 값에 적용되어 있는 ioFormat 값",
            "*@param* `calendarValueType` &mdash; 현재 날짜 값에 적용되어 있는 calendarValueType 값",
            "*@return* \n날짜 값을 한국식 표기 방식인 \"연\" > \"월\" > \"일\" > \"시간\" 순으로 재배열해서 값을 반환한다."
        ]
    },
    {
        "label": "getMaxMinYear(): Object",
        "documentation": [
            "maxYear 와 minYear 프로퍼티를 포함한 오브젝트를 반환합니다. config.xml에 정의된 값이 기본값으로 사용됩니다. (아래 Sample 참조.)",
            "*@return* \nmaxYear, minYear"
        ]
    },
    {
        "label": "isValidDate(obj: Object, sDate: String): Boolean",
        "documentation": [
            "\"yyyyMMdd\" 형태의 날짜값을 받아서 유효한 날짜인지를 확인하여 boolean을 반환합니다. 유효하지 않은 날짜라면 obj에 포커스를 줍니다.",
            "*@param* `obj` &mdash; websquare 객체",
            "*@param* `sDate` &mdash; 검증 대상 날짜",
            "*@return* \n유효한 날짜면 true, 아니면 false"
        ]
    },
    {
        "label": "parseDate(str: String, format?: String): Object",
        "documentation": [
            "날짜 형식 포맷을 Date로 변환합니다. (기본 포맷 : yyyyMMdd)",
            "*@param* `str` &mdash; 년월일 String",
            "*@param* `format` &mdash; 날짜형식 포맷",
            "*@return* \n날짜 포맷을 Date 객체로 파싱한 js의 date 오브젝트"
        ]
    },
    {
        "label": "toLunar(solar: String): String",
        "documentation": [
            "\"yyyyMMdd\" 형태의 양력 날짜를 입력으로 받아 해당하는 음력 날짜의 string을 반환한다.",
            "*@param* `solar` &mdash; \"yyyyMMdd\" 형태의 양력 날짜",
            "*@return* \n음력날짜를 나타내는 string"
        ]
    },
    {
        "label": "toTimestampString(dateObj: Object): String",
        "documentation": [
            "java.sql.Timestamp에서 사용되는  yyyy-mm-dd hh:mm:ss.fffffffff을 반환합니다.",
            "*@param* `dateObj` &mdash; JavaScript date객체",
            "*@return* \nyyyy-mm-dd hh:mm:ss.fffffffff 형식의 string"
        ]
    }
]