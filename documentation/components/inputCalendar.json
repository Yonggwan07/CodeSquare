[
    {
        "label": "addClass(className: String)",
        "documentation": [
            "컴포넌트에 class를 추가한다.",
            "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
        ]
    },
    {
        "label": "bind(eventType: String, function: Function)",
        "documentation": [
            "컴포넌트의 이벤트를 동적으로 할당한다.",
            "*@param* `eventType` &mdash; 할당 할 이벤트명.",
            "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
        ]
    },
    {
        "label": "blur()",
        "documentation": [
            "input에 포커스를 제거(blur)한다"
        ]
    },
    {
        "label": "changeClass(oldClassName: String, newClassName: String)",
        "documentation": [
            "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
            "*@param* `newClassName` &mdash; 추가 할 class의 이름"
        ]
    },
    {
        "label": "focus()",
        "documentation": [
            "input의 focus를 주며 browser의 focus동작에 방식에 영향을 받는다."
        ]
    },
    {
        "label": "getDefaultDate(): String",
        "documentation": [
            "현재 컴포넌트에 설정된 defaultDate를 반환합니다. (defaultDate : Input이 비어있는 경우, Calendar에 표시될 기본 날짜. defalutDate 미설정시, 현재 시스템 날짜가 Calendar에 표시된다.)",
            "*@return*  \n현재 설정된 defaultDate"
        ]
    },
    {
        "label": "getDisabled(): Boolean",
        "documentation": [
            "현재 설정되어있는 disabled 속성값을 반환한다.",
            "*@return*  \ndisabled 속성값"
        ]
    },
    {
        "label": "getDisplayFormat(): String",
        "documentation": [
            "현재 컴포넌트에 설정된 displayFormat을 반환합니다.",
            "*@return*  \n현재 설정된 displayFormat"
        ]
    },
    {
        "label": "getFormattedValue(formatStr?: String): String",
        "documentation": [
            "formatStr의 패턴이 적용된 value를 반환하며 foramtStr의 값이 없는 경우  displayFormat속성에 적용된 패턴을 사용하여 value를 반환한다.",
            "*@param* `formatStr` &mdash; format을 적용할 문자열",
            "*@return*  \nformat이 적용된 value"
        ]
    },
    {
        "label": "getID(): String",
        "documentation": [
            "웹스퀘어 컴포넌트의 id를 반환한다.",
            "*@return*  \n웹스퀘어 컴포넌트의 id"
        ]
    },
    {
        "label": "getIoFormat(): String",
        "documentation": [
            "현재 컴포넌트에 설정된 ioFormat속성값을 반환한다.",
            "*@return*  \n현재 설정된 ioFormat속성값"
        ]
    },
    {
        "label": "getOpacity(): Integer",
        "documentation": [
            "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
            "*@return*  \nOpacity 값"
        ]
    },
    {
        "label": "getPluginName(): String",
        "documentation": [
            "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
            "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
        ]
    },
    {
        "label": "getPosition(positionName: String): Number",
        "documentation": [
            "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
            "*@param* `positionName` &mdash; [left,top]위치 종류",
            "*@return*  \n컴포넌트의 위치 값"
        ]
    },
    {
        "label": "getReadOnly(): Boolean",
        "documentation": [
            "현재 설정되어있는 readOnly 속성값을 반환한다.",
            "*@return*  \n현재 설정되어있는 readOnly 속성"
        ]
    },
    {
        "label": "getSize(sizeName: String): Number",
        "documentation": [
            "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
            "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
            "*@return*  \n컴포넌트의 크기 값"
        ]
    },
    {
        "label": "getStyle(propertyName: String): String",
        "documentation": [
            "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
            "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
            "*@return*  \nstyle의 속성값"
        ]
    },
    {
        "label": "getStyleValue(style: String): String",
        "documentation": [
            "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
            "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
            "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
        ]
    },
    {
        "label": "getTitle(): String",
        "documentation": [
            "inputCalendar의 title 속성을 가져온다.",
            "*@return*  \ninputCalendar의 title 속성값."
        ]
    },
    {
        "label": "getUserData(key: String): String",
        "documentation": [
            "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
            "*@param* `key` &mdash; 임의 데이터의 키",
            "*@return*  \nkey에 해당하는 데이터"
        ]
    },
    {
        "label": "getValue(): String",
        "documentation": [
            "input에 입력 된 value를 구분자 없이 반환한다. ex) 2007/11/08 -> 20071108",
            "*@return*  \n구분자 없는 날짜 문자열."
        ]
    },
    {
        "label": "hasClass(className: String): Boolean",
        "documentation": [
            "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
            "*@param* `className` &mdash; 검색 할 className",
            "*@return*  \nclass를 가지고 있는지의 여부"
        ]
    },
    {
        "label": "hide()",
        "documentation": [
            "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
        ]
    },
    {
        "label": "removeClass(className: String)",
        "documentation": [
            "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `className` &mdash; 삭제 할 class명"
        ]
    },
    {
        "label": "select()",
        "documentation": [
            "input에 입력 된 값을 select한다."
        ]
    },
    {
        "label": "setCalendarValueType(calendarValueType: String, options?: JSON)",
        "documentation": [
            "calendarValueType과 displayFormat 및 ioFormat속성을 동적으로 변경한다.",
            "*@param* `calendarValueType` &mdash; [yearMonth, yearMonthDate, yearMonthDateHour, yearMonthDateTime, yearMonthDateTimeSec]새로 설정할 calendarValueType.",
            "*@param* `options` &mdash; 설정할 ioFormat 및 displayFormat. 지정하지 않을 경우 해당 calendarValueType 기본값이 설정됨"
        ]
    },
    {
        "label": "setDefaultDate(dateStr: String)",
        "documentation": [
            "defaultDate속성을 설정한다.",
            "*@param* `dateStr` &mdash; 설정하려는 date 문자열"
        ]
    },
    {
        "label": "setDisabled(disabled: Boolean)",
        "documentation": [
            "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
            "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
        ]
    },
    {
        "label": "setDisplayFormat(format: String)",
        "documentation": [
            "컴포넌트의 displayFormat속성을 설정한다.",
            "*@param* `format` &mdash; 새로 설정할 displayFormat"
        ]
    },
    {
        "label": "setEventPause(evList?: String, flag: Boolean)",
        "documentation": [
            "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
            "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
            "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
        ]
    },
    {
        "label": "setFormat(ioFormat: String, displayFormat: String)",
        "documentation": [
            "ioFormat속성과 displayFormat속성을 설정한다.",
            "*@param* `ioFormat` &mdash; 새로 설정할 ioFormat",
            "*@param* `displayFormat` &mdash; 새로 설정할 displayFormat"
        ]
    },
    {
        "label": "setInputReadOnly(readOnly: Boolean): ",
        "documentation": [
            "인자로 넘겨받은 boolean값에 따라 inputbox만을 readOnly할 수 있다.",
            "*@param* `readOnly` &mdash; 속성을 활성화 시키려면 true, 비활성화 시키려면 false",
            "*@return*  \n"
        ]
    },
    {
        "label": "setOpacity(value: Number)",
        "documentation": [
            "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
            "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
        ]
    },
    {
        "label": "setPosition(left: Number, top: Number, mode?: String)",
        "documentation": [
            "컴포넌트의 위치(left,top)를 설정한다.",
            "*@param* `left` &mdash; left의 값 또는 null.",
            "*@param* `top` &mdash; top의 값 또는 null.",
            "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
        ]
    },
    {
        "label": "setReadOnly(readOnly: Boolean)",
        "documentation": [
            "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
            "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
        ]
    },
    {
        "label": "setRef(ref: String)",
        "documentation": [
            "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
            "*@param* `ref` &mdash; 적용할 ref의 경로."
        ]
    },
    {
        "label": "setSkin(skin: String)",
        "documentation": [
            "calendar의 skin을 설정한다.",
            "*@param* `skin` &mdash; [class1, class2, class3, class4, class5]사용할 skin명"
        ]
    },
    {
        "label": "setStyle(propertyName: String, value: String)",
        "documentation": [
            "컴포넌트의 property별 style을 설정한다.",
            "*@param* `propertyName` &mdash; style 속성 이름",
            "*@param* `value` &mdash; 적용 할 style의 값"
        ]
    },
    {
        "label": "setUserData(key: String, value: String)",
        "documentation": [
            "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
            "*@param* `key` &mdash; 임의 데이터의 키",
            "*@param* `value` &mdash; 임의 데이터의 값"
        ]
    },
    {
        "label": "setValue(value: String)",
        "documentation": [
            "컴포넌트의 value를 설정한다. calendar 역시 value로 선택되어진다.",
            "*@param* `value` &mdash; value값"
        ]
    },
    {
        "label": "show(displayType?: String)",
        "documentation": [
            "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
            "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
        ]
    },
    {
        "label": "toggleClass(className: String)",
        "documentation": [
            "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `className` &mdash; 설정 할 className"
        ]
    },
    {
        "label": "trigger(type: String, array?: Array)",
        "documentation": [
            "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
            "*@param* `type` &mdash; 발생시킬 이벤트 이름",
            "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
        ]
    },
    {
        "label": "unbind(type?: String, function?: Function)",
        "documentation": [
            "컴포넌트에 등록 된 이벤트를 제거한다.",
            "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
            "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
        ]
    },
    {
        "label": "validate(): Boolean",
        "documentation": [
            "현재 설정된 validate설정에 따라 valid여부를 반환합니다. 속성 dateValidCheck=\"true\"로 설정된 경우, 해당 날짜의 유효성(length, year, month, date 범위 및 윤년 등)을 체크합니다.",
            "*@return*  \n입력 값이 유효한 값일 경우 true, 그렇지 않으면 false를 반환한다."
        ]
    },
    {
        "label": "visible(flag: Boolean)",
        "documentation": [
            "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
            "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
        ]
    }
]