[
    {
        "label": "addClass(className: String)",
        "documentation": [
            "컴포넌트에 class를 추가한다.",
            "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
        ]
    },
    {
        "label": "bind(eventType: String, function: Function)",
        "documentation": [
            "컴포넌트의 이벤트를 동적으로 할당한다.",
            "*@param* `eventType` &mdash; 할당 할 이벤트명.",
            "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
        ]
    },
    {
        "label": "changeClass(oldClassName: String, newClassName: String)",
        "documentation": [
            "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
            "*@param* `newClassName` &mdash; 추가 할 class의 이름"
        ]
    },
    {
        "label": "focus()",
        "documentation": [
            "컴포넌트에 focus를 준다."
        ]
    },
    {
        "label": "getDateFormat(): String",
        "documentation": [
            "[default:yyyyMMdd]설정 된 dateFormat을 반환한다.",
            "*@return*  \ndateFormat 문자열 (yyyyMMdd, yyyy-MM-dd 등)"
        ]
    },
    {
        "label": "getDisabled(): Boolean",
        "documentation": [
            "현재 설정되어있는 disabled 속성값을 반환한다.",
            "*@return*  \ndisabled 속성값"
        ]
    },
    {
        "label": "getFormattedValue(): String",
        "documentation": [
            "현재 선택된 날짜를 dateFormat에 적용시켜 문자열로 반환한다.dateFormat을 적용하지 않은 경우 년월일시초의 순서로 별도의 구분자 없이 return 값이 반환된다. (calendarValueType에 따라 년월일시초의 적용 범위가 다르다)참고 ) dateFormat은 setDateFormat API로 설정한다.",
            "*@return*  \nformat이 적용 된 선택 된 날짜의 문자열"
        ]
    },
    {
        "label": "getID(): String",
        "documentation": [
            "웹스퀘어 컴포넌트의 id를 반환한다.",
            "*@return*  \n웹스퀘어 컴포넌트의 id"
        ]
    },
    {
        "label": "getOpacity(): Integer",
        "documentation": [
            "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
            "*@return*  \nOpacity 값"
        ]
    },
    {
        "label": "getPluginName(): String",
        "documentation": [
            "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
            "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
        ]
    },
    {
        "label": "getPosition(positionName: String): Number",
        "documentation": [
            "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
            "*@param* `positionName` &mdash; [left,top]위치 종류",
            "*@return*  \n컴포넌트의 위치 값"
        ]
    },
    {
        "label": "getReadOnly(): Boolean",
        "documentation": [
            "현재 설정되어있는 readOnly 속성값을 반환한다.",
            "*@return*  \n현재 설정되어있는 readOnly 속성"
        ]
    },
    {
        "label": "getSelectedDay(): String",
        "documentation": [
            "현재 선택된 요일을 소문자 영문으로 반환한다.날짜 선택이 없는 경우 \"\"(empty string)을 반환한다.",
            "*@return*  \n[sunday, monday, tuesday, wednesday, thursday, friday, saturday]영문 요일 문자열"
        ]
    },
    {
        "label": "getSize(sizeName: String): Number",
        "documentation": [
            "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
            "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
            "*@return*  \n컴포넌트의 크기 값"
        ]
    },
    {
        "label": "getStyle(propertyName: String): String",
        "documentation": [
            "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
            "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
            "*@return*  \nstyle의 속성값"
        ]
    },
    {
        "label": "getStyleValue(style: String): String",
        "documentation": [
            "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
            "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
            "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
        ]
    },
    {
        "label": "getTitle(): String",
        "documentation": [
            "title 속성값을 반환한다.",
            "*@return*  \ntitle 속성값."
        ]
    },
    {
        "label": "getUserData(key: String): String",
        "documentation": [
            "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
            "*@param* `key` &mdash; 임의 데이터의 키",
            "*@return*  \nkey에 해당하는 데이터"
        ]
    },
    {
        "label": "getValue(): String",
        "documentation": [
            "선택된 날짜값을 구분자 없이 반환한다.",
            "*@return*  \n구분자 없는 날짜 문자열."
        ]
    },
    {
        "label": "gotoCalendar(dateStr: String)",
        "documentation": [
            "dateStr에 해당하는 날짜로 이동한다.dateStr의 값은 구분자없이 yyyyMMdd 형태이다.",
            "*@param* `dateStr` &mdash; 이동할 날짜 (yyyyMMdd 형태)"
        ]
    },
    {
        "label": "gotoLastMonth()",
        "documentation": [
            "현재 선택된 날짜를 1달 전으로 이동한다."
        ]
    },
    {
        "label": "gotoLastYear()",
        "documentation": [
            "현재 선택된 날짜에서 1년 전으로 이동한다."
        ]
    },
    {
        "label": "gotoMonth(month: String||Number)",
        "documentation": [
            "month에 해당하는 월로 이동한다.해당 월이 유효하지 않는 경우, 최초 월(1)로 이동한다.",
            "*@param* `month` &mdash; 이동하려는 월의 문자 또는 숫자.(\"02\",\"2\",2 모두 1월로 이동)"
        ]
    },
    {
        "label": "gotoNextMonth()",
        "documentation": [
            "현재 선택된 날짜를 1달 뒤로 이동한다."
        ]
    },
    {
        "label": "gotoNextYear()",
        "documentation": [
            "현재 선택된 날짜를 1년 뒤로 이동한다."
        ]
    },
    {
        "label": "gotoTime(hour: Number||String, minute: Number||String)",
        "documentation": [
            "시간을 선택 할 수 있는 달력에서 hour과 minute에 해당하는 시간으로 이동한다.해당 시간이 유효하지 않는 경우, 최초 시(0)와 분(0)으로 설정한다.",
            "*@param* `hour` &mdash; 이동하려는 시간.(\"02\", \"2\", 2 모두 2시로 설정)",
            "*@param* `minute` &mdash; 이동하려는 분.(\"05\", \"5\", 5 모두 5분으로 설정)"
        ]
    },
    {
        "label": "gotoToday()",
        "documentation": [
            "현재 날짜로 이동한다."
        ]
    },
    {
        "label": "gotoYear(year: String||Number)",
        "documentation": [
            "year에 해당하는 연도로 이동한다.해당 년도가 유효하지 않는 경우, 최초년도로 이동한다.",
            "*@param* `year` &mdash; 이동하려는 연도.(\"2002\", 2002 모두 2002년으로 이동)"
        ]
    },
    {
        "label": "hasClass(className: String): Boolean",
        "documentation": [
            "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
            "*@param* `className` &mdash; 검색 할 className",
            "*@return*  \nclass를 가지고 있는지의 여부"
        ]
    },
    {
        "label": "hide()",
        "documentation": [
            "컴포넌트를 화면에서 보이지 않도록 숨깁니다."
        ]
    },
    {
        "label": "removeClass(className: String)",
        "documentation": [
            "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `className` &mdash; 삭제 할 class명"
        ]
    },
    {
        "label": "setCellClass(dateStr: String, className: String)",
        "documentation": [
            "특정 날짜에 class를 지정한다.",
            "*@param* `dateStr` &mdash; class를 지정할 날짜",
            "*@param* `className` &mdash; 지정할 class명"
        ]
    },
    {
        "label": "setDateFormat(format: String)",
        "documentation": [
            "dateFormat을 설정하며 format이 적용 된 value는 getFormattedValue API를 이용하여 반환 받을 수 있다. calendarValueType옵션에 따라 format으로 사용할 수 있는 문자열이 다르다.calendarValueType옵션이 yearMonthDate인 경우 사용할 수 있는 문자열은 yyyy, MM, dd이고,calendarValueType옵션이 yearMonth인 경우 사용할 수 있는 문자열은 yyyy, MM이고,calendarValueType옵션이 yearMonthDateTime인 경우 사용할 수 있는 문자열은 yyyy, MM, dd, HH, mm이고,calendarValueType옵션이 yearMonthDateTimeSec인 경우 사용할 수 있는 문자열은 yyyy, MM, dd, HH, mm, SS입니다.",
            "*@param* `format` &mdash; 적용할 dateFormat.(yyyy-MM-dd와 같은 문자열)"
        ]
    },
    {
        "label": "setDisabled(disabled: Boolean)",
        "documentation": [
            "달력 컴포넌트를 disabled 처리를 한다.",
            "*@param* `disabled` &mdash; disabled 처리를 위한 boolean값(true, false)"
        ]
    },
    {
        "label": "setEventPause(evList?: String, flag: Boolean)",
        "documentation": [
            "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
            "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
            "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
        ]
    },
    {
        "label": "setOpacity(value: Number)",
        "documentation": [
            "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
            "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
        ]
    },
    {
        "label": "setPosition(left: Number, top: Number, mode?: String)",
        "documentation": [
            "컴포넌트의 위치(left,top)를 설정한다.",
            "*@param* `left` &mdash; left의 값 또는 null.",
            "*@param* `top` &mdash; top의 값 또는 null.",
            "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
        ]
    },
    {
        "label": "setReadOnly(readOnly: Boolean)",
        "documentation": [
            "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
            "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
        ]
    },
    {
        "label": "setSize(width: Number, heigth: Number)",
        "documentation": [
            "컴포넌트의 크기(width,height)를 설정한다.",
            "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
            "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
        ]
    },
    {
        "label": "setSkin(skinName: String)",
        "documentation": [
            "skin을 설정한다.",
            "*@param* `skinName` &mdash; [class1, class2, class3, class4, class5]사용할 skin명"
        ]
    },
    {
        "label": "setStyle(propertyName: String, value: String)",
        "documentation": [
            "컴포넌트의 property별 style을 설정한다.",
            "*@param* `propertyName` &mdash; style 속성 이름",
            "*@param* `value` &mdash; 적용 할 style의 값"
        ]
    },
    {
        "label": "setUserData(key: String, value: String)",
        "documentation": [
            "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
            "*@param* `key` &mdash; 임의 데이터의 키",
            "*@param* `value` &mdash; 임의 데이터의 값"
        ]
    },
    {
        "label": "show(displayType?: String)",
        "documentation": [
            "컴포넌트를 화면에 보이도록 설정합니다.",
            "*@param* `displayType` &mdash; display의 속성 값"
        ]
    },
    {
        "label": "toggleClass(className: String)",
        "documentation": [
            "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `className` &mdash; 설정 할 className"
        ]
    },
    {
        "label": "trigger(type: String, array?: Array)",
        "documentation": [
            "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
            "*@param* `type` &mdash; 발생시킬 이벤트 이름",
            "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
        ]
    },
    {
        "label": "unbind(type?: String, function?: Function)",
        "documentation": [
            "컴포넌트에 등록 된 이벤트를 제거한다.",
            "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
            "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
        ]
    },
    {
        "label": "visible(flag: Boolean)",
        "documentation": [
            "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
            "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
        ]
    }
]