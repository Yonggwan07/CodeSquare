[
    {
        "label": "addClass(className: String)",
        "documentation": [
            "컴포넌트에 class를 추가한다.",
            "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
        ]
    },
    {
        "label": "bind(eventType: String, function: Function)",
        "documentation": [
            "컴포넌트의 이벤트를 동적으로 할당한다.",
            "*@param* `eventType` &mdash; 할당 할 이벤트명.",
            "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
        ]
    },
    {
        "label": "changeClass(oldClassName: String, newClassName: String)",
        "documentation": [
            "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
            "*@param* `newClassName` &mdash; 추가 할 class의 이름"
        ]
    },
    {
        "label": "closeWindow()",
        "documentation": [
            "현재 활성화되어 있는 window를 닫는다.window의 닫기 버튼을 누른 것과 동일하다."
        ]
    },
    {
        "label": "createWindow(title: String, iconUrl: String, src: String, windowTitle?: String, windowId?: String, openAction?: String, closeAction?: String, windowTooltip?: String)",
        "documentation": [
            "window를 생성(open)한다.",
            "*@param* `title` &mdash; 툴바의 네임레이어에 표시되는 타이틀.",
            "*@param* `iconUrl` &mdash; 현재는 사용되지 않으며 null로 입력한다.(각 윈도우의 아이콘 url 문자열)",
            "*@param* `src` &mdash; window에 link할 페이지의 URL.",
            "*@param* `windowTitle` &mdash; window의 헤더에 표시될 타이틀로 null 이나 \"\"입력시 title값이 출력.",
            "*@param* `windowId` &mdash; window ID로 null 이나 \"\"입력시 title이 id로 생성.",
            "*@param* `openAction` &mdash; [existWindow, newWindow, selectWindow]existWindow : id가 동일한 윈도우가 떠있으면 그 윈도우를 사용하여 다시 표시 / newWindow : 항상 새로운 창을 생성 / selectWindow : id가 동일한 창이 있으면 그 윈도우를 선택",
            "*@param* `closeAction` &mdash; window가 닫힐 때 동작을 지정하는 함수명(return은 boolean으로 하여야 함 false일 경우 닫기 중지, true일 경우 닫기)",
            "*@param* `windowTooltip` &mdash; 툴바의 네임레이어에 표현될 tooltip.(미입력시 windowTitle이 tooltip으로 셋팅됨)"
        ]
    },
    {
        "label": "focus()",
        "documentation": [
            "컴포넌트에 focus를 준다."
        ]
    },
    {
        "label": "getDisabled(): Boolean",
        "documentation": [
            "현재 설정되어있는 disabled 속성값을 반환한다.",
            "*@return*  \ndisabled 속성값"
        ]
    },
    {
        "label": "getID(): String",
        "documentation": [
            "웹스퀘어 컴포넌트의 id를 반환한다.",
            "*@return*  \n웹스퀘어 컴포넌트의 id"
        ]
    },
    {
        "label": "getOpacity(): Integer",
        "documentation": [
            "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
            "*@return*  \nOpacity 값"
        ]
    },
    {
        "label": "getPluginName(): String",
        "documentation": [
            "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
            "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
        ]
    },
    {
        "label": "getPosition(positionName: String): Number",
        "documentation": [
            "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
            "*@param* `positionName` &mdash; [left,top]위치 종류",
            "*@return*  \n컴포넌트의 위치 값"
        ]
    },
    {
        "label": "getReadOnly(): Boolean",
        "documentation": [
            "현재 설정되어있는 readOnly 속성값을 반환한다.",
            "*@return*  \n현재 설정되어있는 readOnly 속성"
        ]
    },
    {
        "label": "getSelectedIndex(): Number",
        "documentation": [
            "선택된 window의 index를 반환한다.",
            "*@return*  \n선택된 window의 index"
        ]
    },
    {
        "label": "getSelectedWindowId()",
        "documentation": [
            "선택된 window의 windowId를 반환한다.createWindow API를 호출 시 windowId를 설정하지 않은 경우 title의 값이 ID로 설정된다."
        ]
    },
    {
        "label": "getSize(sizeName: String): Number",
        "documentation": [
            "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
            "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
            "*@return*  \n컴포넌트의 크기 값"
        ]
    },
    {
        "label": "getStyle(propertyName: String): String",
        "documentation": [
            "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
            "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
            "*@return*  \nstyle의 속성값"
        ]
    },
    {
        "label": "getStyleValue(style: String): String",
        "documentation": [
            "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
            "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
            "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
        ]
    },
    {
        "label": "getTitle(): String",
        "documentation": [
            "title 속성값을 반환한다.",
            "*@return*  \ntitle 속성값."
        ]
    },
    {
        "label": "getUserData(key: String): String",
        "documentation": [
            "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
            "*@param* `key` &mdash; 임의 데이터의 키",
            "*@return*  \nkey에 해당하는 데이터"
        ]
    },
    {
        "label": "getWindow(title: String): Object",
        "documentation": [
            "인자로 넘겨진 title를 가진 window의 window 객체를 반환한다.window에 link된 WedSquare페이지의 Function 또는 컴포넌트 등에 접근할 때 사용된다.",
            "*@param* `title` &mdash; 윈도우 title",
            "*@return*  \nwindow 객체"
        ]
    },
    {
        "label": "getWindowByWindowId(windowId: String, focus?: Boolean): Object",
        "documentation": [
            "인자로 넘겨진 windowID를 가진 window의 window 객체를 반환한다.",
            "*@param* `windowId` &mdash; window ID",
            "*@param* `focus` &mdash; window에 focus를 줄지의 여부",
            "*@return*  \nwindow 객체"
        ]
    },
    {
        "label": "getWindowLabel(windowId: String, type: String)",
        "documentation": [
            "인자값으로 넘어오는 type에 따라 label(text)값을 반환한다.type의 종류 : toolbar(툴바에 있는 네임레이어의 값), window(헤더의 title의 값), tooltip(툴바에 있는 네임레이어에 mouse over시 나오는 tooltip)",
            "*@param* `windowId` &mdash; 반환할 window의 id",
            "*@param* `type` &mdash; [toolbar, window, tooltip]label의 type"
        ]
    },
    {
        "label": "hasClass(className: String): Boolean",
        "documentation": [
            "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
            "*@param* `className` &mdash; 검색 할 className",
            "*@return*  \nclass를 가지고 있는지의 여부"
        ]
    },
    {
        "label": "hide()",
        "documentation": [
            "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
        ]
    },
    {
        "label": "removeClass(className: String)",
        "documentation": [
            "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `className` &mdash; 삭제 할 class명"
        ]
    },
    {
        "label": "setAllWindowStatusMsg(msg: String)",
        "documentation": [
            "모든 window의 상태 메세지를 설정한다.",
            "*@param* `msg` &mdash; 상태 메세지"
        ]
    },
    {
        "label": "setDisabled(disabled: Boolean)",
        "documentation": [
            "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
            "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
        ]
    },
    {
        "label": "setEventPause(evList?: String, flag: Boolean)",
        "documentation": [
            "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
            "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
            "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
        ]
    },
    {
        "label": "setFocus(index: Number)",
        "documentation": [
            "index에 해당하는 window에 focus를 준다.",
            "*@param* `index` &mdash; Window index"
        ]
    },
    {
        "label": "setOpacity(value: Number)",
        "documentation": [
            "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
            "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
        ]
    },
    {
        "label": "setPosition(left: Number, top: Number, mode?: String)",
        "documentation": [
            "컴포넌트의 위치(left,top)를 설정한다.",
            "*@param* `left` &mdash; left의 값 또는 null.",
            "*@param* `top` &mdash; top의 값 또는 null.",
            "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
        ]
    },
    {
        "label": "setReadOnly(readOnly: Boolean)",
        "documentation": [
            "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
            "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
        ]
    },
    {
        "label": "setSize(width: Number, height: Number)",
        "documentation": [
            "컴포넌트의 크기를 조정한다.",
            "*@param* `width` &mdash; 컴포넌트의 폭",
            "*@param* `height` &mdash; 컴포넌트의 높이"
        ]
    },
    {
        "label": "setStyle(propertyName: String, value: String)",
        "documentation": [
            "컴포넌트의 property별 style을 설정한다.",
            "*@param* `propertyName` &mdash; style 속성 이름",
            "*@param* `value` &mdash; 적용 할 style의 값"
        ]
    },
    {
        "label": "setUserData(key: String, value: String)",
        "documentation": [
            "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
            "*@param* `key` &mdash; 임의 데이터의 키",
            "*@param* `value` &mdash; 임의 데이터의 값"
        ]
    },
    {
        "label": "setWindowCustomMsg(msg: String)",
        "documentation": [
            "현재 선택되어 있는 window의 사용자정의 메세지를 설정한다. (useCustomMsg=\"true\"인경우)",
            "*@param* `msg` &mdash; 상태 메세지"
        ]
    },
    {
        "label": "setWindowLabel(windowId: String, type: String, value: String)",
        "documentation": [
            "windowId에 해당하는 window의 type에 따른 label값을 설정한다.type의 종류 : toolbar(툴바에 있는 네임레이어의 값), window(헤더의 title의 값), tooltip(툴바에 있는 네임레이어에 mouse over시 나오는 tooltip), all(앞의 3가지 모두).",
            "*@param* `windowId` &mdash; window의 id",
            "*@param* `type` &mdash; [toolbar, window, tooltip, all]설정할 label의 type",
            "*@param* `value` &mdash; 설정할 label의 값"
        ]
    },
    {
        "label": "setWindowPosition(left: Number, top: Number)",
        "documentation": [
            "현재 선택되어 있는 window의 x,y 위치를 조정한다.(px단위로 적용된다.)",
            "*@param* `left` &mdash; ",
            "*@param* `top` &mdash; "
        ]
    },
    {
        "label": "setWindowSize(width: Number, height: Number)",
        "documentation": [
            "현재 선택되어 있는 window의 크기를 조정한다.(px단위로 적용된다.)",
            "*@param* `width` &mdash; window의 넓이",
            "*@param* `height` &mdash; window의 높이"
        ]
    },
    {
        "label": "setWindowStatusMsg(msg: String)",
        "documentation": [
            "현재 선택되어 있는 window의 상태 메세지를 설정한다.",
            "*@param* `msg` &mdash; 상태 메세지"
        ]
    },
    {
        "label": "show(displayType?: String)",
        "documentation": [
            "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
            "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
        ]
    },
    {
        "label": "toggleClass(className: String)",
        "documentation": [
            "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
            "*@param* `className` &mdash; 설정 할 className"
        ]
    },
    {
        "label": "trigger(type: String, array?: Array)",
        "documentation": [
            "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
            "*@param* `type` &mdash; 발생시킬 이벤트 이름",
            "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
        ]
    },
    {
        "label": "unbind(type?: String, function?: Function)",
        "documentation": [
            "컴포넌트에 등록 된 이벤트를 제거한다.",
            "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
            "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
        ]
    },
    {
        "label": "visible(flag: Boolean)",
        "documentation": [
            "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
            "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
        ]
    }
]