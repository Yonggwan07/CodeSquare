[
    {
        "label": "create(dataCollectionString: String, dataCollectionObject: Object)",
        "documentation": [
            "dataList 및 dataMap을 동적으로 생성. 아래 예제와 같이 두 가지 방법(XML 및 JSON)으로 생성 가능.",
            "*@param* `dataCollectionString` &mdash; dataList, dataMap의 XML 문자열.",
            "*@param* `dataCollectionObject` &mdash; dataList, dataMap의 JSON 객체"
        ]
    },
    {
        "label": "get(type: String, dcOptions: Array, returnOptions?: JSON): JSON||XML||Array",
        "documentation": [
            "조건에 의해 다건의 dataList와 dataMap의 객체를 꺼내온다.return type으로 XML, ARRAY, JSON이 있다.",
            "*@param* `type` &mdash; 반환 타입명. JSON, XML, ARRAY 가 있다.",
            "*@param* `dcOptions` &mdash; 각 DataCollection(DataMap/DataList) ID 또는 검색 조건을 가진 JSON 객체을 담고 있는 Array.",
            "*@param* `returnOptions` &mdash; return 객체에 대한 옵션이 담긴 JSON 객체.",
            "*@return* \ntype에 따른 dataCollection의 데이터 객체."
        ]
    },
    {
        "label": "getAllDataCollection(type?: string): Array",
        "documentation": [
            "한 화면 내에 있는 모든 DataCollection 정보를 반환. IFrame이나 Popup과 같은 다른 영역에 있는 DataCollection은 제외.",
            "*@param* `type` &mdash; 반환할 DataCollection 정보 타입을 지정. (ID 혹은 객체 자체)",
            "*@return* \nDataCollection의 ID를 담은 배열. type이 \"object\"인 경우 DataCollection 객체 자체를 담은 배열."
        ]
    },
    {
        "label": "getBroadcast(): boolean",
        "documentation": [
            "DataCollection의 broadcast 상태를 가져오는 API",
            "*@return* \nbroadcast 상태 flag값"
        ]
    },
    {
        "label": "getInfo(idArray?: Array): JSON",
        "documentation": [
            "DataCollection의 상세 정보(xml에서 입력한 attribute 값)를 조회하는 함수",
            "*@param* `idArray` &mdash; 각 DataCollection(DataMap/DataList) ID를 담고 있는 Array. 값을 지정하지 않을 경우 모든 dataCollection이 대상이 된다.",
            "*@return* \n각 dataCollection의 하위 attribute값을 json형태로 표현한 json객체"
        ]
    },
    {
        "label": "getOption(propertyName: String): String",
        "documentation": [
            "dataCollection객체의 속성값을 꺼내온다.",
            "*@param* `propertyName` &mdash; DataCollection의 속성.",
            "*@return* \ndataCollection 속성의 value를 반환한다."
        ]
    },
    {
        "label": "remove(dataCollectionID: String)",
        "documentation": [
            "dataList, dataMap, linkedDataList를 삭제하는 함수. dataList가 remove API를 통해 삭제되면 해당 dataList를 bind하고 있는 linkedDataList도 함께 삭제된다.",
            "*@param* `dataCollectionID` &mdash; dataCollection의 ID."
        ]
    },
    {
        "label": "set(dataType: String, dataObject: JSON||XML||ARRAY, idArray?: Array)",
        "documentation": [
            "생성 되어 있는 여러개의 dataList와 dataMap의 값을 한번에 설정한다.linkedDataList는 미지원한다. ( linkedDataList는 bind로 참조하고 있는 dataList에 셋팅해야 한다. )",
            "*@param* `dataType` &mdash; 데이터의 타입으로 XML, ARRAY, JSON이 있다.",
            "*@param* `dataObject` &mdash; setting 할 데이터 객체.",
            "*@param* `idArray` &mdash; 각 DataCollection(DataMap/DataList) ID 또는 셋팅 조건을 가진 JSON 객체을 담고 있는 Array. 값을 지정하지 않을 경우 dataObject에 정의 된 key를 참조하여 데이터가 셋팅 된다."
        ]
    },
    {
        "label": "setBroadcast(flag: boolean)",
        "documentation": [
            "모든 dataCollection의 broadcast 상태를 설정한다. dataCollection 변경에 따른 화면 갱신을 최소화하기 위해 사용하는 API.  broadcast가 비활성화 (false) 상태일 경우 dataCollection이 변경되어도 연동된 컴포넌트 ui는 갱신되지 않는다. broadcast가 비활성화 상태에서 활성화 상태로 변경될 경우 dataCollection과 화면이 동기화되는 처리가 저동으로 이루어진다.",
            "*@param* `flag` &mdash; broadcast 설정 플래그. true시 broadcast 활성화와 동시에 dataCollection 갱신, false시 broadcast 비활성화."
        ]
    },
    {
        "label": "setOption(propertyName: String, propertyValue: String)",
        "documentation": [
            "dataCollection객체의 속성을 설정한다. ( 사용자의 임의 속성 및 ID는 적용 안됨 )",
            "*@param* `propertyName` &mdash; 셋팅 할 속성명.",
            "*@param* `propertyValue` &mdash; 속성에 셋팅 할 값."
        ]
    }
]