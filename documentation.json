{
    "anchor": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getHref(): String",
            "documentation": [
                "href속성에 정의 된 값을 반환한다.",
                "*@return*  \nhref 속성의 값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "현재 컴포넌트가 가진 값을 반환합니다.",
                "*@return*  \n설정된 값"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "anchor 컴포넌트를 disabled 처리를 한다.",
                "*@param* `disabled` &mdash; disabled 처리를 위한 boolean값(true, false)"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setHref(href: String)",
            "documentation": [
                "href 속성의 값을 설정한다.",
                "*@param* `href` &mdash; url 정보"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정한다.",
                "*@param* `ref` &mdash; 적용 할 ref의 경로"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "컴포넌트에 인자로 넘어온 값을 설정합니다.",
                "*@param* `value` &mdash; 설정할 value"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "autoComplete": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addItem(label: String, value: String, nodest: Element, index?: Number): Boolean",
            "documentation": [
                "목록에 뿌려진 항목을 추가한다.",
                "*@param* `label` &mdash; 항목의 label 값",
                "*@param* `value` &mdash; 항목의 value 값",
                "*@param* `nodest` &mdash; 항목의 nodeset 값",
                "*@param* `index` &mdash; 항목의 index 값",
                "*@return*  \naddItem 성공 여부. false 리턴시 addItem을 수행하지 않음."
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getItem(index: Number): JSON",
            "documentation": [
                "index에 해당하는 항목의 정보가 담긴 객체를 반환한다.",
                "*@param* `index` &mdash; 항목의 index 값",
                "*@return*  \n항목의 정보가 담긴 객체\n\tlabel : 화면에 표현된 label (displayMode속성이 적용 된 값)\n\torgLabel : label의 값\n\tvalue : value의 값"
            ]
        },
        {
            "label": "getItemCount()",
            "documentation": [
                "항목의 개수"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSearchedItems(): Array",
            "documentation": [
                "검색된 목록의 모든 항목들을 배열로 반환한다.",
                "*@return*  \n항목의 정보가 담긴 객체를 담고 있는 1차원 배열\n\tObject : label, value, orgLabel, index이 담긴 객체"
            ]
        },
        {
            "label": "getSelectedIndex(): Number",
            "documentation": [
                "선택된 항목의 index를 반환한다.선택된 항목이 없는 경우 -1을 반환한다.",
                "*@return*  \n선택된 항목의 index"
            ]
        },
        {
            "label": "getSelectedRow(): JSON",
            "documentation": [
                "선택된 항목의 정보가 담긴 객체를 반환한다.그리드 아이템셋이 적용된 경우 선택된 row를 반환한다.",
                "*@return*  \n항목의 정보가 담긴 객체 - 기본 반환 정보\n\tlabel : label - displayMode가 적용되지 않은 원래의 label값\n\tvalue : value"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getText(isOriginal?: Boolean): String",
            "documentation": [
                "선택된 항목의 label을 반환한다.",
                "*@param* `isOriginal` &mdash; [default:false, true]true일 경우 본래의 label을 반환.",
                "*@return*  \n현재 선택된 항목의 label"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "현재 선택된 항목의 value값을 반환한다",
                "*@return*  \n선택된 항목의 value."
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨깁니다."
            ]
        },
        {
            "label": "initAutoComplete()",
            "documentation": [
                "autoCompelete을 초기화한다. (항목 삭제 및 value 초기화)"
            ]
        },
        {
            "label": "openTable()",
            "documentation": [
                "항목창을 연다.interactionMode속성이 true인 경우 submission 또는 submissionFunc가 실행 후에 호출해야 한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setDummyData(value: String, label: String)",
            "documentation": [
                "항목에 나열된 값이 아닌 임의의 값을 설정(value와 label)한다.항목에는 해당 값을 추가하지 않으며 selectedIndex는 -1로 설정된다.",
                "*@param* `value` &mdash; 저장하고자 하는 value 값",
                "*@param* `label` &mdash; 저장하고자 하는 label 값"
            ]
        },
        {
            "label": "setEditMode()",
            "documentation": [
                "입력창(input)에 foucs를 준다."
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setItem(label: String, value: String, nodest: Element, index: Number)",
            "documentation": [
                "itemTable의 index번째 항목의 label과 value을 변경한다.",
                "*@param* `label` &mdash; 항목의 label 값",
                "*@param* `value` &mdash; 항목의 value 값",
                "*@param* `nodest` &mdash; 항목의 nodeset 값",
                "*@param* `index` &mdash; 항목의 index 값"
            ]
        },
        {
            "label": "setItemSet(nodeset?: String, label?: String, value?: String)",
            "documentation": [
                "항목의 itemset을 설정한다. 현재 선택(입력)된 값은 그대로 있고 항목만 변경된다.",
                "*@param* `nodeset` &mdash; 변경하려는 nodeset의 값",
                "*@param* `label` &mdash; 변경하려는 label 경로",
                "*@param* `value` &mdash; 변경하려는 value 경로"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "바인딩 된 ref 경로를 동적으로 변경합니다.",
                "*@param* `ref` &mdash; 변경할 ref의 XPath"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 propertyName에 해당하는 style의 값을 설정합니다.",
                "*@param* `propertyName` &mdash; 바꾸고 싶은 style 값의 이름",
                "*@param* `value` &mdash; 설정할 style의 값"
            ]
        },
        {
            "label": "setText(label: String, isOriginal?: Boolean)",
            "documentation": [
                "인자로 넘겨진 label과 같은 label을 가지는 항목을 선택한다.",
                "*@param* `label` &mdash; 선택하고자 하는 항목의 label",
                "*@param* `isOriginal` &mdash; [default:false, true]label을 format이 적용되지 않은 본래의 값으로 찾을 것인지에 대한 여부."
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "인자로 넘겨진 value와 같은 값을 가진 항목을 선택한다.",
                "*@param* `value` &mdash; 선택하려는 항목의 value"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate(): Boolean",
            "documentation": [
                "autoComplete의 validate를 체크합니다. autoComplete는 필수입력 여부만 체크합니다.",
                "*@return*  \nvalidate 결과 반환 (true/false)"
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "body": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "calendar": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDateFormat(): String",
            "documentation": [
                "[default:yyyyMMdd]설정 된 dateFormat을 반환한다.",
                "*@return*  \ndateFormat 문자열 (yyyyMMdd, yyyy-MM-dd 등)"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getFormattedValue(): String",
            "documentation": [
                "현재 선택된 날짜를 dateFormat에 적용시켜 문자열로 반환한다.dateFormat을 적용하지 않은 경우 년월일시초의 순서로 별도의 구분자 없이 return 값이 반환된다. (calendarValueType에 따라 년월일시초의 적용 범위가 다르다)참고 ) dateFormat은 setDateFormat API로 설정한다.",
                "*@return*  \nformat이 적용 된 선택 된 날짜의 문자열"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedDay(): String",
            "documentation": [
                "현재 선택된 요일을 소문자 영문으로 반환한다.날짜 선택이 없는 경우 \"\"(empty string)을 반환한다.",
                "*@return*  \n[sunday, monday, tuesday, wednesday, thursday, friday, saturday]영문 요일 문자열"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "선택된 날짜값을 구분자 없이 반환한다.",
                "*@return*  \n구분자 없는 날짜 문자열."
            ]
        },
        {
            "label": "gotoCalendar(dateStr: String)",
            "documentation": [
                "dateStr에 해당하는 날짜로 이동한다.dateStr의 값은 구분자없이 yyyyMMdd 형태이다.",
                "*@param* `dateStr` &mdash; 이동할 날짜 (yyyyMMdd 형태)"
            ]
        },
        {
            "label": "gotoLastMonth()",
            "documentation": [
                "현재 선택된 날짜를 1달 전으로 이동한다."
            ]
        },
        {
            "label": "gotoLastYear()",
            "documentation": [
                "현재 선택된 날짜에서 1년 전으로 이동한다."
            ]
        },
        {
            "label": "gotoMonth(month: String||Number)",
            "documentation": [
                "month에 해당하는 월로 이동한다.해당 월이 유효하지 않는 경우, 최초 월(1)로 이동한다.",
                "*@param* `month` &mdash; 이동하려는 월의 문자 또는 숫자.(\"02\",\"2\",2 모두 1월로 이동)"
            ]
        },
        {
            "label": "gotoNextMonth()",
            "documentation": [
                "현재 선택된 날짜를 1달 뒤로 이동한다."
            ]
        },
        {
            "label": "gotoNextYear()",
            "documentation": [
                "현재 선택된 날짜를 1년 뒤로 이동한다."
            ]
        },
        {
            "label": "gotoTime(hour: Number||String, minute: Number||String)",
            "documentation": [
                "시간을 선택 할 수 있는 달력에서 hour과 minute에 해당하는 시간으로 이동한다.해당 시간이 유효하지 않는 경우, 최초 시(0)와 분(0)으로 설정한다.",
                "*@param* `hour` &mdash; 이동하려는 시간.(\"02\", \"2\", 2 모두 2시로 설정)",
                "*@param* `minute` &mdash; 이동하려는 분.(\"05\", \"5\", 5 모두 5분으로 설정)"
            ]
        },
        {
            "label": "gotoToday()",
            "documentation": [
                "현재 날짜로 이동한다."
            ]
        },
        {
            "label": "gotoYear(year: String||Number)",
            "documentation": [
                "year에 해당하는 연도로 이동한다.해당 년도가 유효하지 않는 경우, 최초년도로 이동한다.",
                "*@param* `year` &mdash; 이동하려는 연도.(\"2002\", 2002 모두 2002년으로 이동)"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨깁니다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setCellClass(dateStr: String, className: String)",
            "documentation": [
                "특정 날짜에 class를 지정한다.",
                "*@param* `dateStr` &mdash; class를 지정할 날짜",
                "*@param* `className` &mdash; 지정할 class명"
            ]
        },
        {
            "label": "setDateFormat(format: String)",
            "documentation": [
                "dateFormat을 설정하며 format이 적용 된 value는 getFormattedValue API를 이용하여 반환 받을 수 있다. calendarValueType옵션에 따라 format으로 사용할 수 있는 문자열이 다르다.calendarValueType옵션이 yearMonthDate인 경우 사용할 수 있는 문자열은 yyyy, MM, dd이고,calendarValueType옵션이 yearMonth인 경우 사용할 수 있는 문자열은 yyyy, MM이고,calendarValueType옵션이 yearMonthDateTime인 경우 사용할 수 있는 문자열은 yyyy, MM, dd, HH, mm이고,calendarValueType옵션이 yearMonthDateTimeSec인 경우 사용할 수 있는 문자열은 yyyy, MM, dd, HH, mm, SS입니다.",
                "*@param* `format` &mdash; 적용할 dateFormat.(yyyy-MM-dd와 같은 문자열)"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "달력 컴포넌트를 disabled 처리를 한다.",
                "*@param* `disabled` &mdash; disabled 처리를 위한 boolean값(true, false)"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setSkin(skinName: String)",
            "documentation": [
                "skin을 설정한다.",
                "*@param* `skinName` &mdash; [class1, class2, class3, class4, class5]사용할 skin명"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정합니다.",
                "*@param* `displayType` &mdash; display의 속성 값"
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "chart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "appendData(index: Number, xmlArray: Array)",
            "documentation": [
                "index에 해당하는 노드 하위에 사용자 데이터를 기반으로 노드를 추가한다.dynamicAppend속성이 true로 설정되야한다.",
                "*@param* `index` &mdash; 노드의 index",
                "*@param* `xmlArray` &mdash; 추가할 노드의 XML 데이터가 담긴 1차원 배열"
            ]
        },
        {
            "label": "appendNode(parentNode: Object, childNode: Object)",
            "documentation": [
                "TreeView에서 반환하는 Node를 기반으로 parentNode 하위에 childNode를 추가한다.dynamicAppend속성이 true로 설정되야하며 일반적으로 TreeView끼리의 노드 추가 시에 사용되며 TreeView의 이벤트 또는 API로 Node를 반환 받아 파라메터로 사용한다.",
                "*@param* `parentNode` &mdash; 기준 Node",
                "*@param* `childNode` &mdash; 추가할 Node"
            ]
        },
        {
            "label": "appendXmlNodes(parentNode: Object, xmlArray: Array)",
            "documentation": [
                "TreeView에서 반환하는 Node(parentNode)의 하위에 XML 데이터를 기반으로 노드를 추가한다.dynamicAppend속성이 true로 설정되야한다.",
                "*@param* `parentNode` &mdash; 기준 Node",
                "*@param* `xmlArray` &mdash; 추가할 노드의 XML 데이터가 담긴 1차원 배열"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "checkByValue(value: String, checkValue: Boolean||String, childCheck?: Boolean)",
            "documentation": [
                "value를 기반으로 노드(항목)을 찾아 checkbox의 value를 설정한다.trueValue, falseValue 속성의 값을 참조하여 check되며 해당 속성이 정의되지 않은 경우 각 true, false로 제어 가능하다.",
                "*@param* `value` &mdash; 대상 노드의 value",
                "*@param* `checkValue` &mdash; checkbox의 value ( trueValue와 falseValue 속성이 정의되지 않은 경우 true, false로 제어가능하다 )",
                "*@param* `childCheck` &mdash; 선택한 노드의 자녀 노드의 checkbox check여부"
            ]
        },
        {
            "label": "collapseNode(value: String||Number, hierarchy?: Boolean)",
            "documentation": [
                "value 또는 index를 기반으로 찾은 노드(항목)를 접는다. index는 1부터 시작한다.",
                "*@param* `value` &mdash; 대상 노드의 value 또는 index (index는 1부터 시작한다.)",
                "*@param* `hierarchy` &mdash; 자식 노드까지 적용할지의 여부"
            ]
        },
        {
            "label": "disableCheckboxByValue(value: String, checkDisabled: Boolean, childDisalbed?: Boolean)",
            "documentation": [
                "value를 기반으로 노드(항목)을 찾아 checkbox의 disabled를 설정한다.",
                "*@param* `value` &mdash; 대상 노드의 value",
                "*@param* `checkDisabled` &mdash; checkbox의 disabled 적용 여부",
                "*@param* `childDisalbed` &mdash; 자녀 노드까지의 적용 여부"
            ]
        },
        {
            "label": "expandNode(value: String||Number, hierarchy?: Boolean)",
            "documentation": [
                "value 또는 index를 기반으로 찾은 노드(항목)를 확장한다. index는 1부터 시작한다.",
                "*@param* `value` &mdash; value 대상 노드의 value 또는 index (index는 1부터 시작한다.)",
                "*@param* `hierarchy` &mdash; 자식 노드까지 적용할지의 여부"
            ]
        },
        {
            "label": "findNodeByIndex(index: String, select?: boolean): Node",
            "documentation": [
                "초기에 각 노드에 설정된 index를 기반으로 노드 반환한다. 두번째 인자가 true인 경우 해당 노드를 선택한다.index는 1부터 시작하며 로딩 후 노드의 순서가 변경되도 초기에 설정된 index로 접근해야 한다.",
                "*@param* `index` &mdash; 초기 로딩 시 할당 된 노드의 index",
                "*@param* `select` &mdash; [default:true, false]노드를 선택 할지의 여부",
                "*@return*  \n검색된 Node"
            ]
        },
        {
            "label": "findNodeByValue(value: String, select?: boolean): Node",
            "documentation": [
                "value를 기반으로 노드를 찾아서 해당 노드를 반환한다. 두번째 인자가 true인 경우 해당 노드를 선택한다.반환 된 노드는 appendData, appendNode등의 API의 파라메터로 사용할 수 있다.",
                "*@param* `value` &mdash; 찾을 node의 value",
                "*@param* `select` &mdash; [default:true, false]노드를 선택 할지의 여부",
                "*@return*  \n검색된 Node"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getCheckedIndexes(options: JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy ): Array",
            "documentation": [
                "checkbox가 체크된 노드들의 index(초기 로딩시 설정)를 배열에 담아 반환한다.로딩 후 노드의 순서가 변경되면 index가 화면에 보여지는 순서와 다르게 반환될 수 있다.",
                "*@param* `options` &mdash; hierarchy를 포함한 JSON",
                "*@return*  \n체크된 노드들의 index가 담긴 배열"
            ]
        },
        {
            "label": "getCheckedLabels(options: JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy ): Array",
            "documentation": [
                "checkbox가 체크된 노드들의 label을 배열에 담아 반환한다.",
                "*@param* `options` &mdash; hierarchy를 포함한 JSON",
                "*@return*  \n체크된 노드들의 label가 담긴 배열"
            ]
        },
        {
            "label": "getCheckedNodes(options: JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy ): Array",
            "documentation": [
                "checkbox가 체크된 노드들을 배열에 담아 반환한다.로딩 후 노드의 순서가 변경되면 index가 화면에 보여지는 순서와 다르게 반환될 수 있다.",
                "*@param* `options` &mdash; hierarchy를 포함한 JSON",
                "*@return*  \n체크된 노드들이 담긴 배열"
            ]
        },
        {
            "label": "getCheckedValues(options: JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy ): Array",
            "documentation": [
                "checkbox가 체크된 노드들의 value를 배열에 담아 반환한다.",
                "*@param* `options` &mdash; hierarchy를 포함한 JSON",
                "*@return*  \n체크된 노드들의 value가 담긴 배열"
            ]
        },
        {
            "label": "getChildData(value: String): Object",
            "documentation": [
                "value에 해당하는 node의 자식의 data(model에 존재하는)를 반환합니다.",
                "*@param* `value` &mdash; 자식의 data를 반환할 node의 value",
                "*@return*  \n자식의 data를 가지고 있는 배열"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getParentValue(value: String): String",
            "documentation": [
                "노드의 value를 기반으로 부모 노드를 찾아 value를 반환한다.value로 검색 된 노드가 최상위 노드이거나 검색된 노드가 없을 경우 빈값(emptyString)을 반환한다.",
                "*@param* `value` &mdash; 노드의 value",
                "*@return*  \n부모 노드의 vlaue"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedIndex(): String",
            "documentation": [
                "선택된 노드의 index(초기 로딩시 설정 된 값)를 반환한다.로딩 후 노드의 순서가 변경되면 보여지는 노드의 순서와 index가 다를 수 있다.",
                "*@return*  \n선택된 노드의 index(초기 로딩시 설정 된 값)"
            ]
        },
        {
            "label": "getSelectedLabel(): String",
            "documentation": [
                "선택된 노드의 label을 반환한다.선택된 노드가 없는 경우 빈값(emptyString)을 반환한다.",
                "*@return*  \n선택된 노드의 label"
            ]
        },
        {
            "label": "getSelectedNode(): Object",
            "documentation": [
                "선택된 노드객체를 반환한다.반환된 노드는 appendNode, appendData등의 API에 파라메터로 사용가능하며 노드에 담긴 값을 통해 자식노드, 부모노드 등의 정보를 참조할 수 있다.",
                "*@return*  \n선택된 노드 - 주요 정보만 명시됨\n"
            ]
        },
        {
            "label": "getSelectedValue(): String",
            "documentation": [
                "선택된 노드의 value를 반환한다.선택된 노드가 없는 경우 빈값(emptyString)을 반환한다.",
                "*@return*  \n선택된 노드의 value"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getXPathByValue(value: String): String",
            "documentation": [
                "value에 해당하는 노드의 XPath를 반환한다.본 기능은 데이터를 InstanceData로 연동하거나 XML로 데이터를 제어할 때 사용한다.DataList와 연동된 경우 DataList의 baseNode와 repeatNode속성값을 참조하여 XPath를 반환한다.",
                "*@param* `value` &mdash; 노드의 value",
                "*@return*  \nXpath"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "isLeaf(): boolean",
            "documentation": [
                "선택된 노드가 leaf인지(자식노드가 없는지)의 여부를 반환한다.",
                "*@return*  \n[true,false]leaf인지의 여부"
            ]
        },
        {
            "label": "isOpen(index: String): Node",
            "documentation": [
                "초기에 각 노드에 설정된 index를 기반으로 해당 index에 상응하는 노드가 열려있는지 닫혀있는지 여부를 반환한다.자식 노드들이 보여져 있는 상태면 true를, 자식 노드들이 숨겨져 있는 상태면 false를 각각 리턴한다. 자식이 없는 노드의 경우 false를 리턴한다.",
                "*@param* `index` &mdash; 초기 로딩 시 할당 된 노드의 index",
                "*@return*  \nindex에 해당하는 Node의 open 여부"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "removeNode(node: Object)",
            "documentation": [
                "노드 객체를 기반으로 노드(자식노드 포함)를 삭제한다.",
                "*@param* `node` &mdash; 노드 객체"
            ]
        },
        {
            "label": "removeNodeList(nodeList: Array)",
            "documentation": [
                "노드 객체를 기반으로 다건의 노드(자식노드 포함)를 삭제한다. 삭제 후 컴포넌트를 다시 그리며 removeNode함수를 여러 번 호출하는 것보다 처리속도가 빠른다.",
                "*@param* `nodeList` &mdash; 노드가 담긴 1차원 배열"
            ]
        },
        {
            "label": "setCustomFormatter(userFunction: Function)",
            "documentation": [
                "사용자가 지정한 함수를 treeview의 node를 돌면서 각각 한번씩 호출합니다.",
                "*@param* `userFunction` &mdash; 초기에 세팅된 label값, formattedLabel, node를 각각 인자로 받아 formattedLabel 반환하는 사용자 함수"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLabelByIndex(index: Number, label: String)",
            "documentation": [
                "노드의 index를 기반으로 label을 변경한다.index값은 초기 로딩 시 설정 된 노드의 index로 1부터 시작한다.",
                "*@param* `index` &mdash; 노드의 index",
                "*@param* `label` &mdash; 새로 설정할 label의 값"
            ]
        },
        {
            "label": "setLabelByValue(value: String, label: String)",
            "documentation": [
                "노드의 value를 기반으로 label을 변경한다.",
                "*@param* `value` &mdash; 노드의 value",
                "*@param* `label` &mdash; 새로 설정할 label의 값"
            ]
        },
        {
            "label": "setLabelStyle(index: Number||String, styleName: String, styleValue: String, applyChildNodes?: Boolean)",
            "documentation": [
                "해당 node의 label style(node의 글자색, 글자크기, 글꼴 등)을 변경합니다.",
                "*@param* `index` &mdash; 노드의 index 또는 value",
                "*@param* `styleName` &mdash; style의 속성명",
                "*@param* `styleValue` &mdash; style 속성값",
                "*@param* `applyChildNodes` &mdash; [default:false, true]하위노드 적용 여부"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "spanAll(openCloseFlag: boolean)",
            "documentation": [
                "openCloseFlag에 따라서 모든 자식 노드를 span시켜 준다.",
                "*@param* `openCloseFlag` &mdash; 자식 노드를 접을지 확장할 지의 여부"
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "checkbox": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addItem(value: String, label: String, index?: Number): Number",
            "documentation": [
                "항목을 추가하는 기능으로 index를 주지 않으면 하위로 추가된다.",
                "*@param* `value` &mdash; 항목의 value",
                "*@param* `label` &mdash; 항목의 label",
                "*@param* `index` &mdash; 항목의 추가될 index",
                "*@return*  \n추가 된 항목의 index"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "checkAll(checkFlag: Bollean)",
            "documentation": [
                "모든 항목을 선택하거나 해제 시킨다.",
                "*@param* `checkFlag` &mdash; true일 경우 전체 선택, false일 경우 전체 해제."
            ]
        },
        {
            "label": "click(index: Number)",
            "documentation": [
                "index에 해당하는 항목을 click 한 것과 같은 효과를 내어 해당 항목이 선택/해제된다.또한 onviewchange등의 이벤트도 발생된다.",
                "*@param* `index` &mdash; click 이벤트를 발생시킬 항목의 index"
            ]
        },
        {
            "label": "deleteItem(index?: Number): JSON",
            "documentation": [
                "index에 해당하는 항목을 삭제한다.",
                "*@param* `index` &mdash; 삭제할 항목의 index",
                "*@return*  \n삭제된 항목의 정보가 담긴 JSON\n label : 항목의 label\n value : 항목의 value"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getItemCount(): Number",
            "documentation": [
                "항목 수를 반환한다.",
                "*@return*  \n항목 수"
            ]
        },
        {
            "label": "getItemDisabled(index: Number): Boolean",
            "documentation": [
                "index에 해당하는 항목의 활성화(disabled) 여부를 반환한다.",
                "*@param* `index` &mdash; 항목의 index",
                "*@return*  \n해당 항목의 비활성화 여부"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getSelectedIndex(separator?: String): String",
            "documentation": [
                "선택 된 항목들의 index를 반환하는 기능으로 항목이 여러 개인 경우 separator를 구분자로 하여 반환한다.separator를 설정하지 않은 경우 공백(space)이 구분자로 사용된다.",
                "*@param* `separator` &mdash; 항목간 구분자",
                "*@return*  \n선택 된 항목의 index가 담긴 문자열."
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getText(separator?: String): String",
            "documentation": [
                "선택 된 항목들의 label을 반환하는 기능으로 항목이 여러 개인 경우 separator를 구분자로 하여 반환한다.separator를 설정하지 않은 경우 공백(space)이 구분자로 사용된다.",
                "*@param* `separator` &mdash; 항목 구분자",
                "*@return*  \n선택 된 항목들의 label이 담긴 문자열"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(separator?: String): String",
            "documentation": [
                "선택 된 항목들의 value를 반환하는 기능으로 항목이 여러 개인 경우 separator를 구분자로 하여 반환한다.separator를 설정하지 않은 경우 공백(space)이 구분자로 사용된다.",
                "*@param* `separator` &mdash; 항목 구분자",
                "*@return*  \n컴포넌트의 선택된 항목들들의 value가 담긴 문자열"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeAll()",
            "documentation": [
                "모든 항목을 삭제한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "reset()",
            "documentation": [
                "모든 항목의 체크를 해제한다."
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setItemDisabled(index: Number, falg: Boolean)",
            "documentation": [
                "index에 해당하는 항목을 비활성화시키거나 활성화 시킨다.",
                "*@param* `index` &mdash; 항목의 index",
                "*@param* `falg` &mdash; 비활성화 여부"
            ]
        },
        {
            "label": "setNodeSet(nodeset: String, label?: String, value?: String)",
            "documentation": [
                "항목의 itemset 설정을 변경하는 기능으로 DataList와 연동 할 경우 nodeset 파라메터에 \"data:\" prefix를 꼭 붙여야한다.",
                "*@param* `nodeset` &mdash; DataList의 ID로 \"data:\"이라는 prefix를 붙여야한다. ( 또는 InstanceData의 XPath )",
                "*@param* `label` &mdash; label에 설정 될 column의 id로 값을 할당하지 않으면 기존에 설정된 값이 그대로 적용된다. ( 또는 label에 설정 할 nodeset 하위의 XPath )",
                "*@param* `value` &mdash; value에 설정 될 column의 id로 값을 할당하지 않으면 기존에 설정된 값이 그대로 적용된다. ( 또는 value에 설정 할 nodeset 하위의 XPath )"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
                "*@param* `ref` &mdash; 적용 할 ref의 경로"
            ]
        },
        {
            "label": "setSelectedIndex(index: Number)",
            "documentation": [
                "index에 해당하는 항목을 check/uncheck(toggle)한다.",
                "*@param* `index` &mdash; 항목의 index"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "파라메터로 넘어온 value가 항목에 있는 경우 해당 항목이 선택되며 해당값으로 value가 할당된다.다건을 한번에 설정 할 경우 공백(space)를 이용하여 설정하며 value에 해당하는 항목이 없는 경우 아무 동작이 일어나지 않는다.",
                "*@param* `value` &mdash; 선택하려는 항목의 value 문자열"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate(): Boolean",
            "documentation": [
                "컴포넌트의 정의 된 유효성에 관련 속성값을 통해 유효성 검사를 실행한다.유효성 관련 속성 : mandatory",
                "*@return*  \n유효성 검사 결과 값"
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "checkcombobox": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addItem(value: String, label: String, idx?: Number): Number",
            "documentation": [
                "항목을 추가하는 기능으로 index를 주지 않으면 하위로 append된다.주의 사항으로는 allOption 속성을 사용 할 경우 해당 item도 index에 포함되며 chooseOption속성은 index에 포함되지 않음.",
                "*@param* `value` &mdash; 항목의 value",
                "*@param* `label` &mdash; 항목의 label",
                "*@param* `idx` &mdash; 항목이 추가 될 index",
                "*@return*  \n추가 된 항목의 index"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "checkAll(checked: Boolean)",
            "documentation": [
                "모든 항목을 선택하거나 해제 시킨다.",
                "*@param* `checked` &mdash; 선택/선택해제 값 (true/false)"
            ]
        },
        {
            "label": "deleteItem(idx?: Number): JSON",
            "documentation": [
                "index에 해당하는 항목을 삭제하며 allOption속성이 true로 설정 된 경우 항목의 index에 포함된다.",
                "*@param* `idx` &mdash; 삭제 할 항목의 index",
                "*@return*  \n삭제된 항목의 정보가 담긴 JSON\n"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getInfo(index: Integer): JSON",
            "documentation": [
                "index에 해당하는 항목의 정보가 담긴 JSON을 반환한다",
                "*@param* `index` &mdash; 조회 대상 index",
                "*@return*  \n항목의 세부 정보가 담긴 JSON\n"
            ]
        },
        {
            "label": "getInfoArray(): Array",
            "documentation": [
                "모든 항목들의 각각의 정보가 담긴 JSON을 Array에 담아 반환한다.",
                "*@return*  \n모든 항목들의 정보(JSON)가 담긴 array\n"
            ]
        },
        {
            "label": "getItemCount(): Number",
            "documentation": [
                "항목 수를 반환한다.",
                "*@return*  \n항목 수"
            ]
        },
        {
            "label": "getItemDisabled(index: Number): Boolean",
            "documentation": [
                "index에 해당하는 항목의 활성화(disabled) 여부를 반환한다.",
                "*@param* `index` &mdash; 항목의 index",
                "*@return*  \n해당 항목의 비활성화 여부"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedInfo(): Array",
            "documentation": [
                "선택 된 항목들의 정보가 담긴 JSON을 Array에 담아 반환한다.",
                "*@return*  \n선택 된 항목들의 정보(JSON)가 담긴 array"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getText(separator?: String): String",
            "documentation": [
                "선택 된 항목들의 label을 반환하는 기능으로 항목이 여러 개인 경우 separator속성에 정의 된 값을 구분자로 하여 반환한다.파라메터로 separator를 넘겨 준 경우 해당 값이 구분자로 설정이 되어 반환되며 어떤 separator도 정의 하지 않은 경우에는 공백(space)이 구분자로 사용된다.",
                "*@param* `separator` &mdash; 항목 구분자",
                "*@return*  \n선택 된 항목들의 label이 담긴 문자열"
            ]
        },
        {
            "label": "getTextArray(): Array",
            "documentation": [
                "선택 된 항목들의 label을 Array에 담아 반환한다.",
                "*@return*  \n선택 된 항목들의 label이 담긴 Array"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(separator?: String): String",
            "documentation": [
                "선택 된 항목들의 value를 반환하는 기능으로 항목이 여러 개인 경우 separator속성에 정의 된 값을 구분자로 하여 반환한다.파라메터로 separator를 넘겨 준 경우 해당 값이 구분자로 설정이 되어 반환되며 어떤 separator도 정의 하지 않은 경우에는 공백(space)이 구분자로 사용된다.",
                "*@param* `separator` &mdash; 항목 구분자",
                "*@return*  \n선택된 항목들의 value"
            ]
        },
        {
            "label": "getValueArray(): Array",
            "documentation": [
                "선택 된 항목들의 value를 담은 Array를 반환한다.",
                "*@return*  \n선택 된 항목들의 value가 담긴 Array"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨깁니다."
            ]
        },
        {
            "label": "removeAll(isInitialize?: Boolean)",
            "documentation": [
                "[default:false, true] 모든 항목을 삭제하는 기능으로 allOption이 정의 된 경우 isInitialize값을 true로 적용하면 해당 항목은 삭제되지 않는다.",
                "*@param* `isInitialize` &mdash; allOption 항목 삭제 유무"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setItemDisabled(idx: Number, value: Boolean)",
            "documentation": [
                "해당 인덱스의 항목을 비활성화시키거나 활성화 시킵니다.",
                "*@param* `idx` &mdash; 비활성화 시키려는 항목의 인덱스",
                "*@param* `value` &mdash; 활성화 여부"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
                "*@param* `ref` &mdash; 적용 할 ref의 경로"
            ]
        },
        {
            "label": "setSelectedInfo(infoArray: Array)",
            "documentation": [
                "항목의 선택여부가 담긴 정보(JSON)를 기반으로 항목을 선택/해지한다.",
                "*@param* `infoArray` &mdash; 선택/해지하려는 각 항목의 정보가 담긴 JOSN을 담고 있는 Array"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setText(label: String)",
            "documentation": [
                "파라메터로 넘어온 label이 항목에 있는 경우 해당 항목이 선택되며 separator속성에 정의 한 구분자로 label간의 구분자를 넣어야 한다.separator속성을 미지정 한 경우 공백(space)를 통해 항목을 구분한다.",
                "*@param* `label` &mdash; 선택하고자 하는 항목들의 label 문자열"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "파라메터로 넘어온 value가 항목에 있는 경우 해당 항목이 선택되며 해당값으로 value가 할당된다.다건을 한번에 설정 할 경우 separator속성에 정의 한 구분자로 value간의 구분자를 넣어야 한다.separator속성이 정의 되지 않은 경우 공백(space)을 통해 value를 구분한다.",
                "*@param* `value` &mdash; 선택하려는 항목의 value"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "dataList": [
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "dataList의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 동적으로 할당할 이벤트의 이름",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 함수"
            ]
        },
        {
            "label": "clearSort()",
            "documentation": [
                "Data의 정렬을 취소하며 GridView 컴포넌트의 정렬도 함께 취소된다."
            ]
        },
        {
            "label": "deleteRow(rowIndex: Number)",
            "documentation": [
                "rowInex에 해당하는 행이 삭제되지 않으며 상태 값만 삭제(D)로 변경된다.",
                "*@param* `rowIndex` &mdash; 삭제상태로 변경 할 행의 index"
            ]
        },
        {
            "label": "getAllArray(): JSON",
            "documentation": [
                "DataList의 전체 data를 column의 정보와 1차원 배열로 변환 된 실 Data를 JSON에 담아 반환한다.",
                "*@return*   \ncolumn 정보와 data가 담긴 JSON"
            ]
        },
        {
            "label": "getAllData(): Array",
            "documentation": [
                "DataList의 전체 data를 1차원 배열로 반환한다.",
                "*@return*   \ndata가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getAllJSON(): Array",
            "documentation": [
                "DataList의 1row의 값을 JSON으로 변환하여 전체 data를 1차원 배열에 담아 반환한다.",
                "*@return*   \nJSON이 담긴 1차원 배열"
            ]
        },
        {
            "label": "getAllXML(): XML",
            "documentation": [
                "DataList의 전체 data를 XML로 반환한다.",
                "*@return*   \n전체 data가 담긴 XML"
            ]
        },
        {
            "label": "getCellData(rowIndex: Number , colInfo: Number||String): String ",
            "documentation": [
                "rowIndex와 colInfo( 컬럼의 index 또는 ID )에 해당하는 셀의 데이터를 반환한다.",
                "*@param* `rowIndex` &mdash; 셀의 행 index",
                "*@param* `colInfo` &mdash; 셀의 컬럼 index 혹은 컬럼의 ID",
                "*@return*   \n셀의 데이터"
            ]
        },
        {
            "label": "getColData(colInfo: Number||String): Array",
            "documentation": [
                "컬럼의 index 또는 ID에 해당하는 열의 데이터(filter나 sort가 적용 되지 않은)를 배열로 반환한다.",
                "*@param* `colInfo` &mdash; 데이터를 가져올 열 index 혹은 컬럼 ID",
                "*@return*   \n열의 데이터가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getColumnDistinctDataArray(colInfo: Number||String): Array",
            "documentation": [
                "컬럼의 index 또는 ID에 해당하는 컬럼의 데이터를 중복 데이터를 제거하여 오름차순으로 정렬 된 data를 배열로 반환한다.",
                "*@param* `colInfo` &mdash; index 또는 ID",
                "*@return*   \n중복된 데이터를 제거한 컬럼 데이터"
            ]
        },
        {
            "label": "getColumnID(colIndex: Number): String",
            "documentation": [
                "DataList에 정의 된 컬럼의 index를 받아 컬럼의 ID를 반환한다.",
                "*@param* `colIndex` &mdash; DataList에 정의 된 컬럼 index",
                "*@return*   \n컬럼의 ID"
            ]
        },
        {
            "label": "getColumnIndex(colID: String): Number",
            "documentation": [
                "DataList에 정의 된 컬럼의 ID를 받아 컬럼의 index를 반환한다.",
                "*@param* `colID` &mdash; 그리드 컬럼 id",
                "*@return*   \n그리드 컬럼의 index"
            ]
        },
        {
            "label": "getColumnInfo(columnID: String): JSON",
            "documentation": [
                "dataList 특정 column의 세부 정보를 조회한다.",
                "*@param* `columnID` &mdash; 조회하고자 하는 column의 id",
                "*@return*   \n해당 컬럼의 attribute를 표현한 json객체"
            ]
        },
        {
            "label": "getColumnName(columnInfo: String||Number): String",
            "documentation": [
                "DataList에 정의 된 컬럼의 index 또는 ID 를 받아 컬럼에 정의 된 name을 반환한다.",
                "*@param* `columnInfo ` &mdash; 컬럼의 ID 또는 index",
                "*@return*   \n컬럼의 name"
            ]
        },
        {
            "label": "getDataRow(rowIndex: Number): Object",
            "documentation": [
                "rowIndex에 해당하는 행의 데이터를 컬럼의 ID를 key로 하는 Hash형태로 반환한다.",
                "*@param* `rowIndex ` &mdash; 데이터를 가져올 행 index",
                "*@return*   \nrowIndex에 해당하는 행의 Hash형태의 객체"
            ]
        },
        {
            "label": "getDeletedArray(): JSON",
            "documentation": [
                "삭제 상태(상태값:D,E,V)인 행들의 정보가 담긴 JSON.",
                "*@return*   \n삭제 상태인 행들의 정보가 담긴 JSON"
            ]
        },
        {
            "label": "getDeletedData(): Array",
            "documentation": [
                "삭제 상태(상태값:D,E,V)인 행들의 데이터가 담긴 2차원 배열.",
                "*@return*   \n삭제 상태인 행들의 2차원 데이터 배열"
            ]
        },
        {
            "label": "getDeletedIndex(): Array",
            "documentation": [
                "삭제 상태(D,V,3,4)인 행의 index를 배열로 반환한다. (remove API로 삭제 된 E상태의 행은 반환되지 않는다)",
                "*@return*   \n삭제 상태(D,V,3,4)인 행의 index가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getDeletedJSON(): Array",
            "documentation": [
                "삭제 상태(상태값:D,E,V)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다.",
                "*@return*   \n삭제 상태인 행들의 JSON 데이터가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getDeletedXML(): XML",
            "documentation": [
                "삭제 상태(상태값:D,E,V)인 행들의 데이터를 XML로 반환한다.",
                "*@return*   \n삭제 상태인 행들의 XML"
            ]
        },
        {
            "label": "getFusionChartData(chartType: String, labelNode: String, seriesColumns: String): JSON",
            "documentation": [
                "dataList를 fusionChart의 json데이터로 반환한다.",
                "*@param* `chartType` &mdash; fusionChart의 차트타입",
                "*@param* `labelNode` &mdash; fusionChart의 lable 데이터로 사용할 DataCollection의 column의 ID값",
                "*@param* `seriesColumns` &mdash; fusionChart의 series 데이터로 사용할 DataCollection column 정보로 배열형식의 문자열",
                "*@return*   \n변환된 fusionChart data(json)"
            ]
        },
        {
            "label": "getFusionChartSimpleData(chartType: String, labelNode: String, seriesNode: String, valueNode: String): JSON",
            "documentation": [
                "DataList의 데이터를 fusionChart의 simple모드인 singleSerise, multiSeries 차트의 JSON데이터로 반환한다.",
                "*@param* `chartType` &mdash; fusionChart의 차트유형",
                "*@param* `labelNode` &mdash; fusionChart의 lable 데이터로 사용할 DataList column의 ID값",
                "*@param* `seriesNode` &mdash; fusionChart의 series 데이터로 사용할 DataList column의 ID값",
                "*@param* `valueNode` &mdash; fusionChart의 value 데이터로 사용할 DataList column의 ID값",
                "*@return*   \n변환된 fusionChart data(json)"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "dataList 객체의 id를 반환한다. 객체의 id 속성과 동일한 값을 반환한다.",
                "*@return*   \ndataList 객체의 id를 반환한다"
            ]
        },
        {
            "label": "getInfo(): JSON",
            "documentation": [
                "dataList의 세부 정보를 조회한다.",
                "*@return*   \n{dataListInfo : dataList의 attribute값, columnInfo : 각 colummn의 attribute들을 모아둔 object} 형태의 json객체"
            ]
        },
        {
            "label": "getInsertedArray(): JSON",
            "documentation": [
                "삽입 상태(상태값:C)인 행들의 정보가 담긴 JSON.",
                "*@return*   \n삽입 상태인 행들의 정보가 담긴 JSON"
            ]
        },
        {
            "label": "getInsertedData(): Array",
            "documentation": [
                "삽입 상태(상태값:C)인 행들의 데이터가 담긴 2차원 배열.",
                "*@return*   \n삽입 상태인 행들의 2차원 데이터 배열"
            ]
        },
        {
            "label": "getInsertedIndex(): Array",
            "documentation": [
                "삽입 상태(상태값:C)인 행의 index를 배열에 담아 반환한다.",
                "*@return*   \n삽입 상태인 행 index가 담긴 배열"
            ]
        },
        {
            "label": "getInsertedJSON(): Array",
            "documentation": [
                "삽입 상태(상태값:C)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다.",
                "*@return*   \n삽입 상태인 행들의 JSON 데이터가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getInsertedXML(): XML",
            "documentation": [
                "삽입 상태(상태값:C)인 행들의 데이터를 XML로 반환한다.",
                "*@return*   \n삽입 상태인 행들의 XML"
            ]
        },
        {
            "label": "getMatchedArray(colInfo: Number||String, dataValue: String, exactMatch?: Boolean, stRowIndex?: Number, lastRowIndex?: Number): JSON",
            "documentation": [
                "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colInfo에 해당하는 값이 dataValue와 같은 행들의 컬럼 정보 및 data를 담은 JSON을 반환한다.",
                "*@param* `colInfo` &mdash; 데이터를 검사할 컬럼 index 혹은 컬럼 ID",
                "*@param* `dataValue` &mdash; colInfo 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n범위안의 data를 정보를 가진 JSON"
            ]
        },
        {
            "label": "getMatchedColumnData(matchCol: Number||String, dataValue: String, targetCol: Number||String, exactMatch?: Booleanm, stRowIndex?: Number, lastRowIndex?: Number): Array",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 matchCol에 해당하는 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 값을 1차원 배열로 반환한다.",
                "*@param* `matchCol` &mdash; 데이터를 검색 할 컬럼 index 또는 컬럼 ID",
                "*@param* `dataValue` &mdash; colInfo 해당하는 열의 값과 비교할 data",
                "*@param* `targetCol` &mdash; 꺼내올 데이터의 컬럼 index 또는 컬럼 ID",
                "*@param* `exactMatch` &mdash; [default:true, false] 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \ntargetCol에 해당하는 data가 담긴 1찬원 배열"
            ]
        },
        {
            "label": "getMatchedData(colInfo: Number||String, dataValue: String, exactMatch?: Boolean, stRowIndex?: Number, lastRowIndex?: Number): Array",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colInfo의 값이 dataValue와 같은 행들의 data를 2차원 배열로 반환한다.",
                "*@param* `colInfo` &mdash; 데이터를 검사할 컬럼 index 혹은 컬럼 ID",
                "*@param* `dataValue` &mdash; colInfo 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n검색 된 row의 배열 데이터가 담긴 배열.(2차원 배열)"
            ]
        },
        {
            "label": "getMatchedIndex(colInfo: Number||String, dataValue: String, exactMatch?: Boolean, stRowIndex?: Number, lastRowIndex?: Number): Array",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 conInfo의 값이 dataValue와 같은 행들의 index를 반환한다.",
                "*@param* `colInfo` &mdash; 데이터를 검사할 컬럼 index 혹은 컬럼 ID",
                "*@param* `dataValue` &mdash; colInfo 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n범위안에 일치하는 index를 담은 1차원 배열"
            ]
        },
        {
            "label": "getMatchedJSON(colInfo: Number||String, dataValue: String, exactMatch?: Boolean, stRowIndex?: Number, lastRowIndex?: Number): Array",
            "documentation": [
                "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colInfo의 값이 dataValue와 같은 행들의 JSON 데이터를 배열에 담아 반환한다.",
                "*@param* `colInfo` &mdash; 데이터를 검색할 열 index 또는 id",
                "*@param* `dataValue` &mdash; colInfo 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 시작 행의 index",
                "*@param* `lastRowIndex` &mdash; 끝 행의 index",
                "*@return*   \n범위안에 일치하는 index를 담은 1차원 배열"
            ]
        },
        {
            "label": "getMatchedXML(colInfo: Number||String, dataValue: String, exactMatch?: Boolean, stRowIndex?: Number, lastRowIndex?: Number): XML",
            "documentation": [
                "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colInfo의 값이 dataValue와 같은 행들의 data를 XML로 반환한다.",
                "*@param* `colInfo` &mdash; 데이터를 검사할 컬럼 index 혹은 컬럼 ID",
                "*@param* `dataValue` &mdash; colInfo 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n범위안의 XML 데이터"
            ]
        },
        {
            "label": "getModifiedArray(): JSON",
            "documentation": [
                "변경 상태(상태값:C,U,D,E)행들의 정보가 담긴 JSON.",
                "*@return*   \n변경 상태 행들의 정보가 담긴 JSON"
            ]
        },
        {
            "label": "getModifiedData(): Array",
            "documentation": [
                "변경 상태(상태값:C,U,D,E)행들의 데이터를 배열로 반환한다.",
                "*@return*   \n변경 상태 행들의 데이터가 담긴 2차원 배열"
            ]
        },
        {
            "label": "getModifiedIndex(): Array",
            "documentation": [
                "변경 상태(상태값:C,U,D)행들의 index를 배열로 반환한다.",
                "*@return*   \n변경 상태 행들의 index가 담긴 1차원배열"
            ]
        },
        {
            "label": "getModifiedJSON(option?: JSON): Array",
            "documentation": [
                "데이터가 삽입, 갱신, 삭제, 제거 된 상태(U,C,D,E,1,2,3,5)의 행들의 데이터를 JSON으로 변환하여 1차원 배열에 담아 반환한다.",
                "*@param* `option` &mdash; 데이터 변경(삽입, 갱신, 삭제, 제거) 행들의 데이터의 반환 순서를 설정한다.",
                "*@return*   \n삽입, 갱신, 삭제된 행들의 JSON 데이터가 담긴 1차원 Array"
            ]
        },
        {
            "label": "getModifiedXML(option?: JSON): XML",
            "documentation": [
                "데이터가 삽입, 갱신, 삭제, 제거 된 상태(U,C,D,E,1,2,3,5)의 행들의 데이터를 XML로 반환한다.",
                "*@param* `option` &mdash; 데이터 변경(삽입, 갱신, 삭제, 제거) 행들의 반환될 데이터를 설정한다.",
                "*@return*   \n삽입, 갱신, 삭제된 행들의 XML 데이터"
            ]
        },
        {
            "label": "getObjectType(): String",
            "documentation": [
                "dataCollection의 Type을 반환한다.",
                "*@return*   \n[dataMap, dataList, linkedDataList] dataCollection의 타입"
            ]
        },
        {
            "label": "getOnlyDeletedArray(): JSON",
            "documentation": [
                "삭제 상태(상태값:D,E)행들의 정보를 담은 JSON을 반환한다.",
                "*@return*   \n삭제 상태 행들의 정보를 담은 JSON"
            ]
        },
        {
            "label": "getOnlyDeletedData(): Array",
            "documentation": [
                "삭제 상태(상태값:D,E)행들의 배열 데이터를 배열에 담아 반환한다.(2차원 배열)",
                "*@return*   \n삭제 상태행들의 배열 데이터를 담은 배열"
            ]
        },
        {
            "label": "getOnlyDeletedIndex(): Array",
            "documentation": [
                "삭제 상태(상태값:D)행등의 index를 배열로 반환한다.",
                "*@return*   \n삭제 상태인 행들의 index를 담은 배열"
            ]
        },
        {
            "label": "getOnlyDeletedJSON(): Array",
            "documentation": [
                "삭제 상태(상태값:D,E)행들의 JSON 데이터를 배열에 담아 반환한다.",
                "*@return*   \n삭제 상태인 행들의 JSON 데이터를 담은 배열"
            ]
        },
        {
            "label": "getOnlyDeletedXML(): XML",
            "documentation": [
                "삭제 상태(상태값:D,E)행들의 데이터를 XML로 반환한다.",
                "*@return*   \n삭제 상태인 행들의 XML 데이터"
            ]
        },
        {
            "label": "getOption(attr: String): String",
            "documentation": [
                "속성명으로 dataList에 정의 된 속성의 값을 반환한다.",
                "*@param* `attr` &mdash; 속성명",
                "*@return*   \ndataList에 정의 된 속성의 값"
            ]
        },
        {
            "label": "getOriginalCellData(rowIndex: Number, colIndex: String||Number): String",
            "documentation": [
                "rowIndex와 colInfo에 해당하는 셀의 초기 데이터(최초에 설정된 데이터)를 반환한다.",
                "*@param* `rowIndex` &mdash; 셀의 초기 행 index",
                "*@param* `colIndex` &mdash; 컬럼의 ID 또는 컬럼의 index",
                "*@return*   \n셀의 초기 데이터"
            ]
        },
        {
            "label": "getRangeArray(fromIdx: Number, toIdx: Number): JSON",
            "documentation": [
                "fromIdx부터 toIdx 까지 범위의 행들의 컬럼 정보 및 data를 담은 JSON을 반환한다.",
                "*@param* `fromIdx` &mdash; 데이터를 가져오는 범위의 시작 행 index",
                "*@param* `toIdx` &mdash; 데이터를 가져오는 범위의 끝 행 index",
                "*@return*   \n범위안의 data를 정보를 가진 JSON"
            ]
        },
        {
            "label": "getRangeData(from: Number, to: Number): Array",
            "documentation": [
                "from부터 to 까지의 범위의 행의 data를 1차원 배열로 반환한다.",
                "*@param* `fromIdx` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `toIdx` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n범위안의 data를 가지고 있는 배열"
            ]
        },
        {
            "label": "getRangeJSON(from: Number, to: Number): Array",
            "documentation": [
                "from부터 to 까지의 범위의 행의 JSON data를 담은 1차원 배열.",
                "*@param* `from` &mdash; 데이터를 가져오는 범위의 시작 행 index",
                "*@param* `to` &mdash; 데이터를 가져오는 범위의 끝 행 index",
                "*@return*   \n범위에 해당하는 행의 JSON객체를 담은 배열"
            ]
        },
        {
            "label": "getRangeXML(from: Number, to: Number): XML",
            "documentation": [
                "from부터 to 까지의 범위의 행의 data를 XML로 반환한다.",
                "*@param* `from` &mdash; 데이터를 가져오는 범위의 시작 행 index",
                "*@param* `to` &mdash; 데이터를 가져오는 범위의 끝 행 index",
                "*@return*   \n범위에 해당하는 행의 XML 데이터"
            ]
        },
        {
            "label": "getRowArray(rowIndex: Number): JSON",
            "documentation": [
                "rowIndex에 해당하는 행들의 정보가 담긴 JSON을 반환한다.",
                "*@param* `rowIndex` &mdash; 데이터를 가져올 행의 index",
                "*@return*   \n행들의 정보가 담긴 JSON"
            ]
        },
        {
            "label": "getRowCount(): Number",
            "documentation": [
                "화면에 보여지는 row의 건수를 반환하며 필터가 걸려있거나 GridView에 drilldown이 적용되어 있는 경우 접혀져 있는 데이터의 행의 수는 포함되지 않는다.   \n전체 데이터의 row건수는 getTotalRow API를 사용한다.",
                "*@return*   \nrow의 건수"
            ]
        },
        {
            "label": "getRowData(rowIndex: Number): Array",
            "documentation": [
                "rowIndex에 해당하는 행의 데이터를 배열로 반환한다.",
                "*@param* `rowIndex` &mdash; 데이터를 가져올 행의 index",
                "*@return*   \nrowIndex에 해당하는 행의 데이터의 배열"
            ]
        },
        {
            "label": "getRowIndexByStatus(statusStr: String): Array",
            "documentation": [
                "상태값(코드)가 일치하는 행의 index를 배열로 반환한다.   \n단, 상태코드가 E인 경우는 반환되지 않는다.(removeRow와 같은 API를 호출 한 경우가 이에 해당된다.)   \n상태코드가 여러개의 경우 \"CU\"와 같이 상태코드를 붙여 파라메터로 넘기면 된다.",
                "*@param* `statusStr` &mdash; [C,U,D,V,R]상태코드 문자열로 대문자로 표현",
                "*@return*   \nstatusStr과 상태가 일치하는 행의 index가 담긴 배열"
            ]
        },
        {
            "label": "getRowJSON(rowIndex: Number): JSON",
            "documentation": [
                "rowIndex에 해당하는 행의 data를 JSON객체로 반환한다.",
                "*@param* `rowIndex` &mdash; 데이터를 가져올 행 index",
                "*@return*   \n해당 행의 JSON객체 데이터"
            ]
        },
        {
            "label": "getRowPosition(): Number",
            "documentation": [
                "바인딩된 DataList의 현재 행 위치(클릭한 항목의 인덱스)를 확인.",
                "*@return*   \nrowPosition 값"
            ]
        },
        {
            "label": "getRowStatus(rowIndex: Number): String",
            "documentation": [
                "rowIndex에 해당하는 행의 상태를 코드(문자)로 반환한다. (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")",
                "*@param* `rowIndex` &mdash; 행의 index",
                "*@return*   \n행의 상태코드 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")"
            ]
        },
        {
            "label": "getRowStatusValue(rowIndex: Number): Number",
            "documentation": [
                "rowIndex에 해당하는 행의 상태를 숫자로 반환한다. (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)",
                "*@param* `rowIndex` &mdash; 행의 index",
                "*@return*   \n행의 상태 숫자값 (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)"
            ]
        },
        {
            "label": "getRowXML(rowIndex: Number): XML",
            "documentation": [
                "rowIndex에 해당하는 행의 data를 XML로 반환한다.",
                "*@param* `rowIndex` &mdash; 행의 index",
                "*@return*   \n행의 XML 데이터"
            ]
        },
        {
            "label": "getTotalCol(): Number",
            "documentation": [
                "DataList에 정의 된 컬럼수를 반환한다.",
                "*@return*   \nDataList의 컬럼수"
            ]
        },
        {
            "label": "getTotalRow(): Number",
            "documentation": [
                "dataList의 전체 row수를 반환한다.   \n필터가 걸려 있거나, drilldown이 적용되어 접혀있는 row가 있더라도 모두 포함한 수를 반환한다.    \n필터 적용이 되어있는 row의 건수는 getRowCount API를 사용한다.",
                "*@return*   \n전체 row수"
            ]
        },
        {
            "label": "getUnmatchedArray(col: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number): JSON",
            "documentation": [
                "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex까지의 범위중에서 데이터가 dataValue와 다른 행들의 정보를 JSON으로 변환하여 반환한다.",
                "*@param* `col` &mdash; 컬럼 index 또는 id",
                "*@param* `dataValue` &mdash; 비교 data",
                "*@param* `exactMatch` &mdash; [true, false]정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 끝낼 행 index",
                "*@return*   \n범위안에 일치하는 index를 가지고 있는 JSONArray"
            ]
        },
        {
            "label": "getUnmatchedColumnData(matchCol: Number||String, dataValue: String, targetCol: Number||String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number): Array",
            "documentation": [
                "matchCol에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 컬럼의 데이터들를 배열로 반환한다.",
                "*@param* `matchCol` &mdash; 데이터를 검사할 컬럼 index 또는 id",
                "*@param* `dataValue` &mdash; matchCol에 해당하는 컬럼의 데이터와 비교할 문자열",
                "*@param* `targetCol` &mdash; 데이터를 가져올 컬럼 index 또는 id",
                "*@param* `exactMatch` &mdash; [true, false]정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \ntargetCol에 해당하는 컬럼의 데이터를 가지고 있는 1차원 배열"
            ]
        },
        {
            "label": "getUnmatchedData(col: Number||String, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number): Array",
            "documentation": [
                "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들의 data를 배열 변환하여 배열에 담아 반환한다.",
                "*@param* `col` &mdash; 데이터를 검사할 컬럼 index 또는 id",
                "*@param* `dataValue` &mdash; col에 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n범위안에 일치하는 배열 데이터를 가진 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getUnmatchedIndex(col: Number||String, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number): Array",
            "documentation": [
                "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들의 index를 배열로 반환한다.",
                "*@param* `col` &mdash; 데이터를 검사할 컬럼 index 또는 id",
                "*@param* `dataValue` &mdash; col에 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n범위안에 일치하는 index를 가지고 있는 배열"
            ]
        },
        {
            "label": "getUnmatchedJSON(col: Number||String, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number): Array",
            "documentation": [
                "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들의 data를 JSON으로 변환하여 배열에 담아 반환한다.",
                "*@param* `col` &mdash; 데이터를 검사할 컬럼 index 또는 id",
                "*@param* `dataValue` &mdash; col에 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n조건에 일치하는 row에 해당하는 JSON Data를 가지고 있는 1차원 배열"
            ]
        },
        {
            "label": "getUnmatchedXML(col: Number||String, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number): XML",
            "documentation": [
                "col에 해당하는 컬럼의 rowIndex가 stRowIndex부터 lastRowIndex 까지의 범위중에서 데이터가 dataValue와 다른 행들의 데이터를 XML로 반환한다.",
                "*@param* `col` &mdash; 데이터를 검사할 컬럼 index 또는 id",
                "*@param* `dataValue` &mdash; col에 해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 index",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 index",
                "*@return*   \n범위안에 일치하는 XML 데이터"
            ]
        },
        {
            "label": "getUpdatedArray(): JSON",
            "documentation": [
                "갱신 상태(1,U)인 행들의 데이터의 정보는 JSON으로 반환한다.   \n반환값의 columnInfo는 컬럼의 id가 담긴 배열을, data는 columnInfo에 명시된 컬럼의 순서대로 해당하는 데이터를 담은 배열이다.",
                "*@return*   \n갱신 상태인 행들의 정보가 담긴 JSON 데이터"
            ]
        },
        {
            "label": "getUpdatedData(): Array",
            "documentation": [
                "갱신 상태(1,U)인 행들의 배열 데이터를 배열에 담아 반환한다.",
                "*@return*   \n갱신 상태(1,U)인 행들의 배열 데이터 (2차원 배열)"
            ]
        },
        {
            "label": "getUpdatedIndex(): Array",
            "documentation": [
                "갱신 상태(1,U)인 행의 index를 배열로 반환한다.",
                "*@return*   \n갱신 상태(1,U)인 행의 index를 담은 배열"
            ]
        },
        {
            "label": "getUpdatedJSON(): Array",
            "documentation": [
                "갱신 상태(1,U)인 행들의 데이터를 JSON으로 변환하여 배열에 담아 반환한다.",
                "*@return*   \n갱신 상태(1,U)인 행들의 JSON 데이터가 담긴 배열"
            ]
        },
        {
            "label": "getUpdatedXML(): XML",
            "documentation": [
                "갱신 상태(1,U)인 행들의 데이터를 XML로 반환한다.",
                "*@return*   \n갱신 상태(1,U)인 행들의 XML 데이터"
            ]
        },
        {
            "label": "getVoidArray(): JSON",
            "documentation": [
                "삽입 후 삭제 상태(4,V)인 행들의 정보가 담긴 JSON을 반환한다.",
                "*@return*   \n삽입 후 삭제 상태(4,V)인 행들의 정보가 담긴 JSON"
            ]
        },
        {
            "label": "getVoidData(): Array",
            "documentation": [
                "삽입 후 삭제 상태(4,V)인 행들을 배열 데이터를 배열에 담에 반환한다.",
                "*@return*   \n삽입 후 삭제 상태인 행들의 배열 데이터가 담긴 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getVoidIndex(): Array",
            "documentation": [
                "삽입 후 삭제 상태(4,V)인 행의 index를 배열로 반환한다.",
                "*@return*   \n삽입 후 삭제 상태(4,V)인 행의 index를 담은 배열"
            ]
        },
        {
            "label": "getVoidJSON(): Array",
            "documentation": [
                "삽입 후 삭제 상태(4,V)인 행들의 JSON 데이터를 배열에 담아 반환한다.",
                "*@return*   \n삽입 후 삭제 상태(4,V)인 행들의 JSON 데이터가 담긴 배열"
            ]
        },
        {
            "label": "getVoidXML(): XML",
            "documentation": [
                "삽입후 삭제 상태(4,V)인 행들의 데이터를 XML로 반환한다.",
                "*@return*   \n삽입 후 삭제 상태(4,V)인 행들의 XML 데이터"
            ]
        },
        {
            "label": "insertData(rowIndex: Number, dataObj: Array)",
            "documentation": [
                "rowIndex에 다건의 row를 1차원 Array로 삽입한다. 삽입 후 DataList의 oninsertrow 이벤트가 발생된다.",
                "*@param* `rowIndex` &mdash; row의 index",
                "*@param* `dataObj` &mdash; 데이터를 담고 있는 1차원 Array"
            ]
        },
        {
            "label": "insertJSON(rowIndex: Number, dataObj: Array)",
            "documentation": [
                "rowIndex에 다건의 row를 JSON객체로 삽입한다. 삽입 후 DataList의 oninsertrow 이벤트가 발생된다.",
                "*@param* `rowIndex` &mdash; row의 index",
                "*@param* `dataObj` &mdash; row에 해당하는 JSON객체를 담고 있는 1차원 array"
            ]
        },
        {
            "label": "insertRow(rowIndex: Number)",
            "documentation": [
                "rowIndex에 1건의 row를 삽입한다. 삽입 된 후 DataList의 oninsertrow 이벤트가 발생한다.",
                "*@param* `rowIndex` &mdash; 삽입할 행의 index"
            ]
        },
        {
            "label": "insertXML(rowIndex: Number, dataObj: XML)",
            "documentation": [
                "rowIndex에 다건의 row를 XML 데이터로 삽입한다. 삽입 후 DataList의 oninsertrow 이벤트가 발생된다.",
                "*@param* `rowIndex` &mdash; row의 index",
                "*@param* `dataObj` &mdash; 데이터를 담고 있는 XML"
            ]
        },
        {
            "label": "modifyAllStatus(status: String)",
            "documentation": [
                "모든 행의 상태를 변경 한다.",
                "*@param* `status` &mdash; 변경할 상태값 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\"). status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음."
            ]
        },
        {
            "label": "modifyMatchedStatus(col: Number||String, dataValue: String, status: String)",
            "documentation": [
                "모든 행의 상태를 변경 한다.",
                "*@param* `col` &mdash; 검사할 컬럼의 index 또는 id",
                "*@param* `dataValue` &mdash; 비교값",
                "*@param* `status` &mdash; 변경할 상태값. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음."
            ]
        },
        {
            "label": "multisort(options: JSON)",
            "documentation": [
                "option에 따라서 여러개의 컬럼을 정렬한다.   \n컬럼의 dataType 속성을 기준으로 정렬되므로 숫자형태인 경우 dataType속성을 number로 정의해야한다.",
                "*@param* `options` &mdash; 정렬에 대한 옵션을 가지고 있는 JSON"
            ]
        },
        {
            "label": "reform()",
            "documentation": [
                "DataList의 originalData를 현재의 데이터로 바꿔주고 모든 행의 상태를 초기화(R)한다."
            ]
        },
        {
            "label": "removeAll(): Array",
            "documentation": [
                "DataList의 모든 데이터를 삭제하고 삭제 된 Data를 1차원 배열로 반환한다.",
                "*@return*   \n삭제한 행들의 데이터가 담긴 1차원 배열"
            ]
        },
        {
            "label": "removeColumnFilter(col: Number||String)",
            "documentation": [
                "col에 해당하는 컬럼에 적용된 filter를 삭제한다.   \n주의 - 여러 컬럼에 setColumnFilter를 사용한 경우, 해제되지 않는 filter의 operationType(AND, OR 조건)에 따른 결과를 유의하여야 한다.",
                "*@param* `col` &mdash; filter를 삭제할 컬럼의 index 또는 id"
            ]
        },
        {
            "label": "removeColumnFilterAll()",
            "documentation": [
                "모든 컬럼에 적용된 filter를 삭제한다."
            ]
        },
        {
            "label": "removeRange(startIdx: Number, endIdx: Number): Array",
            "documentation": [
                "startIdx와 endIdx사이의 행을 삭제하고 가지고 있던 data를 1차원 배열로 반환한다.",
                "*@param* `startIdx` &mdash; 데이터를 삭제할 범위의 시작 행",
                "*@param* `endIdx` &mdash; 데이터를 삭제할 범위의 끝 행",
                "*@return*   \n삭제된 범위 사이의 데이터 2차원 배열"
            ]
        },
        {
            "label": "removeRow(rowIndex: Number): Array",
            "documentation": [
                "rowIndex에 해당하는 행을 삭제하고 가지고 있던 data를 1차원 배열로 반환한다.",
                "*@param* `rowIndex` &mdash; 삭제할 행의 index",
                "*@return*   \n삭제한 행이 가지고 있던 data 배열"
            ]
        },
        {
            "label": "removeRows(rowIndexArr: Array): Array",
            "documentation": [
                "다건의 row를 index가 담긴 배열을 통해 한번에 삭제하고 가지고 있던 data를 2차원 배열로 반환한다.",
                "*@param* `rowIndexArr` &mdash; 삭제할 행들의 번호를 저장하는 배열",
                "*@return*   \n삭제한 행들이 가지고 있던 2차원 배열 data"
            ]
        },
        {
            "label": "rowMoveDown(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 row을 하나 아래로 내려준다.",
                "*@param* `rowIndex` &mdash; row의 index"
            ]
        },
        {
            "label": "rowMoveUp(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 row을 하나 위로 올려준다.",
                "*@param* `rowIndex` &mdash; row의 index"
            ]
        },
        {
            "label": "setArray(jsonData: JSON, append?: Boolean)",
            "documentation": [
                "1차원 배열의 데이터를 columnInfo의 컬럼 순서대로 DataList에 set한다.(행의 상태는 초기상태인 \"R\"로 변경된다.)",
                "*@param* `jsonData` &mdash; 컬럼 정보와 1차원 배열 데이터를 담고 있는 JSON",
                "*@param* `append` &mdash; [default:false, true]append 여부"
            ]
        },
        {
            "label": "setCellData(rowIndex: Number, colIndex: Number||String, data: String)",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀에 data를 셋팅한다.",
                "*@param* `rowIndex` &mdash; 행 index",
                "*@param* `colIndex` &mdash; 컬럼 index 또는 id",
                "*@param* `data` &mdash; 셀에 넣어줄 데이터"
            ]
        },
        {
            "label": "setColumnDefaultValue(colIndex: Number||String, defaultValue: String)",
            "documentation": [
                "colIndex에 해당하는 열의 기본값을 defaultValue로 설정한다.   \ninsertRow API 또는 초기 data를 set할 때 컬럼에 값이 할당되지 않을 때 dafaultValue의 값을 할당한다.",
                "*@param* `colIndex` &mdash; 열의 index 또는 id",
                "*@param* `defaultValue` &mdash; 열에 설정할 기본값"
            ]
        },
        {
            "label": "setColumnFilter(filterOptions: JSON)",
            "documentation": [
                "colIndex에 해당하는 컬럼에 filter를 적용한다.",
                "*@param* `filterOptions` &mdash; filter를 적용할 옵션"
            ]
        },
        {
            "label": "setData(arr: Array||String, append?: Boolean, columnArr?: Array||String)",
            "documentation": [
                "1차원 배열 데이터를 set 또는 append 한다. (행의 상태는 초기상태인 \"R\"로 변경된다. 데이터의 순서를 지정해주는 columnArr를 사용할 경우, append는 항상 넣어줘야한다.)",
                "*@param* `arr` &mdash; 1차원 배열 또는 배열 형태의 문자열(소스 안쪽에서 array로 변환)",
                "*@param* `append` &mdash; [default:false, true]append 여부",
                "*@param* `columnArr` &mdash; 데이터를 셋팅할 컬럼의 id가 담긴 배열 또는 배열 형태의 문자열(소스 안쪽에서 array로 변환)"
            ]
        },
        {
            "label": "setJSON(jsonData: Array, append?: Boolean)",
            "documentation": [
                "JSON Data를 set 또는 append 한다. (행의 상태는 초기상태인 \"R\"로 변경된다.)",
                "*@param* `jsonData` &mdash; JSON 데이터를 담고 있는 배열)",
                "*@param* `append` &mdash; [default:false, true]append 여부"
            ]
        },
        {
            "label": "setRowArray(rowIndex: Number, dataObj: JSON, overwrite?: Boolean)",
            "documentation": [
                "rowIndex에 해당하는 행에 1건(row)의 배열 데이터를 넣는다.   \noverwrite가 false인 경우에 행을 생성한다.",
                "*@param* `rowIndex` &mdash; rowData를 넣어줄 행 index",
                "*@param* `dataObj` &mdash; 행에 넣을 데이터의 정보를 가진 JSON",
                "*@param* `overwrite` &mdash; [default:false, true]덮어쓰기의 여부로 true인 경우 rowIndex에 해당하는 row에 덮어쓰고 false인 경우 rowIndex에 row가 insert된다."
            ]
        },
        {
            "label": "setRowData(rowIndex: Number, rowData: Array, overwrite?: Boolean)",
            "documentation": [
                "rowIndex에 해당하는 행에 1건(row)의 배역 데이터를 넣는다.   \noverwrite가 false인 경우에 행을 생성한다.",
                "*@param* `rowIndex` &mdash; rowData를 넣어줄 행 index",
                "*@param* `rowData` &mdash; DataList에 정의 된 컬럼의 순서대로 데이터가 담긴 1차원 배열",
                "*@param* `overwrite` &mdash; [default:false, true]덮어쓰기의 여부로 true인 경우 rowIndex에 해당하는 row에 덮어쓰고 false인 경우 rowIndex에 row가 insert된다."
            ]
        },
        {
            "label": "setRowJSON(rowIndex: Number, rowData: JSON, overwrite?: Boolean)",
            "documentation": [
                "rowIndex에 해당하는 행에 1건(row)의 JSON 데이터를 넣는다.   \noverwrite가 false인 경우에 행을 생성한다.",
                "*@param* `rowIndex` &mdash; rowData를 넣어줄 행 index",
                "*@param* `rowData` &mdash; 행에 넣을 JSON객체 데이터",
                "*@param* `overwrite` &mdash; [default:false, true]덮어쓰기의 여부로 true인 경우 rowIndex에 해당하는 row에 덮어쓰고 false인 경우 rowIndex에 row가 insert된다."
            ]
        },
        {
            "label": "setRowNumData(flag: Boolean)",
            "documentation": [
                "DataList의 get관련 API의 return 데이터의 type이 JSON, XML일 경우 row의 number값을 추가 할지 설정.   \n해당 값은 GridView의 rowNumVisible 속성을 true로 설정하면 나오는 값과 동일하며 \"rowNum\"이라는 컬럼(key)명에 할당된다.   \nData의 get관련 API 예시 - getAllJSON, getRowJSON, getAllXML, getRowXML 등",
                "*@param* `flag` &mdash; [true, flase]설정 여부"
            ]
        },
        {
            "label": "setRowPosition(position?: Number, noEvent?: Boolean)",
            "documentation": [
                "DataList가 GridView와 연결되지 않은 경우 선택 된(focused)row의 위치를 설정한다.   \nGridView와 연결 된 경우에는 본 API가 아닌 GridView의 setFocusedCell API를 사용해야 focus 동기화가 정상적으로 이루어진다.   \n본 API는 Input과 같은 단일 컴포넌트의 ref 속성을 이용하여 value와 DataList의 컬럼값이 연동이 되었을 경우만 사용한다.( gridView를 이용하여 focus 제어를 할 수 없는 경우 )",
                "*@param* `position` &mdash; 선택 할(focused)row index",
                "*@param* `noEvent` &mdash; onrowpositionchange이벤트를 설정해 줄것인지에 대한 여부"
            ]
        },
        {
            "label": "setRowXML(rowIndex: Number, XML: XML, overwrite?: Boolean)",
            "documentation": [
                "rowIndex에 해당하는 행에 1건(row)의 XML 데이터를 넣는다.   \noverwrite가 false인 경우에 행을 생성한다.",
                "*@param* `rowIndex` &mdash; rowData를 넣어줄 행 index",
                "*@param* `XML` &mdash; rowData 행에 넣을 XML 데이터",
                "*@param* `overwrite` &mdash; [default:false, true]덮어쓰기의 여부로 true인 경우 rowIndex에 해당하는 row에 덮어쓰고 false인 경우 rowIndex에 row가 insert된다."
            ]
        },
        {
            "label": "setXML(xmlData: XML, append?: Boolean)",
            "documentation": [
                "XML Data를 set 또는 append 한다. (행의 상태는 초기상태인 \"R\"로 변경된다.)",
                "*@param* `xmlData` &mdash; XML 데이터",
                "*@param* `append` &mdash; [default:false, true]append 여부"
            ]
        },
        {
            "label": "sort(bodyColumnID: String, sortType: Number)",
            "documentation": [
                "단건의 컬럼을 정렬한다. (다건의 경우 multisort API를 이용)   \n* 본 API는 dataType에 상관없이 text로 간주하여 정렬이 된다. (number 타입의 경우 multisort API를 이용)",
                "*@param* `bodyColumnID` &mdash; 컬럼의 id",
                "*@param* `sortType` &mdash; [0,1,2]정렬 옵션 0이면 오름차순 1이면 내림차순 2이면 정렬을 취소"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "dataList에 등록 된 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트명",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "dataList의 이벤트를 동적으로 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트의 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "undeleteRow(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 삭제 상태(D,V)를 취소하고 직전 상태값으로 변경한다.   \nremoveRow와 같은 API로 삭제(상태값이 E)한 row는 취소가 되지 않는다.",
                "*@param* `rowIndex` &mdash; 삭제를 취소할 행 index"
            ]
        },
        {
            "label": "undoAll()",
            "documentation": [
                "전체 데이터를 초기 설정 된 데이터(originalData)로 바꾸고 행의 상태를 초기화(R) 시킨다.   \n\"초기 설정 된 데이터\"란 setJSON, setXML 등과 같은 API들을 통해 설정 된 데이터가 이에 속한다."
            ]
        },
        {
            "label": "undoRow(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 row의 data와 상태값을 직전 data와 상태값으로 변경한다.",
                "*@param* `rowIndex` &mdash; data를 변경할 행의 index"
            ]
        }
    ],
    "dataMap": [
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "dataMap의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 동적으로 할당할 이벤트의 이름",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 함수"
            ]
        },
        {
            "label": "get(key: String): Object",
            "documentation": [
                "KeyInfo에 정의되어있는 Key ID에 할당 된 value를 반환한다. value의 초기값은 \"\"(empty string)이다.",
                "*@param* `key` &mdash; Key ID",
                "*@return*   \nKey ID에 할당 된 value. (return type은 일반적으로 String이 대부분이며 초기 셋팅 한 data의 type 형태로 반환된다.)"
            ]
        },
        {
            "label": "getArray(): Array",
            "documentation": [
                "DataMap 전체 데이터를 KeyInfo에 정의 된 순서대로 array에 담아 반환한다.",
                "*@return*   \nDataMap 전체 데이터가 담긴 1차원 Array"
            ]
        },
        {
            "label": "getCount(): Number",
            "documentation": [
                "DataMap에 정의 된 key의 개수를 반환한다.",
                "*@return*   \nDataMap에 정의 된 key의 개수"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "dataMap 객체의 id를 반환한다. 객체의 id 속성과 동일한 값을 반환한다.",
                "*@return*   \ndataMap 객체의 ID"
            ]
        },
        {
            "label": "getIndex(keyID: String): Number",
            "documentation": [
                "key의 ID로 KeyInfo에 정의 된 key의 index를 반환한다.",
                "*@param* `keyID` &mdash; KeyInfo에 정의 된 ID",
                "*@return*   \nkeyID의 index"
            ]
        },
        {
            "label": "getInfo(): JSON",
            "documentation": [
                "dataMap의 세부 정보를 조회한다.",
                "*@return*   \n{dataMapInfo: dataMap의 attribute값, keyInfo: 각 key의 attribute들을 모아둔 object} 형태의 json객체"
            ]
        },
        {
            "label": "getJSON(): JSON",
            "documentation": [
                "DataMap 전체 데이터를 JSON으로 반환한다.",
                "*@return*   \nDataMap 전체 데이터의 json객체"
            ]
        },
        {
            "label": "getKey(keyIndex: Number): String",
            "documentation": [
                "key의 index를 받아 ID명을 반환한다.",
                "*@param* `keyIndex` &mdash; KeyInfo에 정의 된 key의 index",
                "*@return*   \nkey의 ID"
            ]
        },
        {
            "label": "getKeyInfo(key: String): JSON",
            "documentation": [
                "dataMap 특정 key의 세부 정보를 조회한다.",
                "*@param* `key` &mdash; 조회하고자 하는 key",
                "*@return*   \n해당 key의 attribute를 표현한 json 객체"
            ]
        },
        {
            "label": "getModifiedArray(): JSON",
            "documentation": [
                "DataMap의 original 데이터와 현재 데이터의 값이 다른 key array와 value array를 JSON으로 반환한다. DataMap의 firstSet속성과 연관되어있다.",
                "*@return*   \noriginal 데이터와 현재 값이 다른 key array와 value array가 담긴 JSON"
            ]
        },
        {
            "label": "getModifiedData(): Array",
            "documentation": [
                "DataMap의 original 데이터와 현재 데이터의 값이 다른 key들의 value를 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.",
                "*@return*   \noriginal 데이터와 현재값이 다른 key들의 value가 담긴 Array"
            ]
        },
        {
            "label": "getModifiedIndex(): Array",
            "documentation": [
                "DataMap의 original 데이터와 현재 데이터의 값이 다른 key들의 Index를 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.",
                "*@return*   \noriginal 데이터와 현재값이 다른 key들의 Index가 담긴 Array"
            ]
        },
        {
            "label": "getModifiedJSON(): JSON",
            "documentation": [
                "DataMap의 original 데이터와 현재 데이터의 값이 다른 key들을 JSON으로 반환한다. DataMap의 firstSet속성과 연관되어있다.",
                "*@return*   \nDataMap의 original 데이터와 현재 데이터의 값이 다른 key와 value가 담긴 JSON"
            ]
        },
        {
            "label": "getModifiedKey(): Array",
            "documentation": [
                "DataMap의 original 데이터와 현재 데이터의 값이 다른 Key들을 배열로 반환한다. DataMap의 firstSet속성과 연관되어있다.",
                "*@return*   \noriginal 데이터와 현재값이 다른 key가 담긴 Array"
            ]
        },
        {
            "label": "getModifiedXML(): XML",
            "documentation": [
                "DataMap의 original 데이터와 현재 데이터의 값이 다른 key들을 XML로 반환합니다. DataMap의 firstSet속성과 연관되어있다.",
                "*@return*   \nDataMap의 original 데이터와 현재 데이터의 값이 다른 key와 value가 담긴 XML"
            ]
        },
        {
            "label": "getName(keyID: String): String",
            "documentation": [
                "KeyInfo에 정의 된 key의 id로 name에 정의 된 값을 반환한다.",
                "*@param* `keyID` &mdash; KeyInfo에 정의 된 Key ID",
                "*@return*   \nKeyInfo에 정의 된 Key Name"
            ]
        },
        {
            "label": "getObjectType(): String",
            "documentation": [
                "dataCollection의 Type을 반환한다.",
                "*@return*   \n[dataMap, dataList, linkedDataList] dataCollection의 타입"
            ]
        },
        {
            "label": "getOption(attr: String): String",
            "documentation": [
                "속성명으로 dataMap에 정의 된 속성의 값을 반환한다.",
                "*@param* `attr` &mdash; 속성명",
                "*@return*   \ndataMap에 정의 된 속성의 값"
            ]
        },
        {
            "label": "getOriginal(KeyID: String): Object",
            "documentation": [
                "KeyInfo에 정의 된 Key ID에 할당 된 초기값을 반환한다.",
                "*@param* `KeyID` &mdash; Key ID",
                "*@return*   \nKey ID에 할당 한 초기값. (return type은 일반적으로 String이 대부분이며 초기 셋팅 한 data의 type 형태로 반환된다.)"
            ]
        },
        {
            "label": "getType(KeyID: String): String",
            "documentation": [
                "KeyInfo에 정의 된 Key의 dataType 속성 값을 반환한다.",
                "*@param* `KeyID` &mdash; Key ID",
                "*@return*   \nKey의 dataType 속성 값"
            ]
        },
        {
            "label": "getXML(): XML",
            "documentation": [
                "DataMap의 전체 데이터를 XML 형태로 반환한다.",
                "*@return*   \nXML 타입의 전체 데이터"
            ]
        },
        {
            "label": "reform()",
            "documentation": [
                "DataMap의 key의 상태를 초기화하고 original값을 현재의 key값으로 변경한다."
            ]
        },
        {
            "label": "set(KeyID: String, KeyValue: String)",
            "documentation": [
                "DataMap에 정의 된 Key ID에 value를 셋팅한다.",
                "*@param* `KeyID` &mdash; Key의 ID",
                "*@param* `KeyValue` &mdash; Key에 할당 할 value"
            ]
        },
        {
            "label": "setArray(arrayData: Array)",
            "documentation": [
                "DataMap의 전체 데이터를 Array로 셋팅한다. array의 value index(순서)는 DataMap에 정의 된 Key의 index(순서)와 동일해야한다.",
                "*@param* `arrayData` &mdash; KeyInfo에 정의 된 key 순서/개수와 동일하고 value만 담긴 Array"
            ]
        },
        {
            "label": "setJSON(jsonData: JSON)",
            "documentation": [
                "DataMap의 전체 데이터를 JSON으로 셋팅한다. 전체 Key가 있을 필요는 없으며 DataMap에 정의 된 Key만 셋팅된다.",
                "*@param* `jsonData` &mdash; JSON형태의 DataMap의 전체 데이터"
            ]
        },
        {
            "label": "setXML(xmlData: XML)",
            "documentation": [
                "DataMap의 전체 데이터를 XML로 셋팅한다. 전체 Key가 있을 필요는 없으며 DataMap에 정의 된 Key만 셋팅된다.",
                "*@param* `jsonData` &mdash; XML형태의 DataMap의 전체 데이터"
            ]
        },
        {
            "label": "trigger(eventType: String, paramArray?: Array)",
            "documentation": [
                "dataMap에 등록 된 특정 이벤트를 직접 발생시킨다.",
                "*@param* `eventType` &mdash; 발생시킬 이벤트 이름",
                "*@param* `paramArray` &mdash; 이벤트 핸들러에 전달 할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(eventType?: String, function?: Function)",
            "documentation": [
                "dataMap에 등록 된 특정 이벤트를 직접 발생시킨다.",
                "*@param* `eventType` &mdash; 제거할 이벤트의 이름. 생략할 경우 모든 이벤트를 제거한다",
                "*@param* `function` &mdash; 동적으로 event에 function을 할당 한 경우 제거 할 이벤트 핸들러 함수. 생략 할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다"
            ]
        },
        {
            "label": "undo()",
            "documentation": [
                "DataMap의 key value를 초기(original)값으로 변경한다."
            ]
        }
    ],
    "editor": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getDomain(): String:Y",
            "documentation": [
                "Editor에 세팅된 domain값을 가져옵니다.",
                "*@return*  \neditor에 설정된 domain값."
            ]
        },
        {
            "label": "getHTML(): String:Y",
            "documentation": [
                "editor의 textarea에서 html태그를 포함하여 모두 반환합니다.",
                "*@return*  \ntextarea에 입력된 html소스"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getImageLoadURL(): String:Y",
            "documentation": [
                "imageLoadURL을 얻어옵니다.",
                "*@return*  \neditor에 설정된 imageLoadURL"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getText(): String:Y",
            "documentation": [
                "editor의 textarea에서 html태그를 무시하고 text만 반환합니다.",
                "*@return*  \ntextarea의 text부분"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "resize(editor: Number: Number, editor: Number: Number)",
            "documentation": [
                "editor의 resize를  적용합니다.",
                "*@param* `editor` &mdash; width 값",
                "*@param* `editor` &mdash; height 값"
            ]
        },
        {
            "label": "setDisabled(disabled?: Boolean)",
            "documentation": [
                "editor를 disabled 처리 한다.",
                "*@param* `disabled` &mdash; Disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setDomain(domain?: String)",
            "documentation": [
                "CrossDomain 처리를 위해 Editor에 domain을 셋팅합니다.",
                "*@param* `domain` &mdash; domain 값이 없으면 WebSquare.util.setDomain으로 셋팅된 domain이 셋팅됩니다."
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setHTML(html: String)",
            "documentation": [
                "html을 editor에 textarea에 입력합니다.(html태그를 해석하여 입력합니다.)",
                "*@param* `html` &mdash; editor에 입력하려는 html소스"
            ]
        },
        {
            "label": "setImageLoadURL(imageLoadURL?: String)",
            "documentation": [
                "imageLoadURL을 셋팅합니다.",
                "*@param* `imageLoadURL` &mdash; imageLoadURL"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly?: Boolean)",
            "documentation": [
                "editor를 readOnly 처리 한다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setText(value: String)",
            "documentation": [
                "value를 editor에 textarea에 입력합니다.(html태그를 text로 입력합니다.)",
                "*@param* `value` &mdash; editor에 입력하려는 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fliptoggle": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "toggle된 value값을 반환한다.",
                "*@return*  \nvalue"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String): String",
            "documentation": [
                "value와 같은 값을 가진 항목으로 toggle된다.",
                "*@param* `value` &mdash; toggle할 항목의 value",
                "*@return*  \n셋팅된 결과"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggle(index?: Number): String",
            "documentation": [
                "toggle처리를 한다.",
                "*@param* `index` &mdash; 선택할 index, 없으면 현재 값과 반대값으로 toggle한다.",
                "*@return*  \n선택된 항목의 value"
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "floatingLayer": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Integer, heigth: Integer)",
            "documentation": [
                "컴포넌트의 크기를 설정합니다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setTitle(title: String)",
            "documentation": [
                "header의 Text(title)값을 설정한다.",
                "*@param* `title` &mdash; title의 문자열"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fusionChart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addTrendLine(options: Object)",
            "documentation": [
                "FusionChart의 TrendLine를 추가합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "addVTrendLine(options: Object)",
            "documentation": [
                "FusionChart의 VTrendLine를 추가합니다.(Scatter/Bubble/ZoomLine에서만 지원)",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "applyStyle(styleType: String, styleName: String, options: Object, objectNameArr: Array)",
            "documentation": [
                "FusionChart의 스타일을 적용합니다.",
                "*@param* `styleType` &mdash; 스타일 타입(font, bevel, glow, animation, shadow)",
                "*@param* `styleName` &mdash; 스타일 이",
                "*@param* `options` &mdash; 추가할 옵션 객체",
                "*@param* `objectNameArr` &mdash; 스타일을 적용할 chart object"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "configure(options: Object)",
            "documentation": [
                "FusionChart에서 표시되는 다양한 메세지를 변경 합니다.",
                "*@param* `options` &mdash; 설정할 configure 옵션 객체"
            ]
        },
        {
            "label": "draw()",
            "documentation": [
                "FusionChart를 화면에 출력합니다."
            ]
        },
        {
            "label": "exportJSChart()",
            "documentation": [
                "javascript로 렌더링된 fusionchart를 jpg,png,pdf형식으로 export하는 함수입니다."
            ]
        },
        {
            "label": "fc(): Object",
            "documentation": [
                "FusionChart의 객체를 반환합니다. 반환받은 FusionChart 객체를 이용해서 FusionChart에서 지원하는 Native API를 호출 할 수 있습니다.",
                "*@return*  \nFusionChart 객체"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChartAttribute(name: String): String",
            "documentation": [
                "FusionChart의 attribute값을 반환합니다.",
                "*@param* `name` &mdash; attribute 이름",
                "*@return*  \nattribute 값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getJSONData(): Object:Y",
            "documentation": [
                "FusionChart의 차트데이터를 JSON String 형태로 반환합니다.",
                "*@return*  \n차트 데이타"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSVGString(): String",
            "documentation": [
                "차트로부터 SVG를 string 형태로 반환한다.",
                "*@return*  \n전처리된 svg string"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "modifySeriesName(options: Object)",
            "documentation": [
                "fusionChart에 seriseName을 변경합니다.",
                "*@param* `options` &mdash; 옵션( seriesType,colId,newName,oldName )"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setAccessibility(flag: Boolean)",
            "documentation": [
                "FusionChart에 웹접근성지원 함수입니다.",
                "*@param* `flag` &mdash; 접근성 on / off"
            ]
        },
        {
            "label": "setChartAttribute(options: Object)",
            "documentation": [
                "FusionChart의 attribute의 value값을 변경합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "setChartColumnRef(ref: String, labelNode: String, seriesColumns: String)",
            "documentation": [
                "FusionChart의 DataCollection 바인딩 속성을 셋팅합니다.",
                "*@param* `ref` &mdash; attribute DataCollection id",
                "*@param* `labelNode` &mdash; labelNode",
                "*@param* `seriesColumns` &mdash; seriesColumns"
            ]
        },
        {
            "label": "setChartColumnSimpleRef(ref: String, labelNode: String, seriesNode: String, valueNode: String)",
            "documentation": [
                "seriesType이 simple인 차트의 FusionChart의 DataCollection 바인딩 속성을 셋팅합니다.",
                "*@param* `ref` &mdash; attribute DataCollection id",
                "*@param* `labelNode` &mdash; labelNode",
                "*@param* `seriesNode` &mdash; seriesNode",
                "*@param* `valueNode` &mdash; valueNode"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setJSONData(json: Object)",
            "documentation": [
                "지정된 json 객체로 FusionChart의 차트 데이타를 변경합니다.",
                "*@param* `json` &mdash; 차트 데이타"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPlotColor(colorArr: Array, colorOption: Array)",
            "documentation": [
                "차트의 dataplot 색상을 지정합니다.",
                "*@param* `colorArr` &mdash; ",
                "*@param* `colorOption` &mdash; "
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fwBulletChart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "draw()",
            "documentation": [
                "fwBulletChart를 화면에 출력합니다."
            ]
        },
        {
            "label": "exportJSChart(출력타입: String)",
            "documentation": [
                "fwBulletChart를 jpg,png,pdf형식으로 export하는 함수입니다.",
                "*@param* `출력타입` &mdash; "
            ]
        },
        {
            "label": "fc(): Object",
            "documentation": [
                "fwBulletChart타입의 fusionWidget 객체를 반환합니다. 반환받은 fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.",
                "*@return*  \nFusionWidget 객체"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChartAttribute(name: String): String",
            "documentation": [
                "fwBulletChart의 attribute값을 반환합니다.",
                "*@param* `name` &mdash; attribute 이름",
                "*@return*  \nattribute 값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getJSONData(): Object",
            "documentation": [
                "fwBulletChart의 차트데이터를 JSON객체를 반환합니다.",
                "*@return*  \n차트 데이터"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSVGString(): String",
            "documentation": [
                "차트로부터 SVG를 string 형태로 반환한다.",
                "*@return*  \n전처리된 svg string"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): Object:Y",
            "documentation": [
                "fwBulletChart에  target,value 값을 객체로 반환합니다.",
                "*@return*  \ntarget,value"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setChartAttribute(options: Object)",
            "documentation": [
                "fwBulletChart의 attribute의 value값을 변경합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setJSONData(json: Object)",
            "documentation": [
                "지정된 json 객체로 fwBulletChart의 차트 데이터를 설정함.",
                "*@param* `json` &mdash; 차트 데이터"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(dataList: String, targetNode: String, valueNode: String)",
            "documentation": [
                "fwBulletChart에 dataList를 바인딩합니다.",
                "*@param* `dataList` &mdash; id",
                "*@param* `targetNode` &mdash; column id",
                "*@param* `valueNode` &mdash; column id"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(fwBulletChart에: Object)",
            "documentation": [
                "fwBulletChart에 value값을 설정합니다.",
                "*@param* `fwBulletChart에` &mdash; 설정할 value,target 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fwFunnelChart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "exportJSChart()",
            "documentation": [
                "javascript로 렌더링된 fwFunnelChart를 jpg,png,pdf형식으로 export하는 함수입니다."
            ]
        },
        {
            "label": "fc(): Object",
            "documentation": [
                "fwFunnelChart타입의 fusionWidget 객체를 반환합니다. 반환받은 fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.",
                "*@return*  \nFusionWidget 객체"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChartAttribute(name: String): String",
            "documentation": [
                "fwFunnelChart의 attribute값을 반환합니다.",
                "*@param* `name` &mdash; attribute 이름",
                "*@return*  \nattribute 값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getJSONData(): Object",
            "documentation": [
                "fwFunnelChart의 차트데이터를 JSON객체를 반환합니다.",
                "*@return*  \n차트 데이터"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSVGString(): String",
            "documentation": [
                "차트로부터 SVG를 string 형태로 반환한다.",
                "*@return*  \n전처리된 svg string"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setAccessibility(flag: Boolean)",
            "documentation": [
                "fwFunnelChart에 웹접근성지원 함수입니다.",
                "*@param* `flag` &mdash; 접근성 on / off"
            ]
        },
        {
            "label": "setChartAttribute(options: Object)",
            "documentation": [
                "fwFunnelChart의 attribute의 value값을 변경합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "setChartColumnRef(ref: String, labelNode: String, seriesColumns: String)",
            "documentation": [
                "fwPyramidChart의 DataCollection 바인딩 속성을 셋팅합니다.",
                "*@param* `ref` &mdash; attribute DataCollection id",
                "*@param* `labelNode` &mdash; labelNode",
                "*@param* `seriesColumns` &mdash; seriesColumns"
            ]
        },
        {
            "label": "setChartColumnSimpleRef(ref: String, labelNode: String, seriesNode: String, valueNode: String)",
            "documentation": [
                "seriesType이 simple인 차트의 fwFunnelChart의 dataList 바인딩 속성을 셋팅합니다.",
                "*@param* `ref` &mdash; attribute DataCollection id",
                "*@param* `labelNode` &mdash; labelNode",
                "*@param* `seriesNode` &mdash; seriesNode",
                "*@param* `valueNode` &mdash; valueNode"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setJSONData(json: Object)",
            "documentation": [
                "지정된 json 객체로 fwFunnelChart의 차트 데이터를 변경합니다.",
                "*@param* `json` &mdash; 차트 데이타"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPlotColor()",
            "documentation": [
                "차트의 dataplot 색상을 지정합니다."
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fwGanttChart": [
        {
            "label": "addCategories(fwGanttChart: Object)",
            "documentation": [
                "fwGanttChart의 Catagories를 추가한다.",
                "*@param* `fwGanttChart` &mdash; 카테고리 데이터"
            ]
        },
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "draw()",
            "documentation": [
                "fwGanttChart를 화면에 출력합니다."
            ]
        },
        {
            "label": "exportJSChart(type: String)",
            "documentation": [
                "fwGanttChart를 jpg,png,pdf형식으로 export하는 함수입니다.",
                "*@param* `type` &mdash; export 타입, 디폴트값:jpg"
            ]
        },
        {
            "label": "fc(): Object",
            "documentation": [
                "fwGanttChart타입의 fusionWidget 객체를 반환합니다. fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.",
                "*@return*  \nFusionWidget 객체"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChartAttribute(name: String): String",
            "documentation": [
                "fwGanttChart의 attribute값을 반환합니다.",
                "*@param* `name` &mdash; attribute 이름",
                "*@return*  \nattribute 값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getJSONData(): Object",
            "documentation": [
                "fwGanttChart의 차트데이터를 JSON객체를 반환합니다.",
                "*@return*  \n차트 데이터"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSVGString(): String",
            "documentation": [
                "차트로부터 SVG를 string 형태로 반환한다.",
                "*@return*  \n전처리된 svg string"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setCategories(fwGanttChart: Object)",
            "documentation": [
                "fwGanttChart의 Catagories를 설정한다.",
                "*@param* `fwGanttChart` &mdash; 카테고리 데이터"
            ]
        },
        {
            "label": "setChartAttribute(options: Object)",
            "documentation": [
                "fwGanttChart의 attribute의 value값을 변경합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "setConnector(task간: Object)",
            "documentation": [
                "fwGanttChart에 task간 connector로 연결함.",
                "*@param* `task간` &mdash; 연결정보"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setJSONData(json: Object)",
            "documentation": [
                "지정된 json 객체로 fwGanttChart의 차트 데이터를 변경합니다.",
                "*@param* `json` &mdash; 차트 데이터"
            ]
        },
        {
            "label": "setMilestone(Milestone속성: Object)",
            "documentation": [
                "fwGanttChart에 task에 milestone을 지정함.",
                "*@param* `Milestone속성` &mdash; "
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setProcessesAttribute(process속성: Object)",
            "documentation": [
                "fwGanttChart에 processes 속성을 설정함.",
                "*@param* `process속성` &mdash; "
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setTaskAttribute(task속성: Object)",
            "documentation": [
                "fwGanttChart에 task에 속성을 지정함.",
                "*@param* `task속성` &mdash; "
            ]
        },
        {
            "label": "setTrendLine(trendLine속성: Object)",
            "documentation": [
                "fwGanttChart에 세로라인을 추가함. (시작지점,끝지점 등등으로 사용가능)",
                "*@param* `trendLine속성` &mdash; "
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fwGaugeChart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "changeType(chartType: String)",
            "documentation": [
                "fwGaugeChart의 chartType을 변경합니다.",
                "*@param* `chartType` &mdash; "
            ]
        },
        {
            "label": "clearChart()",
            "documentation": [
                "fwGaugeChart에 실시간 기능사용시 설정된값을 초기화함."
            ]
        },
        {
            "label": "draw()",
            "documentation": [
                "fwGaugeChart를 화면에 출력합니다."
            ]
        },
        {
            "label": "exportJSChart()",
            "documentation": [
                "fwGaugeChart를 jpg,png,pdf형식으로 export하는 함수입니다."
            ]
        },
        {
            "label": "fc(): Object",
            "documentation": [
                "fwGaugeChart타입의 fusionWidget 객체를 반환합니다. fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.",
                "*@return*  \nFusionWidget 객체"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChartAttribute(name: String): String",
            "documentation": [
                "fwGaugeChart의 attribute값을 반환합니다.",
                "*@param* `name` &mdash; attribute 이름",
                "*@return*  \nattribute 값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getJSONData(): Object",
            "documentation": [
                "fwGaugeChart의 차트데이터를 JSON객체를 반환합니다.",
                "*@return*  \n차트 데이터"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSVGString(): String",
            "documentation": [
                "차트로부터 SVG를 string 형태로 반환한다.",
                "*@return*  \n전처리된 svg string"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue()",
            "documentation": [
                "fwGaugeChart에 value값을 반환합니다."
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "isUpdateActive(): Boolean:Y",
            "documentation": [
                "fwGaugeChart에 실시간 기능사용시 현재 fwGaugeChart가 update중인지 확인함.",
                "*@return*  \nrefresh 실행시 : true , refresh 미실행시 : false"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "restartUpdate()",
            "documentation": [
                "fwGaugeChart에 실시간 기능사용시 중지된 update를 다시 시작함."
            ]
        },
        {
            "label": "setChartAttribute(options: Object)",
            "documentation": [
                "fwGaugeChart의 attribute의 value값을 변경합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "setDataStreamInfo(실시간기능에: Object)",
            "documentation": [
                "fwGaugeChart에 실시간 기능사용시 dataStreamUrl를 설정.",
                "*@param* `실시간기능에` &mdash; 필요한 info(dataStreamURL, refreshInterval, dataStamp, showRTMenuItem)"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setJSONData(json: Object)",
            "documentation": [
                "지정된 json 객체로 fwGaugeChart의 차트 데이터를 설정합니다.",
                "*@param* `json` &mdash; 차트 데이터"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(fwGaugeChart에: String, valueNode: String)",
            "documentation": [
                "fwGaugeChart에 binding할 dataList를 설정함.",
                "*@param* `fwGaugeChart에` &mdash; 설정할 dataList",
                "*@param* `valueNode` &mdash; id"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(fwGaugeChart에: Object)",
            "documentation": [
                "fwGaugeChart에 value값을 설정합니다.",
                "*@param* `fwGaugeChart에` &mdash; 설정할 value"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "stopUpdate()",
            "documentation": [
                "fwGaugeChart에 실시간 기능사용시 update를 중지함."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fwPyramidChart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "draw()",
            "documentation": [
                "fwPyramidChart를 화면에 출력합니다."
            ]
        },
        {
            "label": "exportJSChart()",
            "documentation": [
                "fwPyramidChart를 jpg,png,pdf형식으로 export하는 함수입니다."
            ]
        },
        {
            "label": "fc(): Object",
            "documentation": [
                "fwFunnelChart타입의 fusionWidget 객체를 반환합니다. 반환받은 fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.",
                "*@return*  \nFusionWidget 객체"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChartAttribute(name: String): String",
            "documentation": [
                "fwPyramidChart의 attribute값을 반환합니다.",
                "*@param* `name` &mdash; attribute 이름",
                "*@return*  \nattribute 값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getJSONData(): Object",
            "documentation": [
                "fwPyramidChart의 차트데이터를 JSON객체를 반환합니다.",
                "*@return*  \n차트 데이터"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSVGString(): String",
            "documentation": [
                "차트로부터 SVG를 string 형태로 반환한다.",
                "*@return*  \n전처리된 svg string"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setAccessibility(flag: Boolean)",
            "documentation": [
                "fwPyramidChart에 웹접근성지원 함수입니다.",
                "*@param* `flag` &mdash; 접근성 on / off"
            ]
        },
        {
            "label": "setChartAttribute(options: Object)",
            "documentation": [
                "fwPyramidChart의 attribute의 value값을 변경합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "setChartColumnRef(ref: String, labelNode: String, seriesColumns: String)",
            "documentation": [
                "fwPyramidChart의 DataCollection 바인딩 속성을 셋팅합니다.",
                "*@param* `ref` &mdash; attribute DataCollection id",
                "*@param* `labelNode` &mdash; labelNode",
                "*@param* `seriesColumns` &mdash; seriesColumns"
            ]
        },
        {
            "label": "setChartColumnSimpleRef(ref: String, labelNode: String, seriesNode: String, valueNode: String)",
            "documentation": [
                "seriesType이 simple인 차트의 fwPyramidChart dataList 바인딩 속성을 셋팅합니다.",
                "*@param* `ref` &mdash; attribute DataCollection id",
                "*@param* `labelNode` &mdash; labelNode",
                "*@param* `seriesNode` &mdash; seriesNode",
                "*@param* `valueNode` &mdash; valueNode"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setJSONData(json: Object)",
            "documentation": [
                "지정된 json 객체로 fwPyramidChart의 차트 데이터를 변경합니다.",
                "*@param* `json` &mdash; 차트 데이터"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPlotColor()",
            "documentation": [
                "차트의 dataplot 색상을 지정합니다."
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fwRealtimeChart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "clearChart()",
            "documentation": [
                "fwRealtimeChart에 실시간 기능사용시 dataPlot를 초기화함."
            ]
        },
        {
            "label": "draw()",
            "documentation": [
                "fwRealtimeChart를 화면에 출력합니다."
            ]
        },
        {
            "label": "exportJSChart()",
            "documentation": [
                "fwRealtimeChart를 jpg,png,pdf형식으로 export하는 함수입니다."
            ]
        },
        {
            "label": "fc(): Object",
            "documentation": [
                "fwRealtimeChart타입의 fusionWidget 객체를 반환합니다. fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.",
                "*@return*  \nFusionWidget 객체"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChartAttribute(name: String): String",
            "documentation": [
                "fwRealtimeChart의 attribute값을 반환합니다.",
                "*@param* `name` &mdash; attribute 이름",
                "*@return*  \nattribute 값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSVGString(): String",
            "documentation": [
                "차트로부터 SVG를 string 형태로 반환한다.",
                "*@return*  \n전처리된 svg string"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "isUpdateActive(): Boolean:Y",
            "documentation": [
                "fwRealtimeChart에 실시간 기능사용시 현재 fwRealtimeChart가 update중인지 확인함.",
                "*@return*  \nrefresh 실행시 : true , refresh 미실행시 : false"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "restartUpdate()",
            "documentation": [
                "fwRealtimeChart에 실시간 기능사용시 중지된 update를 다시 시작함."
            ]
        },
        {
            "label": "setChartAttribute(options: Object)",
            "documentation": [
                "fwRealtimeChart의 attribute의 value값을 변경합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "setDataStreamInfo(실시간기능에: Object)",
            "documentation": [
                "fwRealtimeChart에 실시간 기능사용시 dataStreamUrl를 설정.",
                "*@param* `실시간기능에` &mdash; 필요한 info(dataStreamURL, refreshInterval, dataStamp, showRTMenuItem)"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "stopUpdate()",
            "documentation": [
                "fwRealtimeChart에 실시간 기능사용시 update를 중지함."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "fwSparkChart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "draw()",
            "documentation": [
                "fwSparkChart를 화면에 출력합니다."
            ]
        },
        {
            "label": "exportJSChart()",
            "documentation": [
                "fwSparkChart를 jpg,png,pdf형식으로 export하는 함수입니다."
            ]
        },
        {
            "label": "fc(): Object",
            "documentation": [
                "fwSparkChart타입의 fusionWidget 객체를 반환합니다. fusionWidget 객체를 이용해서 fusionWidget 지원하는 Native API를 호출 할 수 있습니다.",
                "*@return*  \nFusionWidget 객체"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChartAttribute(name: String): String",
            "documentation": [
                "fwSparkChart의 attribute값을 반환합니다.",
                "*@param* `name` &mdash; attribute 이름",
                "*@return*  \nattribute 값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getJSONData(): Object",
            "documentation": [
                "fwSparkChart의 차트데이터를 JSON객체를 반환합니다.",
                "*@return*  \n차트 데이터"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSVGString(): String",
            "documentation": [
                "차트로부터 SVG를 string 형태로 반환한다.",
                "*@return*  \n전처리된 svg string"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setAccessibility(flag: Boolean)",
            "documentation": [
                "fwSparkChart에 웹접근성지원 함수입니다.",
                "*@param* `flag` &mdash; 접근성 on / off"
            ]
        },
        {
            "label": "setChartAttribute(options: Object)",
            "documentation": [
                "fwSparkChart의 attribute의 value값을 변경합니다.",
                "*@param* `options` &mdash; 추가할 옵션 객체"
            ]
        },
        {
            "label": "setChartColumnRef(ref: String, labelNode: String, seriesColumns: String)",
            "documentation": [
                "fwSparkChart의 DataCollection 바인딩 속성을 셋팅합니다.",
                "*@param* `ref` &mdash; attribute DataCollection id",
                "*@param* `labelNode` &mdash; labelNode",
                "*@param* `seriesColumns` &mdash; seriesColumns"
            ]
        },
        {
            "label": "setChartColumnSimpleRef(ref: String, labelNode: String, seriesNode: String, valueNode: String)",
            "documentation": [
                "seriesType이 simple인 차트의 fwSparkChart dataList 바인딩 속성을 셋팅합니다.",
                "*@param* `ref` &mdash; attribute DataCollection id",
                "*@param* `labelNode` &mdash; labelNode",
                "*@param* `seriesNode` &mdash; seriesNode",
                "*@param* `valueNode` &mdash; valueNode"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setJSONData(json: Object)",
            "documentation": [
                "지정된 json 객체로 fwSparkChart의 차트 데이터를 변경합니다.",
                "*@param* `json` &mdash; 차트 데이터"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "gauge": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getMaxValue(): Number",
            "documentation": [
                "gauge 컴포넌트의 최댓값을 반환합니다.",
                "*@return*  \ngauge의 최댓값"
            ]
        },
        {
            "label": "getMinValue(): Number",
            "documentation": [
                "gauge 컴포넌트의 최솟값을 반환합니다.",
                "*@return*  \ngauge의 최솟값"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): Number",
            "documentation": [
                "gauge 컴포넌트가 가진 값을 반환합니다.",
                "*@return*  \n현재 항목의 값"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "바인딩 된 ref 경로를 동적으로 변경합니다.",
                "*@param* `ref` &mdash; 변경할 ref의 XPath"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: Number)",
            "documentation": [
                "gauge에 인자로 받은 value로 값을 설정합니다.",
                "*@param* `value` &mdash; gauge에 설정할 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "generator": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getChild(index: Number, id: String): Object",
            "documentation": [
                "컴포넌트의 ID와 해당 컴포넌트가 속해 있는 반복부의 index를 기반으로 컴포넌트 객체를 반환한다.",
                "*@param* `index` &mdash; 반환 받을 컴포넌트가 속해 있는 반복부의 index.(보이는 순서대로)",
                "*@param* `id` &mdash; 반환 받을 컴포넌트의 초기 설정 ID.",
                "*@return*  \n반복부에서 찾아진 웹스퀘어 컴포넌트"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getLength(): Number",
            "documentation": [
                "반복부의 개수를 반환한다.",
                "*@return*  \n반복부의 개수"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "insertChild(index?: Number): Number",
            "documentation": [
                "index에 해당하는 위치에 반복부를 삽입한다. index가 생략 된 경우 마지막에 삽입된다.",
                "*@param* `index` &mdash; 반복부를 삽입할 위치",
                "*@return*  \n반복부가 생성된 순서의 번호로 index와 다르다."
            ]
        },
        {
            "label": "removeAll()",
            "documentation": [
                "모든 반복부를 삭제한다."
            ]
        },
        {
            "label": "removeChild(index?: Number): Number",
            "documentation": [
                "index에 해당하는 반복부를 삭제하며 index가 없을 경우 마지막 반복부를 삭제힌다.",
                "*@param* `index` &mdash; 삭제할 반복부의 index",
                "*@return*  \n삭제된 반복부의 생성 번호(index가 아님)가 담긴 배열."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 propertyName에 해당하는 style의 값을 설정합니다.",
                "*@param* `propertyName` &mdash; 바꾸고 싶은 style 값의 이름",
                "*@param* `value` &mdash; 설정할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "grid": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "advancedExcelDownload(options: Object, infoArr?: Object)",
            "documentation": [
                "그리드의 데이터를 엑셀 파일로 저장합니다. (JDK 1.5이상에서 사용 가능)",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 엑셀 다운로드 옵션",
                "*@param* `infoArr` &mdash; 그리드에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열"
            ]
        },
        {
            "label": "advancedExcelUpload(options: Object)",
            "documentation": [
                "엑셀 파일을 읽어 그리드의 데이터를 설정합니다. (JDK 1.5이상에서 사용 가능)",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 엑셀 업로드 옵션"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "checkAll(colIndex: String, dataValue: String)",
            "documentation": [
                "체크 박스로 이루어진 열을 한번에 체크하거나 언체크합니다.",
                "*@param* `colIndex` &mdash; 체크 박스 열의 column id 또는 index",
                "*@param* `dataValue` &mdash; 열의 체크박스의 true값 또는 false값"
            ]
        },
        {
            "label": "clearGroupby()",
            "documentation": [
                "grid groupby를 해제합니다."
            ]
        },
        {
            "label": "clearSort()",
            "documentation": [
                "그리드의 모든 정렬을 취소해줍니다."
            ]
        },
        {
            "label": "deleteRow(rowIndex: Number)",
            "documentation": [
                "rowInex에 해당하는 행의 상태 값을 삭제로 바꿔줍니다. (row를 삭제하지는 않는다)",
                "*@param* `rowIndex` &mdash; 삭제상태로 변경할 행의 번호"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getAllData(): Object",
            "documentation": [
                "그리드의 모든 data를 배열로 반환합니다.",
                "*@return*  \n그리드의 data 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getAllDisplayData(): Object",
            "documentation": [
                "그리드의 화면에 보이는 data를 배열로 반환합니다.(filter는 적용하지 않음.)",
                "*@return*  \n그리드의 화면에 보이는 data 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getAllDisplayXML(): Xml Element",
            "documentation": [
                "그리드의 모든 data를 XML로 반환합니다.(filter 적용하지 않음)",
                "*@return*  \n그리드의 data"
            ]
        },
        {
            "label": "getAllFocusedIndex(): Array",
            "documentation": [
                "포커스가 위치한 모든 셀의 rowIndex와 colIndex를 반환합니다.",
                "*@return*  \n포커스가 위치한 모든 셀의 rowIndex와 colIndex의 정보를 가진 array"
            ]
        },
        {
            "label": "getAllVisibleData(): Object",
            "documentation": [
                "그리드의 현재 보이는 data를 배열로 반환합니다.\t(filter까지 적용)",
                "*@return*  \n그리드의 현재 보이는 data (1차원 배열)"
            ]
        },
        {
            "label": "getAllVisibleXML(): Xml Element",
            "documentation": [
                "그리드의 현재 보이는 data를 XML로 반환합니다.(filter까지 적용)",
                "*@return*  \n그리드의 현재 보이는 data"
            ]
        },
        {
            "label": "getAllXML(): Xml Element",
            "documentation": [
                "그리드의 모든 data를 XML로 반환합니다.",
                "*@return*  \n그리드의 data"
            ]
        },
        {
            "label": "getBottomRowIndex(): Number",
            "documentation": [
                "현재 그리드에 그려진 최하단 row의 rowIndex를 반환합니다. 그려진 row가 없으면 -1을 반환합니다.",
                "*@return*  \n최하단 row의 rowIndex"
            ]
        },
        {
            "label": "getCellBackgroundColor(rowIndex: Number, colIndex: String): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 배경색을 반환합니다.",
                "*@param* `rowIndex` &mdash; 배경색을 반환할 행 번호",
                "*@param* `colIndex` &mdash; 배경색을 반환할 열 번호 혹은 컬럼 아이디",
                "*@return*  \n해당 행에 지정된 배경색"
            ]
        },
        {
            "label": "getCellChecked(rowIndex: Number, colIndex: Number): Boolean",
            "documentation": [
                "rowIndex와 colIndex로 해당하는 셀의 check여부를 반환합니다.",
                "*@param* `rowIndex` &mdash; 셀의 행번호",
                "*@param* `colIndex` &mdash; 셀의 열번호 혹은 컬럼 아이디",
                "*@return*  \n셀의 check여부"
            ]
        },
        {
            "label": "getCellColor(rowIndex: Number, colIndex: String): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 글자색을 반환합니다.",
                "*@param* `rowIndex` &mdash; 글자색을 반환할 행 번호",
                "*@param* `colIndex` &mdash; 글자색을 반환할 열 번호 혹은 컬럼 아이디",
                "*@return*  \n행당 행의 글자색"
            ]
        },
        {
            "label": "getCellData(rowIndex: Number, colIndex: String): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 데이터를 반환합니다.",
                "*@param* `rowIndex` &mdash; 셀의 행 번호",
                "*@param* `colIndex` &mdash; 셀의 컬럼 번호 혹은 컬럼의 아이디",
                "*@return*  \nrowIndex와 colIndex에 해당하는 셀의 데이터"
            ]
        },
        {
            "label": "getCellDisabled(rowIndex: Number, colIndex: String): Boolean",
            "documentation": [
                "colIndex와 rowIndex 해당하는 셀의 disabled속성 값을 반환합니다.",
                "*@param* `rowIndex` &mdash; disabled속성을 가져올 행 번호",
                "*@param* `colIndex` &mdash; disabled속성을 가져올 열 번호 혹은 컬럼 아이디",
                "*@return*  \n해당 셀에 적용된 disabled속성값"
            ]
        },
        {
            "label": "getCellDisplayData(rowIndex: Number, colIndex: String): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터를 반환합니다.",
                "*@param* `rowIndex` &mdash; 셀의 행 번호",
                "*@param* `colIndex` &mdash; 셀의 컬럼 번호 혹은 컬럼 아이디",
                "*@return*  \nrowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터"
            ]
        },
        {
            "label": "getCellPosition(row: Number, colIndex: String, propertyName: String): Number",
            "documentation": [
                "셀의 위치 정보(top이나 left)를 반환합니다.",
                "*@param* `row` &mdash; 셀의 행 번호(세로 스크롤 위치와는 무관하게 현재 그리드에서 최상단 행에 위치한 셀의 행 번호를 0으로 보고 세어야 한다)",
                "*@param* `colIndex` &mdash; 셀의 컬럼 번호 혹은 컬럼의 아이디",
                "*@param* `propertyName` &mdash; 반환할 위치 정보의 이름('top' 또는 'left')",
                "*@return*  \n셀의 위치 정보(top이나 left)의 값"
            ]
        },
        {
            "label": "getCellReadOnly(rowIndex: Number, colIndex: String): Boolean",
            "documentation": [
                "colIndex와 rowIndex에 해당하는 셀의 readonly속성 값을 반환합니다.",
                "*@param* `rowIndex` &mdash; readonly속성을 가져올 행 번호",
                "*@param* `colIndex` &mdash; readonly속성을 가져올 열 번호 혹은 컬럼 아이디",
                "*@return*  \n해당 셀에 적용된 readonly속성값"
            ]
        },
        {
            "label": "getCellSize(row: Number, colIndex: String, sizeName: String): Number",
            "documentation": [
                "셀의 크기 정보(width나 height)를 반환합니다.",
                "*@param* `row` &mdash; 셀의 행 번호",
                "*@param* `colIndex` &mdash; 셀의 컬럼 번호 혹은 컬럼의 아이디",
                "*@param* `sizeName` &mdash; 반환할 크기 정보의 이름('width' 또는 'height')",
                "*@return*  \n셀의 크기 정보(width나 height)의 값"
            ]
        },
        {
            "label": "getCheckedData(colIndex: Number): Object",
            "documentation": [
                "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 배열로 반환합니다. 해당 컬럼이 checkbox가 아닐경우 비어있는 배열을 반환합니다.",
                "*@param* `colIndex` &mdash; checkbox여부를 검사할 열번호 혹은 컬럼 아이디",
                "*@return*  \ndata를 저장한 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getCheckedIndex(colIndex: Number): Object",
            "documentation": [
                "colIndex에 해당하는 열의 radio/checkbox가 check된 행의 Index를 배열로 반환합니다.",
                "*@param* `colIndex` &mdash; checkbox여부를 검사할 열번호 혹은 컬럼 아이디",
                "*@return*  \n행번호를 저장한 배열"
            ]
        },
        {
            "label": "getCheckedXML(colIndex: Number): Xml element",
            "documentation": [
                "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 XML로 반환합니다.",
                "*@param* `colIndex` &mdash; checkbox여부를 검사할 열번호 혹은 컬럼 아이디",
                "*@return*  \ndata를 저장한 XML"
            ]
        },
        {
            "label": "getChildrenRowIndexArray(rowIndex: Number)",
            "documentation": [
                "drilldown 사용시 rowIndex에 해당하는 행의 자식 행들의 rowIndex를 배열로 반환합니다.",
                "*@param* `rowIndex` &mdash; 자식을 찾으려는 행의 번호"
            ]
        },
        {
            "label": "getColData(colIndex: Number): Object",
            "documentation": [
                "colIndex에 해당하는 열의 데이터(filter나 sort처리되지 않은)를 배열로 반환합니다.",
                "*@param* `colIndex` &mdash; 데이터를 가져올 열 번호 혹은 컬럼 아이디",
                "*@return*  \ncolIndex에 해당하는 열의 데이터의 배열"
            ]
        },
        {
            "label": "getColIdByHeaderId(headerId: String): String",
            "documentation": [
                "sort에서 주어진 headerId에 해당하는 header를 클릭했을때 참조하는 body의 columnId를 반환한다",
                "*@param* `headerId` &mdash; header의 ID",
                "*@return*  \nbody의 columnId"
            ]
        },
        {
            "label": "getColumnBackgroundColor(colIndex: String): String",
            "documentation": [
                "colIndex에 해당하는 열의 배경색을 반환합니다.",
                "*@param* `colIndex` &mdash; 배경색을 반환할 열 번호 혹은 컬럼 아이디",
                "*@return*  \n해당 열에 지정된 배경색"
            ]
        },
        {
            "label": "getColumnColor(colIndex: String): String",
            "documentation": [
                "colIndex에 해당하는 열의 글자색을 반환합니다.",
                "*@param* `colIndex` &mdash; 글자색을 반환할 열 번호 혹은 컬럼 아이디",
                "*@return*  \n행당 열에 글자색"
            ]
        },
        {
            "label": "getColumnDisabled(colIndex: String): Boolean",
            "documentation": [
                "colIndex에 해당하는 열에 disabled속성 값을 반환합니다.",
                "*@param* `colIndex` &mdash; disabled속성을 가져올 열 번호 혹은 컬럼 아이디",
                "*@return*  \n해당 열에 적용된 disabled속성값"
            ]
        },
        {
            "label": "getColumnDistinctDataArray(colIndex: Number): Object",
            "documentation": [
                "해당 colIndex에 존재하는 중복된 항목을 제거한 data를 배열을 정렬하여 보여줍니다.",
                "*@param* `colIndex` &mdash; ",
                "*@return*  \ndata를 저장한 배열"
            ]
        },
        {
            "label": "getColumnID(colIndex: Number): String",
            "documentation": [
                "그리드의 컬럼 index를 입력받아 그에 해당하는 컬럼의 id를 반환합니다.",
                "*@param* `colIndex` &mdash; 그리드 컬럼 index",
                "*@return*  \n그리드 컬럼의 id"
            ]
        },
        {
            "label": "getColumnIndex(colIndex: String): Number",
            "documentation": [
                "그리드의 컬럼 id를 입력받아 그에 해당하는 컬럼의 index를 반환합니다.",
                "*@param* `colIndex` &mdash; 그리드 컬럼 id",
                "*@return*  \n그리드 컬럼의 index"
            ]
        },
        {
            "label": "getColumnOrder(byName?: Boolean): Array",
            "documentation": [
                "현재 그리드의 컬럼 순서를 배열로 반환합니다. 기본적으로는 컬럼 index를 담은 배열을 반환하고, byName 값에 따라 컬럼 id를 담은 배열을 반환합니다.",
                "*@param* `byName` &mdash; 반환할 컬럼의 순서에서 컬럼 index 대신 컬럼 id를 사용할지 여부",
                "*@return*  \n현재 그리드의 컬럼 순서를 차례대로 담고 있는 배열"
            ]
        },
        {
            "label": "getColumnReadOnly(colIndex: String): Boolean",
            "documentation": [
                "colIndex에 해당하는 열에 적용된 readonly속성 값을 반환합니다.",
                "*@param* `colIndex` &mdash; readonly속성을 가져올 열 번호 혹은 컬럼 아이디",
                "*@return*  \n해당 열에 적용된 readonly속성값"
            ]
        },
        {
            "label": "getColumnType(colIndex: String): String",
            "documentation": [
                "colIndex에 해당하는 열의 inputType 속성값을 반환합니다.",
                "*@param* `colIndex` &mdash; 체크 박스 Column id 또는 index",
                "*@return*  \ncolIndex해당하는 컬럼의 타입"
            ]
        },
        {
            "label": "getColumnVisible(colIndex: Number): Boolean",
            "documentation": [
                "colIndex에 해당하는 열의 visible여부를 반환합니다.",
                "*@param* `colIndex` &mdash; visible여부를 반환할 colunm의 index",
                "*@return*  \ncolumn의 visible여부"
            ]
        },
        {
            "label": "getDataLength(): number",
            "documentation": [
                "현재 화면에 보이는 행의 수를 반환합니다. getRowCount()와 동일.",
                "*@return*  \n행의 수"
            ]
        },
        {
            "label": "getDataRow(rowIndex: Number): Object",
            "documentation": [
                "rowIndex에 해당하는 행의 데이터를 컬럼의 아이디를 키로 하는 해쉬 형태로 반환합니다.",
                "*@param* `rowIndex` &mdash; 데이터를 가져올 행 번호",
                "*@return*  \nrowIndex에 해당하는 행의 데이터의 배열"
            ]
        },
        {
            "label": "getDeletedData(): Object",
            "documentation": [
                "삭제 상태인 행들을 배열로 반환합니다.",
                "*@return*  \n삭제 상태인 행들의 데이터 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getDeletedIndex(): Object",
            "documentation": [
                "삭제 상태인 행의 번호를 배열로 반환합니다.",
                "*@return*  \n삭제 상태인 행의 번호의 배열"
            ]
        },
        {
            "label": "getDeletedXML(): XML Element",
            "documentation": [
                "삭제 상태인 행들의 데이터를 XML로 반환합니다.",
                "*@return*  \n삭제 상태인 행들의 데이터 XML"
            ]
        },
        {
            "label": "getDisabled(type: String, rowIndex: Number, colIndex: Number): Boolean",
            "documentation": [
                "type에 따라 disabled 속성을 반환합니다.",
                "*@param* `type` &mdash; disabled 속성을 가져올 type (grid, row, column, cell, all 총 5개)",
                "*@param* `rowIndex` &mdash; disabled속성을 가져올 행 번호",
                "*@param* `colIndex` &mdash; disabled속성을 가져올 열 번호",
                "*@return*  \n해당 type에 적용된 disabled속성값"
            ]
        },
        {
            "label": "getFocusedColumnID(): String",
            "documentation": [
                "포커스가 위치한 셀이 속한 column의 ID를 반환합니다.",
                "*@return*  \n포커스가 위치한 셀이 속한 column의 ID"
            ]
        },
        {
            "label": "getFocusedColumnIndex(): Number",
            "documentation": [
                "포커스가 위치한 셀의 colIndex를 반환합니다.",
                "*@return*  \n포커스가 위치한 셀의 colIndex"
            ]
        },
        {
            "label": "getFocusedRowIndex(): Number",
            "documentation": [
                "포커스가 위치한 셀의 rowIndex를 반환합니다.",
                "*@return*  \n포커스가 위치한 셀의 rowIndex"
            ]
        },
        {
            "label": "getFocusedRowStatus(): String",
            "documentation": [
                "포커스가 위치한 셀이 속한 row의 상태 값(문자)를 반환합니다.",
                "*@return*  \n포커스가 위치한 셀이 속한 row의 상태를 나타내는 문자 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")"
            ]
        },
        {
            "label": "getFooterData(footerId: string, display: string): string",
            "documentation": [
                "footerId에 해당하는 footer의 값을 반환합니다. inputType이 expression인 경우 계산된 값을 반환합니다.",
                "*@param* `footerId` &mdash; footer의 아이디 혹은 인덱스",
                "*@param* `display` &mdash; 값이 displayData인 경우에 foramt된 값 반환",
                "*@return*  \nfooterId에 해당하는 footer의 값"
            ]
        },
        {
            "label": "getFooterStyle(footerId: Number, style: String)",
            "documentation": [
                "그리드의 footerId에 해당하는 footer의 스타일 속성값을 가져옵니다.",
                "*@param* `footerId` &mdash; 그리드 컬럼의 인덱스",
                "*@param* `style` &mdash; 가져올 스타일 속성"
            ]
        },
        {
            "label": "getGridReadOnly(): Boolean",
            "documentation": [
                "그리드의 읽기 전용 속성을 반환합니다.",
                "*@return*  \n그리드의 읽기 전용 속성"
            ]
        },
        {
            "label": "getHeaderBackgroundColor(headerId: String): String",
            "documentation": [
                "그리드의 헤더 셀에 적용된 배경색 값을 가져옵니다.",
                "*@param* `headerId` &mdash; header cell의 id",
                "*@return*  \n그리드의 헤더 셀에 현재 적용된 배경색 값"
            ]
        },
        {
            "label": "getHeaderColor(headerId: String): String",
            "documentation": [
                "그리드의 헤더 셀에 적용된 글씨 색상값을 가져옵니다.",
                "*@param* `headerId` &mdash; header cell의 id",
                "*@return*  \n그리드의 헤더 셀에 적용된 글씨 색상값"
            ]
        },
        {
            "label": "getHeaderID(header: Number)",
            "documentation": [
                "header index로 header id를 찾아옵니다.",
                "*@param* `header` &mdash; index"
            ]
        },
        {
            "label": "getHeaderIndex(header: String)",
            "documentation": [
                "header id로 header index를 찾아옵니다.",
                "*@param* `header` &mdash; id"
            ]
        },
        {
            "label": "getHeaderPosition(headerId: String, propertyName: String): Number",
            "documentation": [
                "header의 위치 정보(top이나 left)를 반환합니다.",
                "*@param* `headerId` &mdash; header의 Id",
                "*@param* `propertyName` &mdash; 반환할 위치 정보의 이름('top' 또는 'left')",
                "*@return*  \nheader의 위치 정보(top이나 left)의 값"
            ]
        },
        {
            "label": "getHeaderSize(headerId: String, sizeName: String): Number",
            "documentation": [
                "header의 크기 정보(width나 height)를 반환합니다.",
                "*@param* `headerId` &mdash; header의 Id",
                "*@param* `sizeName` &mdash; 반환할 크기 정보의 이름('width' 또는 'height')",
                "*@return*  \nheader의 크기 정보(width나 height)의 값"
            ]
        },
        {
            "label": "getHeaderValue(headerId: String): String",
            "documentation": [
                "헤더의 값을 반환합니다. 안 쪽에 nobr태그가 있는 경우에는 text부분까지 찾아서 반환합니다.",
                "*@param* `headerId` &mdash; header의 아이디",
                "*@return*  \nheader가 가지고 있는 value"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getInsertedData(): Object",
            "documentation": [
                "삽입 상태인 행들의 데이터를 배열로 반환합니다.",
                "*@return*  \n삽입 상태인 행들의 데이터 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getInsertedIndex(): Object",
            "documentation": [
                "삽입 상태인 행의 번호를 배열로 반환합니다.",
                "*@return*  \n삽입 상태인 행의 번호의 배열"
            ]
        },
        {
            "label": "getInsertedXML(): XML Element",
            "documentation": [
                "삽입 상태인 행들의 데이터를 XML로 반환합니다.",
                "*@return*  \n삽입 상태인 행들의 데이터 XML"
            ]
        },
        {
            "label": "getMatchedColumnData(matchCol: Number, dataValue: String, targetCol: Number, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다.",
                "*@param* `matchCol` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `targetCol` &mdash; 데이터를 가져올 열번호",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \ntargetCol에 해당하는 열의 값을 가지고 있는 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getMatchedData(colIndex: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들의 data를 배열로 반환합니다.",
                "*@param* `colIndex` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안의 data를 가지고 있는 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getMatchedIndex(colIndex: String, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들의 index를 반환합니다.",
                "*@param* `colIndex` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 index를 가지고 있는 배열"
            ]
        },
        {
            "label": "getMatchedXML(colIndex: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Xml element",
            "documentation": [
                "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들의 data를 XML로 반환합니다.",
                "*@param* `colIndex` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안의 data를 가지고 있는 XML"
            ]
        },
        {
            "label": "getModifiedData(): Object",
            "documentation": [
                "변경(삽입, 갱신, 삭제) 행들의 데이터를 배열로 반환합니다.",
                "*@return*  \n변경(삽입, 갱신, 삭제) 행들의 데이터 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getModifiedIndex(): Object",
            "documentation": [
                "추가나 삭제 상태인 행의 번호를 배열로 반환합니다.",
                "*@return*  \n추가나 삭제 상태인 행의 번호의 배열"
            ]
        },
        {
            "label": "getModifiedXML(): Xml Element",
            "documentation": [
                "변경(삽입, 갱신, 삭제) 행들의 데이터를 XML로 반환합니다.",
                "*@return*  \n변경(삽입, 갱신, 삭제) 행들의 데이터 XML"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getOpenStatus(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 행의 drilldown이 열려있는지 닫혀있는지 여부를 boolean으로 반환합니다.",
                "*@param* `rowIndex` &mdash; openStatus를 가져오려는 행의 번호"
            ]
        },
        {
            "label": "getOriginalCellData(rowIndex: Number, colIndex: String): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 데이터를 반환합니다.",
                "*@param* `rowIndex` &mdash; 셀의 초기 행 번호",
                "*@param* `colIndex` &mdash; 셀의 초기 컬럼 번호 혹은 컬럼의 아이디",
                "*@return*  \nrowIndex와 colIndex에 해당하는 셀의 데이터"
            ]
        },
        {
            "label": "getOverflowX(): String",
            "documentation": [
                "그리드의 overflowX의 설정을 반환합니다.",
                "*@return*  \n현재 그리드의 overflowX의 설정"
            ]
        },
        {
            "label": "getOverflowY(): String",
            "documentation": [
                "그리드의 overflowY의 설정을 반환합니다.",
                "*@return*  \n현재 그리드의 overflowY의 설정"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getRangeData(from: Number, to: Number): Object",
            "documentation": [
                "from부터 to-1 까지의 범위의 행의 data를 배열로 반환합니다.",
                "*@param* `from` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `to` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안의 data를 가지고 있는 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getRangeXML(from: Number, to: Number): Xml Element",
            "documentation": [
                "from부터 to-1 까지의 범위의 행의 data를 xml로 반환합니다.",
                "*@param* `from` &mdash; 데이터를 가져오는 범위의 시작 행 번호",
                "*@param* `to` &mdash; 데이터를 가져오는 범위의 끝 행 번호",
                "*@return*  \nrowIndex에 해당하는 행의 xml데이터"
            ]
        },
        {
            "label": "getReadOnly(type: String, rowIndex: Number, colIndex: Number): Boolean",
            "documentation": [
                "type에 따라 readOnly 속성을 반환합니다.",
                "*@param* `type` &mdash; readOnly 속성을 가져올 type (grid, row, column, cell, all 총 5개)",
                "*@param* `rowIndex` &mdash; readOnly속성을 가져올 행 번호",
                "*@param* `colIndex` &mdash; readOnly속성을 가져올 열 번호",
                "*@return*  \n해당 type에 적용된 readOnly속성값"
            ]
        },
        {
            "label": "getRealRowIndex(rowIndex: Number)",
            "documentation": [
                "rowIndex에 대한 실제 데이터의 rowIndex를 리턴한다.",
                "*@param* `rowIndex` &mdash; 현재 표시되고 있는 셀의 행 번호"
            ]
        },
        {
            "label": "getRowBackgroundColor(rowIndex: Number): String",
            "documentation": [
                "rowIndex에 해당하는 행의 배경색을 반환합니다.",
                "*@param* `rowIndex` &mdash; 배경색을 반환할 행 번호",
                "*@return*  \n해당 행에 지정된 배경색"
            ]
        },
        {
            "label": "getRowColor(rowIndex: Number): String",
            "documentation": [
                "rowIndex에 해당하는 행의 글자색을 반환합니다.",
                "*@param* `rowIndex` &mdash; 글자색을 반환할 행 번호",
                "*@return*  \n행당 행의 글자색"
            ]
        },
        {
            "label": "getRowCount(): Number",
            "documentation": [
                "그리드의 데이터 row의 건수를 반환합니다.",
                "*@return*  \n그리드의 데이터 row의 건수"
            ]
        },
        {
            "label": "getRowData(rowIndex: Number, display?: String): Object",
            "documentation": [
                "rowIndex에 해당하는 행의 데이터를 배열로 반환합니다.",
                "*@param* `rowIndex` &mdash; 데이터를 가져올 행 번호",
                "*@param* `display` &mdash; 값이 displayData인 경우에 화면에 보이는 값으로 반환",
                "*@return*  \nrowIndex에 해당하는 행의 데이터의 배열"
            ]
        },
        {
            "label": "getRowDisabled(rowIndex: Number): Boolean",
            "documentation": [
                "rowIndex에 해당하는 행에 적용된 disabled속성 값을 반환합니다.",
                "*@param* `rowIndex` &mdash; disabled속성을 가져올 행 번호",
                "*@return*  \n해당 행에 적용된 disabled속성값"
            ]
        },
        {
            "label": "getRowIndexByStatus(statusStr: String): Object",
            "documentation": [
                "statusStr과 상태가 일치하는 행의 번호를 배열로 반환합니다.",
                "*@param* `statusStr` &mdash; 상태가 일치하는 행을 찾기 위한 문자열",
                "*@return*  \nstatusStr과 상태가 일치하는 행의 번호의 배열"
            ]
        },
        {
            "label": "getRowReadOnly(rowIndex: Number): Boolean",
            "documentation": [
                "rowIndex에 해당하는 행에 적용된 readonly속성 값을 반환합니다.",
                "*@param* `rowIndex` &mdash; readonly속성을 가져올 행 번호",
                "*@return*  \n해당 행에 적용된 readonly속성값"
            ]
        },
        {
            "label": "getRowStatus(rowIndex: Number): String",
            "documentation": [
                "rowIndex에 해당하는 행의 상태를 반환합니다. (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")",
                "*@param* `rowIndex` &mdash; 상태를 반환할 행 번호",
                "*@return*  \n행의 상태를 나타내는 문자 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")"
            ]
        },
        {
            "label": "getRowStatusValue(rowIndex: Number): Number",
            "documentation": [
                "rowIndex에 해당하는 행의 상태를 숫자로 반환합니다. (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)",
                "*@param* `rowIndex` &mdash; 상태를 반환할 행 번호",
                "*@return*  \n행의 상태를 나타내는 숫자 (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)"
            ]
        },
        {
            "label": "getRowXML(rowIndex: Number): XML Element",
            "documentation": [
                "rowIndex에 해당하는 행의 data를 XML로 반환합니다.",
                "*@param* `rowIndex` &mdash; 데이터를 가져올 행 번호",
                "*@return*  \n행의 XML 데이터"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getTopRowIndex(): Number",
            "documentation": [
                "현재 그리드에 그려진 최상단 row의 rowIndex를 반환합니다. 그려진 row가 없으면 -1을 반환합니다.",
                "*@return*  \n최상단 row의 rowIndex"
            ]
        },
        {
            "label": "getTotalCol(): Number",
            "documentation": [
                "컬럼의 개수를 반환 한다.",
                "*@return*  \n컬럼의 개수"
            ]
        },
        {
            "label": "getTotalRow(): Number",
            "documentation": [
                "행의 개수를 반환 한다.",
                "*@return*  \n행의 개수"
            ]
        },
        {
            "label": "getUncheckedData(colIndex: Number): Object",
            "documentation": [
                "colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 XML로 반환합니다.",
                "*@param* `colIndex` &mdash; ckeckbox여부를 검사할 열번호 혹은 컬럼 아이디",
                "*@return*  \ndata를 저장한 배열"
            ]
        },
        {
            "label": "getUncheckedIndex(colIndex: Number): Object",
            "documentation": [
                "colIndex에 해당하는 열의 radio/checkbox가 uncheck된 행의 Index를 배열로 반환합니다.",
                "*@param* `colIndex` &mdash; ckeckbox여부를 검사할 열번호 혹은 컬럼 아이디",
                "*@return*  \n행번호를 저장한 배열"
            ]
        },
        {
            "label": "getUncheckedXML(colIndex: Number): Xml element",
            "documentation": [
                "colIndex에 해당하는 열의 radio/checkbox가 uncheck된 행의 data를 XML로 반환합니다.",
                "*@param* `colIndex` &mdash; ckeckbox여부를 검사할 열번호 혹은 컬럼 아이디",
                "*@return*  \ndata를 저장한 XML"
            ]
        },
        {
            "label": "getUnmatchedColumnData(matchCol: Number, dataValue: String, targetCol: Number, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다.",
                "*@param* `matchCol` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `targetCol` &mdash; 데이터를 가져올 열번호",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \ntargetCol에 해당하는 열의 값을 가지고 있는 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getUnmatchedData(colIndex: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들의 data를 배열로 반환합니다.",
                "*@param* `colIndex` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 data를 가지고 있는 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getUnmatchedIndex(colIndex: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들의 index를 배열로 반환합니다.",
                "*@param* `colIndex` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 index를 가지고 있는 배열"
            ]
        },
        {
            "label": "getUnmatchedXML(colIndex: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Xml element",
            "documentation": [
                "stRowIndex부터 lastRowIndex-1 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들의 data를 Xml로 반환합니다.",
                "*@param* `colIndex` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 index를 가지고 있는 Xml"
            ]
        },
        {
            "label": "getUpdatedData(): Object",
            "documentation": [
                "갱신 상태인 행들의 데이터를 배열로 반환합니다.",
                "*@return*  \n갱신 상태인 행들의 데이터 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getUpdatedIndex(): Object",
            "documentation": [
                "갱신 상태인 행의 번호를 배열로 반환합니다.",
                "*@return*  \n갱신 상태인 행의 번호의 배열"
            ]
        },
        {
            "label": "getUpdatedXML(): Xml Element",
            "documentation": [
                "갱신 상태인 행들의 데이터를 XML로 반환합니다.",
                "*@return*  \n갱신 상태인 행들의 데이터 XML"
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getVisibleColData(colIndex: Number): Object",
            "documentation": [
                "colIndex에 해당하는 열의 화면에 보이는(filter나 sort처리된) 데이터를 배열로 반환합니다.",
                "*@param* `colIndex` &mdash; 데이터를 가져올 열 번호 혹은 컬럼 아이디",
                "*@return*  \ncolIndex에 해당하는 열의 화면에 보이는 데이터의 배열"
            ]
        },
        {
            "label": "getVisibleRowNum(): Number",
            "documentation": [
                "현재 그리드에 그려진 row의 수를 반환합니다. (subtotal은 제외)",
                "*@return*  \n현재 그려진 row의 수"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "initGrid()",
            "documentation": [
                "실행중인 그리드를 초기화 합니다. 전체 데이터 삭제 후, 필터처리, 컬럼 기본정보(selectbox의 nodeset 등)를 초기화 합니다."
            ]
        },
        {
            "label": "insertRow(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 행에 새로운 행을 삽입합니다.",
                "*@param* `rowIndex` &mdash; 행을 새로 삽입할 행번호"
            ]
        },
        {
            "label": "isEditing(): Boolean",
            "documentation": [
                "그리드가 현재 편집중 인지 여부를 반환합니다.",
                "*@return*  \n그리드가 현재 편집중 인지 여부"
            ]
        },
        {
            "label": "modifyAllStatus(status: String)",
            "documentation": [
                "모든 행의 상태를 status으로 변경 합니다.",
                "*@param* `status` &mdash; 변경할 상태 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\"). status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음."
            ]
        },
        {
            "label": "modifyCheckedStatus(col: String, status: String)",
            "documentation": [
                "col에 해당하는 열의 checkbox가 check된 행의 상태를 상태로 변경합니다.",
                "*@param* `col` &mdash; ckeckbox를 검사할 열 번호 혹은 컬럼 아이디",
                "*@param* `status` &mdash; 변결할 상태"
            ]
        },
        {
            "label": "modifyMatchedStatus(colIndex: Number, data: String, status: String)",
            "documentation": [
                "col에 해당하는 열의 값과  data가 일치된 행의 상태를 status로 변경합니다.",
                "*@param* `colIndex` &mdash; 검사할 열 번호",
                "*@param* `data` &mdash; 일치하는지를 검사할 값",
                "*@param* `status` &mdash; 변경할 상태. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음."
            ]
        },
        {
            "label": "modifyRangeStatus(from: Number, to: Number, status: String)",
            "documentation": [
                "from부터 to까지의 범위의 행들의 상태를 param으로 입력받은 상태로 변경 합니다.",
                "*@param* `from` &mdash; 변경할 범위의 시작 행번호",
                "*@param* `to` &mdash; 변경할 범위의  끝 행호",
                "*@param* `status` &mdash; 변경할 상태. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음."
            ]
        },
        {
            "label": "modifyRowStatus(rowIndex: Number, status: String)",
            "documentation": [
                "rowIndex에 해당하는 행의 상태를 param으로 입력받은 상태로 변경 합니다.",
                "*@param* `rowIndex` &mdash; 상태를 변경할 행 번호",
                "*@param* `status` &mdash; 변경할 상태. status값 변경으로 데이터를 조작할 수 없는 것이 원칙이므로 \"E\"는 인자값으로 사용할 수 없음."
            ]
        },
        {
            "label": "modifyUncheckStatus(col: String, status: String)",
            "documentation": [
                "col에 해당하는 열의 checkbox가 uncheck된 행의 상태를 status로 변경합니다.",
                "*@param* `col` &mdash; ckeckbox를 검사할 열 번호 혹은 컬럼 아이디",
                "*@param* `status` &mdash; 변결할 상태"
            ]
        },
        {
            "label": "multisort(options: Object)",
            "documentation": [
                "option에 따라서 여러개의 열을 동시에 정렬해줍니다.",
                "*@param* `options` &mdash; 정렬에 대한 옵션을 JSON형식으로 가지고 있는 object"
            ]
        },
        {
            "label": "readCSV(options: Object)",
            "documentation": [
                "csv 파일을 읽어 그리드의 데이터를 설정합니다. (JDK 1.5이상에서 사용 가능)",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 csv 업로드 옵션"
            ]
        },
        {
            "label": "redrawColumn(colIndex: String, valid?: Boolean)",
            "documentation": [
                "colIndex에 해당하는 열을 다시 그려줍니다.",
                "*@param* `colIndex` &mdash; 셀의 열의 Column id 또는 index",
                "*@param* `valid` &mdash; cell의 inputtype이 select인 경우 selectbox와 cell의 value의 적합성에 따라 데이터를 처리 유무(default:true)"
            ]
        },
        {
            "label": "reform()",
            "documentation": [
                "그리드의 originalData를 현재의 데이터로 바꿔주고 모든 행의 상태를 초기화합니다."
            ]
        },
        {
            "label": "refreshColumnItemset(colIndex: String)",
            "documentation": [
                "colIndex에 해당하는 열의 itemset을 갱신합니다. inputType이 select인 경우에만 동작합니다.",
                "*@param* `colIndex` &mdash; 갱신할 column의 id 또는 index"
            ]
        },
        {
            "label": "removeAll(): Object",
            "documentation": [
                "그리드의 모든 행을 삭제하고 가지고 있던 data를 반환합니다.",
                "*@return*  \n삭제한 행들이 가지고 있던 data"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "removeColumnFilter(colIndex: Number)",
            "documentation": [
                "colIndex에 해당하는 열에 적용된 filter를 삭제합니다.",
                "*@param* `colIndex` &mdash; filter를 삭제할 열 번호 혹은 컬럼 아이디"
            ]
        },
        {
            "label": "removeColumnFilterAll()",
            "documentation": [
                "모든 열에 적용된 filter를 삭제합니다."
            ]
        },
        {
            "label": "removeFocusedCell()",
            "documentation": [
                "그리드의 셀에 지정되어 있는 모든 포커스를 제거한다"
            ]
        },
        {
            "label": "removeRange(startIdx: Number, endIdx: Number): Object",
            "documentation": [
                "startIdx와 endIdx사이의 그리드의 모든 행을 삭제하고 가지고 있던 data를 반환합니다.",
                "*@param* `startIdx` &mdash; 데이터를 삭제할 범위의 시작 행",
                "*@param* `endIdx` &mdash; 데이터를 삭제할 범위의 끝 행",
                "*@return*  \n삭제된 범위 사이의 데이터 2차원 배열"
            ]
        },
        {
            "label": "removeRow(rowIndex: Number): Object",
            "documentation": [
                "rowIndex에 해당하는 행을 삭제하고 가지고 있던 data를 반환합니다.",
                "*@param* `rowIndex` &mdash; 삭제할 행 번호",
                "*@return*  \n삭제한 행이 가지고 있던 data배열"
            ]
        },
        {
            "label": "removeRows(rowIndexArr: Object): Object",
            "documentation": [
                "rowIndexArr배열에 저장된 index에 해당하는 행들을 삭제하고 가지고 있던 data들을 반환합니다.",
                "*@param* `rowIndexArr` &mdash; 삭제할 행들의 번호를 저장하는 배열",
                "*@return*  \n삭제한 행들이 가지고 있던 data(2차원 배열)"
            ]
        },
        {
            "label": "rowMoveDown(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 행을 하나 아래로 내려줍니다.",
                "*@param* `rowIndex` &mdash; 하나 아래로 내려줄 행 번호"
            ]
        },
        {
            "label": "rowMoveUp(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 행을 하나 위로 올려줍니다.",
                "*@param* `rowIndex` &mdash; 하나 위로 올려줄 행 번호"
            ]
        },
        {
            "label": "saveCSV(options: Object)",
            "documentation": [
                "그리드의 데이터를 CSV 파일로 저장합니다. (JDK 1.5이상에서 사용 가능)",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 csv 다운로드 옵션"
            ]
        },
        {
            "label": "setAutoFit(options?: Object)",
            "documentation": [
                "그리드의 사이즈에 맞게 컬럼의 크기를 변경하여 꽉차게 그려줍니다. autoFit옵션이 lastColumn경우 마지막 컬럼의 폭만 변경이 되고, allColumn이면 전체 컬럼을 폭을 균일하게 변경합니다.",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 setAutoFit 옵션"
            ]
        },
        {
            "label": "setBottomRowIndex(bottomRowIndex: Number)",
            "documentation": [
                "그리드의 세로 스크롤 위치를 이동하여 최하단에 bottomRowIndex 해당하는 row가 위치하도록 조정합니다.",
                "*@param* `bottomRowIndex` &mdash; 최하단에 위치할 rowIndex"
            ]
        },
        {
            "label": "setCaption(htmlStr: String)",
            "documentation": [
                "그리드 테이블의 caption의 innerHTML 값을 설정합니다.",
                "*@param* `htmlStr` &mdash; caption의 innerHTML 값으로 설정될 값"
            ]
        },
        {
            "label": "setCellBackgroundColor(rowIndex: Number, colIndex: String, color: String)",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀에 param으로 들어온 color를 배경색으로 설정합니다.",
                "*@param* `rowIndex` &mdash; 배경색을 설정할 행 번호",
                "*@param* `colIndex` &mdash; 배경색을 설정할 열 번호 혹은 컬럼 아이디",
                "*@param* `color` &mdash; 배경색으로 설정할 색"
            ]
        },
        {
            "label": "setCellChecked(rowIndex: Number, colIndex: String, dataValue: Boolean)",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀이 checkbox/radio인 경우 dataValue가 true이면 체크 false이면 uncheck해 줍니다.",
                "*@param* `rowIndex` &mdash; 셀의 행의 인덱스",
                "*@param* `colIndex` &mdash; 셀의 열의 Column id 또는 index",
                "*@param* `dataValue` &mdash; 셀의 체크 여부"
            ]
        },
        {
            "label": "setCellColor(rowIndex: Number, colIndex: String, color: String)",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀에 param으로 들어온 color를 글자색으로 설정합니다.",
                "*@param* `rowIndex` &mdash; 글자색을 설정할 행 번호",
                "*@param* `colIndex` &mdash; 글자색을 설정할 열 번호 혹은 컬럼 아이디",
                "*@param* `color` &mdash; 글자색으로 설정할 색"
            ]
        },
        {
            "label": "setCellData(rowIndex: Number, colIndex: String, data: String)",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 값을 data로 바꿔줍니다.",
                "*@param* `rowIndex` &mdash; 셀의 행 번호",
                "*@param* `colIndex` &mdash; 셀의 컬럼 번호 혹은 컬럼의 아이디",
                "*@param* `data` &mdash; 셀에 넣어줄 데이터"
            ]
        },
        {
            "label": "setCellDisabled(rowIndex: Number, colIndex: String, disabled: Boolean)",
            "documentation": [
                "colIndex와 rowIndex에 해당하는 셀의 disabled속성 값을 param으로 들어온 disabled값으로 설정합니다.",
                "*@param* `rowIndex` &mdash; disabled 속성을 설정할 행 번호",
                "*@param* `colIndex` &mdash; disabled 속성을 설정할 열 번호 혹은 컬럼 아이디",
                "*@param* `disabled` &mdash; disabled 속성에 적용할 값"
            ]
        },
        {
            "label": "setCellReadOnly(rowIndex: Number, colIndex: String, readOnly: Boolean)",
            "documentation": [
                "colIndex와 rowIndex에 해당하는 셀의 readonly속성 값을 param으로 들어온 readOnly값으로 설정합니다.",
                "*@param* `rowIndex` &mdash; readonly 속성을 설정할 행 번호",
                "*@param* `colIndex` &mdash; readonly 속성을 설정할 열 번호 혹은 컬럼 아이디",
                "*@param* `readOnly` &mdash; readonly 속성에 적용할 값"
            ]
        },
        {
            "label": "setColumnBackgroundColor(colIndex: String, color: String)",
            "documentation": [
                "colIndex에 해당하는 열에 param으로 들어온 color를 배경색으로 설정합니다.",
                "*@param* `colIndex` &mdash; 배경색을 설정할 열 번호 혹은 컬럼 아이디",
                "*@param* `color` &mdash; 배경색으로 설정할 색"
            ]
        },
        {
            "label": "setColumnColor(colIndex: String, color: String)",
            "documentation": [
                "colIndex에 해당하는 행에 param으로 들어온 color를 글자색으로 설정합니다.",
                "*@param* `colIndex` &mdash; 글자색을 설정할 열 번호 혹은 컬럼 아이디",
                "*@param* `color` &mdash; 글자색으로 설정할 색"
            ]
        },
        {
            "label": "setColumnDisabled(colIndex: String, disabled: Boolean)",
            "documentation": [
                "colIndex에 해당하는 열에 disabled속성을 param으로 들어온 disabled로 설정합니다.",
                "*@param* `colIndex` &mdash; disabled속성을 설정할 열 번호 혹은 컬럼 아이디",
                "*@param* `disabled` &mdash; disabled속성에 적용할 값"
            ]
        },
        {
            "label": "setColumnFilter(filterOptions: Object)",
            "documentation": [
                "colIndex에 해당하는 열에 filter를 적용합니다.",
                "*@param* `filterOptions` &mdash; filter를 적용할 옵션 "
            ]
        },
        {
            "label": "setColumnOrder(columnOrderArray: Array)",
            "documentation": [
                "주어진 array를 기준으로 하여 그리드의 컬럼 순서를 재 설정합니다.",
                "*@param* `columnOrderArray` &mdash; 컬럼의 순서를 차례로 담은 배열(컬럼 index와 id 모두 사용 가능)"
            ]
        },
        {
            "label": "setColumnReadOnly(colIndex: String, readOnly: Boolean)",
            "documentation": [
                "colIndex에 해당하는 열에 readonly속성을 param으로 들어온 readonly로 설정합니다.",
                "*@param* `colIndex` &mdash; readonly속성을 설정할 열 번호 혹은 컬럼 아이디",
                "*@param* `readOnly` &mdash; readonly속성에 적용할 값"
            ]
        },
        {
            "label": "setColumnVisible(colIndex: String, colVisible: Boolean)",
            "documentation": [
                "주어진 column의 hidden 여부를 설정한다",
                "*@param* `colIndex` &mdash; 그리드의 hidden 여부를 설정한 column의 ID",
                "*@param* `colVisible` &mdash; 해당 column을 보일지 여부(true인 경우 해당 column을 표시하고 false인 경우는 숨김)"
            ]
        },
        {
            "label": "setColumnWidth(colIndex: String, size: Number)",
            "documentation": [
                "지정한 컬럼의 폭을 변경합니다.",
                "*@param* `colIndex` &mdash; 폭을 변경할 column의 index",
                "*@param* `size` &mdash; 변경할 컬럼의 폭"
            ]
        },
        {
            "label": "setData(arr: String, append?: Boolean, columnArr?: String)",
            "documentation": [
                "1차원 Array형태의 String를 Grid에 추가합니다. (행의 상태는 초기상태인 \"R\"로 변경됩니다. 데이터의 순서를 지정해주는 columnArr를 사용할 경우, append는 항상 넣어줘야합니다.)",
                "*@param* `arr` &mdash; 그리드에 넣을 데이터 스트링(소스 안쪽에서 array로 변환)",
                "*@param* `append` &mdash; 이어쓰기 여부, false이면 기존 데이터삭제 [true/false] 생략시 false. [생략가능 단, columnArr를 사용할 경우, 생략불가]",
                "*@param* `columnArr` &mdash; 컬럼 id 스트링(소스 안쪽에서 array로 변환, 해당 id의 순서로 그리드 데이터가 생성됩니다.)"
            ]
        },
        {
            "label": "setDisabled(type: String, rowIndex: Number, colIndex: Number, disabled: Boolean)",
            "documentation": [
                "해당하는 type의 disabled 속성 값을 param으로 들어온 disabled값으로 설정합니다.",
                "*@param* `type` &mdash; disabled 속성을 설정할 type (grid, row, column, cell 총 4개)",
                "*@param* `rowIndex` &mdash; disabled 속성을 설정할 행 번호",
                "*@param* `colIndex` &mdash; disabled 속성을 설정할 열 번호",
                "*@param* `disabled` &mdash; disabled 속성에 적용할 값"
            ]
        },
        {
            "label": "setDisplayFormat(colIndex: Number, displayFormat: String)",
            "documentation": [
                "그리드의 컬럼에 포맷을 설정합니다.",
                "*@param* `colIndex` &mdash; 그리드 컬럼의 인덱스",
                "*@param* `displayFormat` &mdash; 컬럼에 적용할 포맷"
            ]
        },
        {
            "label": "setDisplayFormatter(colIndex: Number, displayFormatter: String)",
            "documentation": [
                "그리드의 컬럼에 포맷터 함수를 설정합니다.",
                "*@param* `colIndex` &mdash; 그리드 컬럼의 인덱스",
                "*@param* `displayFormatter` &mdash; 컬럼에 적용할 포맷터 함수"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setFixedColumn(fixedColumn: Number)",
            "documentation": [
                "고정된 컬럼 영역을 설정합니다.",
                "*@param* `fixedColumn` &mdash; 맨 왼쪽부터 시작해서 영역을 고정시킬 컬럼들의 수"
            ]
        },
        {
            "label": "setFocusedCell(rowIndex: Number, colIndex: Number, editMode: Boolean)",
            "documentation": [
                "그리드의 특정 셀로 포커스를 이동한다",
                "*@param* `rowIndex` &mdash; 포커스를 이동한 셀의 rowIndex",
                "*@param* `colIndex` &mdash; 포커스를 이동한 셀의 colIndex",
                "*@param* `editMode` &mdash; 포커스를 이동한 후에 editMode로 전환할지 여부"
            ]
        },
        {
            "label": "setFocusedHeaderObj(headerId: String)",
            "documentation": [
                "그리드 헤더가 가진 object로 포커스를 이동한다.(selectbox, checkbox, input인 경우)",
                "*@param* `headerId` &mdash; header의 아이디"
            ]
        },
        {
            "label": "setFooterCaption(htmlStr: String)",
            "documentation": [
                "그리드 footer 테이블의 caption의 innerHTML 값을 설정합니다.",
                "*@param* `htmlStr` &mdash; caption의 innerHTML 값으로 설정될 값"
            ]
        },
        {
            "label": "setFooterData(footerId: String, data: String)",
            "documentation": [
                "footerId에 해당하는 footer의 inputType이 text인 경우에 data의 값을 footer에 넣어줍니다.",
                "*@param* `footerId` &mdash; footer의 아이디 혹은 인덱스",
                "*@param* `data` &mdash; footer에 넣을 값"
            ]
        },
        {
            "label": "setFooterDisplayFormat(footerId: Number, displayFormat: String)",
            "documentation": [
                "그리드의 footerId에 해당하는 footer의 포맷을 설정합니다.",
                "*@param* `footerId` &mdash; 그리드 컬럼의 인덱스",
                "*@param* `displayFormat` &mdash; 컬럼에 적용할 포맷"
            ]
        },
        {
            "label": "setFooterStyle(footerId: String, style: String, value: String)",
            "documentation": [
                "그리드의 footerId에 해당하는 footer cell의 스타일 속성을 설정합니다.",
                "*@param* `footerId` &mdash; 그리드 footer cell의 id, 혹은 index(\"$rowNum\", \"$rowStatus\"로 rowNum, rowStatus 셀 지정 가능)",
                "*@param* `style` &mdash; 적용할 스타일 속성",
                "*@param* `value` &mdash; 적용할 스타일 속성값"
            ]
        },
        {
            "label": "setFooterValue(footerId: string, data: string)",
            "documentation": [
                "footerId에 해당하는 footer의 inputType이 text인 경우에 data의 값을 footer에 넣어줍니다.",
                "*@param* `footerId` &mdash; footer의 아이디 혹은 인덱스",
                "*@param* `data` &mdash; footer에 넣을 값"
            ]
        },
        {
            "label": "setGridHeight(height: Number)",
            "documentation": [
                "그리드의 높이를 설정합니다.",
                "*@param* `height` &mdash; 변경할 그리드의 높이"
            ]
        },
        {
            "label": "setGridReadOnly(readOnly: Boolean)",
            "documentation": [
                "그리드의 읽기 전용 속성을 설정합니다.",
                "*@param* `readOnly` &mdash; 그리드의 읽기 전용 속성"
            ]
        },
        {
            "label": "setGridSize(width: Number, height: Number)",
            "documentation": [
                "그리드의 높이와 폭을 설정합니다.",
                "*@param* `width` &mdash; 변경할 그리드의 폭",
                "*@param* `height` &mdash; 변경할 그리드의 높이"
            ]
        },
        {
            "label": "setGridWidth(width: Number)",
            "documentation": [
                "그리드의 폭을 설정합니다.",
                "*@param* `width` &mdash; 변경할 그리드의 폭"
            ]
        },
        {
            "label": "setHeaderBackgroundColor(headerId: String, color: String)",
            "documentation": [
                "그리드의 헤더 셀의 배경 색상을 지정합니다.",
                "*@param* `headerId` &mdash; header cell의 id",
                "*@param* `color` &mdash; background에 지정할 색상"
            ]
        },
        {
            "label": "setHeaderColor(headerId: String, color: String)",
            "documentation": [
                "그리드의 헤더 셀의 글씨 색상을 지정합니다.",
                "*@param* `headerId` &mdash; header cell의 id",
                "*@param* `color` &mdash; 글씨 색상"
            ]
        },
        {
            "label": "setHeaderDisabled(headerId: String, disabled: Boolean)",
            "documentation": [
                "disabled가 true이면 headerId에 해당하는 헤더를 disalbled시켜줍니다. false이면 disabled을 풀어줍니다.",
                "*@param* `headerId` &mdash; header의 아이디",
                "*@param* `disabled` &mdash; header의 disabled 여부"
            ]
        },
        {
            "label": "setHeaderHide(hide: Boolean)",
            "documentation": [
                "hide가 true이면 header를 숨기고 false이면 나타나도록 합니다.",
                "*@param* `hide` &mdash; header의 숨김 여부"
            ]
        },
        {
            "label": "setHeaderNodeSet(headerId: String, nodeset?: String, label?: String, value?: String)",
            "documentation": [
                "headInputType이 select일 경우, headerId에 해당 하는 header 컬럼 selectbox itemset의 Model 바인딩 ref를 셋팅합니다.",
                "*@param* `headerId` &mdash; header의 아이디",
                "*@param* `nodeset` &mdash; 변경하려는 nodeset의 xpath 문자열",
                "*@param* `label` &mdash; 변경하려는 label의 xpath 문자열",
                "*@param* `value` &mdash; 변경하려는 value의 xpath 문자열"
            ]
        },
        {
            "label": "setHeaderSortImage(headerId: String, order: Number, sortOrd?: Number)",
            "documentation": [
                "header에 나타나는 sort 이미지를 조절한다",
                "*@param* `headerId` &mdash; 이미지를 조절한 header의 ID",
                "*@param* `order` &mdash; sort 순서를 나타내는 숫자 값(오름차순이면 1, 내림차순이면 -1, sort를 하지 않는 상태이면 0)",
                "*@param* `sortOrd` &mdash; multisort의 경우 sort의 우선순위를 나타내는 숫자 값. 하위호환성을 위해 이 값이 설정되어있지않으면 기본값은 0"
            ]
        },
        {
            "label": "setHeaderStyle(headerId: String, style: String, value: String)",
            "documentation": [
                "그리드의 headerId에 해당하는 header cell의 스타일 속성을 설정합니다.",
                "*@param* `headerId` &mdash; 그리드 header cell의 id, 혹은 index(\"$rowNum\", \"$rowStatus\"로 rowNum, rowStatus 셀 지정 가능)",
                "*@param* `style` &mdash; 적용할 스타일 속성",
                "*@param* `value` &mdash; 적용할 스타일 속성값"
            ]
        },
        {
            "label": "setHeaderValue(headerId: String, value: String)",
            "documentation": [
                "headerId에 해당 하는 header 컬럼의 value를 설정 합니다. 설정된 value로 header 컬럼이 출력 됩니다.",
                "*@param* `headerId` &mdash; header의 아이디",
                "*@param* `value` &mdash; header 컬럼에 출력된 문자열"
            ]
        },
        {
            "label": "setJSON(jsonData: Object, append?: String)",
            "documentation": [
                "JSON Data를 Grid에 넣거나 추가합니다. (행의 상태는 초기상태인 \"R\"로 변경됩니다.)",
                "*@param* `jsonData` &mdash; 객체를 담고 있는 array형태의 JSON 객체",
                "*@param* `append` &mdash; 이어쓰기 여부, false이면 기존 데이터삭제 [true/false] 생략시 false. [생략가능]"
            ]
        },
        {
            "label": "setNoResultMessage(message: String)",
            "documentation": [
                "데이터 없음을 표시하기한 문자열을 설정합니다.",
                "*@param* `message` &mdash; 데이터 없을 때 표시할 문자열"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(type: String, rowIndex: Number, colIndex: Number, readOnly: Boolean)",
            "documentation": [
                "해당하는 type의 readOnly 속성 값을 param으로 들어온 readOnly값으로 설정합니다.",
                "*@param* `type` &mdash; readOnly 속성을 설정할 type (grid, row, column, cell 총 4개)",
                "*@param* `rowIndex` &mdash; readOnly속성을 설정할 행 번호",
                "*@param* `colIndex` &mdash; readOnly속성을 설정할 열 번호",
                "*@param* `readOnly` &mdash; readOnly 속성에 적용할 값"
            ]
        },
        {
            "label": "setRowBackgroundColor(rowIndex: Number, color: String)",
            "documentation": [
                "rowIndex에 해당하는 행에 param으로 들어온 color를 배경색으로 설정합니다.",
                "*@param* `rowIndex` &mdash; 배경색을 설정할 행 번호",
                "*@param* `color` &mdash; 배경색으로 설정할 색"
            ]
        },
        {
            "label": "setRowColor(rowIndex: Number, color: String)",
            "documentation": [
                "rowIndex에 해당하는 행에 param으로 들어온 color를 글자색으로 설정합니다.",
                "*@param* `rowIndex` &mdash; 글자색을 설정할 행 번호",
                "*@param* `color` &mdash; 글자색으로 설정할 색"
            ]
        },
        {
            "label": "setRowData(rowIndex: Number, rowData: Object, overwrite?: Boolean)",
            "documentation": [
                "rowIndex에 해당하는 행에 rowData를 넣어줍니다. overwrite가 false인 경우에 행을 만들어서 넣어줍니다.",
                "*@param* `rowIndex` &mdash; rowData를 넣어줄 행 번호",
                "*@param* `rowData` &mdash; rowIndex에 해당하는 행에 넣을 데이터의 배열",
                "*@param* `overwrite` &mdash; 덮어쓰는 여부의 옵션 없으면 false"
            ]
        },
        {
            "label": "setRowDisabled(rowIndex: Number, disabled: Boolean)",
            "documentation": [
                "colIndex에 해당하는 행의 disabled속성을 param으로 들어온 disabled로 설정합니다.",
                "*@param* `rowIndex` &mdash; disabled속성을 설정할 행 번호",
                "*@param* `disabled` &mdash; disabled속성에 적용할 값"
            ]
        },
        {
            "label": "setRowNumColumnWidth(size: Number)",
            "documentation": [
                "rowNum컬럼의 폭을 변경합니다.",
                "*@param* `size` &mdash; 변경할 컬럼의 폭"
            ]
        },
        {
            "label": "setRowReadOnly(rowIndex: Number, readOnly: Boolean)",
            "documentation": [
                "rowIndex에 해당하는 행의 readonly속성을 param으로 들어온 readonly로 설정합니다.",
                "*@param* `rowIndex` &mdash; readonly속성을 설정할 행 번호",
                "*@param* `readOnly` &mdash; readonly속성에 적용할 값"
            ]
        },
        {
            "label": "setRowStatusColumnWidth(size: Number)",
            "documentation": [
                "rowStatus컬럼의 폭을 변경합니다.",
                "*@param* `size` &mdash; 변경할 컬럼의 폭"
            ]
        },
        {
            "label": "setRowXML(rowIndex: Number, rowData: XML element, overwrite?: Boolean)",
            "documentation": [
                "rowIndex에 해당하는 행에 rowData를 넣어줍니다. overwrite가 false인 경우에 행을 만들어서 넣어줍니다.",
                "*@param* `rowIndex` &mdash; rowData를 넣어줄 행 번호",
                "*@param* `rowData` &mdash; 행에 넣을 xml데이터",
                "*@param* `overwrite` &mdash; 덮어쓰는 여부의 옵션 없으면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStartRowNumber(startRowNumber: Number)",
            "documentation": [
                "startRowNumber에 해당하는 인덱스를 행번호의 시작점으로 설정합니다.",
                "*@param* `startRowNumber` &mdash; 행의 번호를 시작할 인덱스"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setSummary(str: String)",
            "documentation": [
                "그리드 테이블의 summary 값을 설정합니다.",
                "*@param* `str` &mdash; summary 값에 설정될 string"
            ]
        },
        {
            "label": "setTopRowIndex(topRowIndex: Number)",
            "documentation": [
                "그리드의 세로 스크롤 위치를 이동하여 최상단에 topRowIndex에 해당하는 row가 위치하도록 조정합니다.",
                "*@param* `topRowIndex` &mdash; 최상단에 위치할 rowIndex"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setXML(element: XML Document, append?: String)",
            "documentation": [
                "XML[xml데이터]을 Grid에 넣거나 추가합니다. (행의 상태는 초기상태인 \"R\"로 변경됩니다.)",
                "*@param* `element` &mdash; 그리드 데이터를 갖고 있는 XML",
                "*@param* `append` &mdash; 이어쓰기 여부, false이면 기존 데이터삭제 [true/false] 생략시 false. [생략가능]"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "sort(bodyColumnID: String, sortType: Number)",
            "documentation": [
                "bodyColumnID에 해당하는 열을 정렬해줍니다.",
                "*@param* `bodyColumnID` &mdash; 정렬시킬 열의 아이디",
                "*@param* `sortType` &mdash; 정렬 옵션 0이면 오름차순 1이면 내림차순 2이면 정렬을 취소"
            ]
        },
        {
            "label": "spanAll(openFlag: Boolean||Number)",
            "documentation": [
                "drilldown을 사용하는 grid에서 전체 데이터를 모두 펼치거나 모두 접는다. 인자로 숫자를 넣는 경우 해당 depth까지 데이터를 펼친다.",
                "*@param* `openFlag` &mdash; [true, false]open 여부, 숫자를 넣는 경우 해당 depth까지 데이터를 펼친다."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "undeleteRow(rowIndex: Number)",
            "documentation": [
                "rowInex에 해당하는 행이 삭제 상태를 취소합니다.",
                "*@param* `rowIndex` &mdash; 삭제를 취소할 행번호."
            ]
        },
        {
            "label": "undoAll()",
            "documentation": [
                "갱신이나 삭제된 행들의 data를 처음 입력된 데이터로 바꿔주고 행의 상태를 초기화 시켜줍니다."
            ]
        },
        {
            "label": "undoRow(rowIndex: Number)",
            "documentation": [
                "rowIndex에 해당하는 row의 data를 수정되기전 data로 바꿔주고 행의 상태를 복구합니다.",
                "*@param* `rowIndex` &mdash; data를 변경할 행 번호"
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "gridView": [
        {
            "label": "advancedExcelDownload(options: Object, infoArr?: Object)",
            "documentation": [
                "그리드의 데이터를 엑셀 파일로 저장한다. (JDK 1.5이상에서 사용 가능)",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 엑셀 다운로드 옵션",
                "*@param* `infoArr` &mdash; 그리드에 대한 내용을 추가로 다른 셀에 표현하는 경우 사용하는 배열"
            ]
        },
        {
            "label": "advancedExcelUpload(options: Object)",
            "documentation": [
                "엑셀 파일을 읽어 그리드의 데이터를 설정한다. (JDK 1.5이상에서 사용 가능)",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 엑셀 업로드 옵션"
            ]
        },
        {
            "label": "checkAll(colIndex: String, dataValue: String)",
            "documentation": [
                "체크 박스로 이루어진 열을 한번에 체크하거나 언체크한다.",
                "*@param* `colIndex` &mdash; 체크 박스 열의 column id 또는 index.",
                "*@param* `dataValue` &mdash; 체크 여부에 대한 true/false 또는 trueValue/falseValue 또는 1/0(valueType을 정의 하지 않는 경우 check는 1, uncheck는 0으로 설정 된다)."
            ]
        },
        {
            "label": "clearGroupby()",
            "documentation": [
                "groupBy를 해제한다."
            ]
        },
        {
            "label": "getAllDisplayData(): Array",
            "documentation": [
                "화면에 보이는 data를 1차원 배열로 반환한다.(displayFormat등이 적용 된 data)본 API는 filter는 무시되며 filter가 반영 된 Data는 getAllVisibleData API를 사용한다.",
                "*@return*  \ndata가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getAllDisplayXML(): XML",
            "documentation": [
                "화면에 보이는 data를 XML로 반환한다.(displayFormat등이 적용 된 data)본 API는 filter는 무시되며 filter가 반영 된 Data는 getAllVisibleXML API를 사용한다.",
                "*@return*  \nXML 데이터"
            ]
        },
        {
            "label": "getAllFocusedIndex(): Array",
            "documentation": [
                "선택 된 셀의 rowIndex와 colIndex를 반환한다. 보통 ctrl키를 이용하여 다중 cell이 선택 된 경우 사용한다.",
                "*@return*  \n선택 된 셀의 rowIndex와 colIndex의 정보가 담긴 JOSN을 담은 array"
            ]
        },
        {
            "label": "getAllFocusedRowIndex(): Array",
            "documentation": [
                "포커스 된 셀들의 rowIndex를 반환한다. ctrl키를 이용하여 다중 cell을 선택한 경우 사용한다.",
                "*@return*  \n포커스 된 셀들의 rowIndex를 담은 array"
            ]
        },
        {
            "label": "getAllVisibleData(): Array",
            "documentation": [
                "현재 보이는 data를 1차원 배열로 반환한다.(filter 적용)",
                "*@return*  \ndata가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getAllVisibleXML(): XML",
            "documentation": [
                "현재 보이는 data를 XML로 반환한다.(filter 적용)",
                "*@return*  \nXML 데이터"
            ]
        },
        {
            "label": "getBottomRowIndex(): Number",
            "documentation": [
                "현재 눈에 보여지는 gridVeiw의 최하단 row의 rowIndex를 반환한다. 그려진 row가 없으면 -1을 반환한다.",
                "*@return*  \n최하단 row의 rowIndex"
            ]
        },
        {
            "label": "getCellBackgroundColor(rowIndex: Number, colIndex: String||Number): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 배경색을 반환한다. API로 별도의 BackgroundColor를 지정하지 않은 경우 \"\"(empty string)이 반환된다.",
                "*@param* `rowIndex` &mdash; 배경색을 반환할 행 index",
                "*@param* `colIndex` &mdash; 배경색을 반환할 열 index 또는 id",
                "*@return*  \n해당 행에 지정된 배경색"
            ]
        },
        {
            "label": "getCellChecked(rowIndex: Number, colIndex: Number||String): Boolean",
            "documentation": [
                "rowIndex와 colIndex로 해당하는 셀의 check여부를 반환한다.",
                "*@param* `rowIndex` &mdash; 셀의 행 index",
                "*@param* `colIndex` &mdash; 셀의 열 index 또는 id",
                "*@return*  \n셀의 check여부"
            ]
        },
        {
            "label": "getCellColor(rowIndex: Number, colIndex: String||Number): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 글자색을 반환한다. API로 별도의 글자색을 지정하지 않은 경우 \"\"(empty string)이 반환된다.",
                "*@param* `rowIndex` &mdash; 글자색을 반환할 행 index",
                "*@param* `colIndex` &mdash; 글자색을 반환할 열 index 또는 id",
                "*@return*  \n해당 cell의 글자색"
            ]
        },
        {
            "label": "getCellDisabled(rowIndex: Number, colIndex: String||Number): Boolean",
            "documentation": [
                "colIndex와 rowIndex 해당하는 셀의 disabled속성 값을 반환한다. disable을 별도로 지정하지 않은 경우 \"\"(empty string)이 반환된다.",
                "*@param* `rowIndex` &mdash; disabled속성을 가져올 행 index",
                "*@param* `colIndex` &mdash; disabled속성을 가져올 열 index 또는 id",
                "*@return*  \n해당 셀에 적용된 disabled속성값으로 별도로 지정하지 않은 경우 \"\"(empty string)이 반환된다."
            ]
        },
        {
            "label": "getCellDisplayData(rowIndex: Number, colIndex: String||Number): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터를 반환한다.(displayFormat등이 적용 된 data)",
                "*@param* `rowIndex` &mdash; 셀의 행 번호",
                "*@param* `colIndex` &mdash; 셀의 컬럼 index 또는 id",
                "*@return*  \nrowIndex와 colIndex에 해당하는 셀의 화면에 보이는 데이터"
            ]
        },
        {
            "label": "getCellPosition(row: Number, colIndex: String||Number, propertyName: String): Number",
            "documentation": [
                "셀의 위치 정보(top 또는 left)를 반환한다.",
                "*@param* `row` &mdash; 셀의 행 index(세로 스크롤 위치와는 무관하게 현재 그리드에서 최상단 행에 위치한 셀의 행 index를 0으로 보고 계산해야 한다)",
                "*@param* `colIndex` &mdash; 셀의 컬럼 index 또는 id",
                "*@param* `propertyName` &mdash; [top, left] 반환 할 위치 정보명",
                "*@return*  \n셀의 위치 정보(top이나 left)의 값"
            ]
        },
        {
            "label": "getCellReadOnly(rowIndex: Number, colIndex: String||Number): Boolean",
            "documentation": [
                "colIndex와 rowIndex에 해당하는 셀의 readonly속성 값을 반환한다. 별도로 readonly 속성을 지정하지 않은 경우 \"\"(empty string)을 반환한다.",
                "*@param* `rowIndex` &mdash; readonly속성을 가져올 행 index",
                "*@param* `colIndex` &mdash; readonly속성을 가져올 열 index 또는 id",
                "*@return*  \n해당 셀에 적용된 readonly속성값"
            ]
        },
        {
            "label": "getCellSize(row: Number, colIndex: String||Number, sizeName: String): Number",
            "documentation": [
                "셀의 크기 정보(width나 height)를 반환한다.",
                "*@param* `row` &mdash; 셀의 행 index",
                "*@param* `colIndex` &mdash; 셀의 열 index 또는 id",
                "*@param* `sizeName` &mdash; [width, height] 반환 할 크기 정보명.",
                "*@return*  \n셀의 크기 정보(width나 height)의 값"
            ]
        },
        {
            "label": "getCheckedData(colIndex: Number||String): Array",
            "documentation": [
                "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 배열로 반환한다. 해당 컬럼이 checkbox가 아닐 경우 비어있는 배열을 반환한다.",
                "*@param* `colIndex` &mdash; 열 index 또는 id",
                "*@return*  \ndata가 담긴 2차원 배열."
            ]
        },
        {
            "label": "getCheckedIndex(colIndex: Number||String): Array",
            "documentation": [
                "colIndex에 해당하는 열의 inputType속성이 radio/checkbox인 경우 check된 행의 index를 배열로 반환한다.",
                "*@param* `colIndex` &mdash; 컬럼의 index 또는 id",
                "*@return*  \n행 index가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getCheckedJSON(colIndex: Number||String): Array",
            "documentation": [
                "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 JSON Data를 Array에 담아 반환한다. 해당 컬럼이 checkbox가 아닐경우 비어있는 배열을 반환한다.",
                "*@param* `colIndex` &mdash; 열 index 또는 id",
                "*@return*  \nJSON Data를 담은 1차원 배열"
            ]
        },
        {
            "label": "getCheckedXML(colIndex: Number||String): XML",
            "documentation": [
                "colIndex에 해당하는 열이 radio/checkbox일 경우 check된 행의 data를 XML로 반환한다.",
                "*@param* `colIndex` &mdash; 열 index 또는 id",
                "*@return*  \nXML Data"
            ]
        },
        {
            "label": "getChildrenRowIndexArray(rowIndex: Number): Array",
            "documentation": [
                "drilldown 사용시 rowIndex에 해당하는 행의 자식(1 depth 하위)행들의 rowIndex를 배열로 반환한다.",
                "*@param* `rowIndex` &mdash; 자식을 찾으려는 행의 index",
                "*@return*  \nrowIndex가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getColIdByHeaderId(headerId: String): String",
            "documentation": [
                "header의 columnId에 해당하는 body의 columnId를 반환한다.",
                "*@param* `headerId` &mdash; header의 ID",
                "*@return*  \nbody의 columnId"
            ]
        },
        {
            "label": "getColumnBackgroundColor(colIndex: String||Number): String",
            "documentation": [
                "colIndex에 해당하는 열의 배경색을 반환한다. API로 별도의 backgroundColor를 지정하지 않은 경우 \"\"(empty string)을 반환한다.",
                "*@param* `colIndex` &mdash; 배경색을 반환할 열 index 또는 id",
                "*@return*  \n해당 열에 지정된 배경색"
            ]
        },
        {
            "label": "getColumnColor(colIndex: String||Number): String",
            "documentation": [
                "colIndex에 해당하는 열의 글자색을 반환한다. API로 별도의 글자색을 지정하지 않은 경우 \"\"(empty string)을 반환한다.",
                "*@param* `colIndex` &mdash; 글자색을 반환 할 열 index 또는 id",
                "*@return*  \n해당 열에 글자색"
            ]
        },
        {
            "label": "getColumnDisabled(colIndex: String||Number): Boolean",
            "documentation": [
                "colIndex에 해당하는 열에 disabled속성 값을 반환한다. 별도로 disable을 지정하지 않은 경우 \"\"(empty string)을 반환한다.",
                "*@param* `colIndex` &mdash; disabled속성을 가져올 열 index 또는 id",
                "*@return*  \n해당 열에 적용된 disabled속성값"
            ]
        },
        {
            "label": "getColumnID(colIndex: Number): String",
            "documentation": [
                "컬럼의 index를 입력받아 해당하는 컬럼의 id를 반환한다.",
                "*@param* `colIndex` &mdash; 컬럼의 index",
                "*@return*  \n컬럼의 ID"
            ]
        },
        {
            "label": "getColumnIndex(colIndex: String): Number",
            "documentation": [
                "컬럼 id를 입력받아 해당하는 컬럼의 index를 반환한다.",
                "*@param* `colIndex` &mdash; 컬럼 id",
                "*@return*  \n컬럼의 index"
            ]
        },
        {
            "label": "getColumnOrder(byName?: Boolean): Array",
            "documentation": [
                "현재 컬럼 순서를 배열로 반환한다. 기본적으로는 컬럼 index를 담은 배열을 반환하고, byName이 true인 경우 id를 담은 배열을 반환한다.",
                "*@param* `byName` &mdash; [defulat:false, true]반환 할 컬럼의 순서에서 컬럼 index 대신 컬럼 id를 사용할지 여부",
                "*@return*  \n현재 컬럼 순서를 차례대로 담고 있는 배열"
            ]
        },
        {
            "label": "getColumnReadOnly(colIndex: String||Number): Boolean",
            "documentation": [
                "colIndex에 해당하는 열에 적용된 readonly속성 값을 반환한다.별도의 readonly가 지정되지 않은 경우 \"\"(empty string)을 반환한다.",
                "*@param* `colIndex` &mdash; 열 index 또는 id",
                "*@return*  \n해당 열에 적용된 readonly속성값"
            ]
        },
        {
            "label": "getColumnType(colIndex: String||Number): String",
            "documentation": [
                "colIndex에 해당하는 열의 inputType속성값을 반환한다.",
                "*@param* `colIndex` &mdash; column id 또는 index",
                "*@return*  \ncolIndex에 해당하는 컬럼의 타입"
            ]
        },
        {
            "label": "getColumnVisible(colIndex: Number||String): Boolean",
            "documentation": [
                "colIndex에 해당하는 열의 visible여부를 반환한다.",
                "*@param* `colIndex` &mdash; visible여부를 반환할 colunm의 index 또는 id",
                "*@return*  \ncolumn의 visible여부"
            ]
        },
        {
            "label": "getDataLength(): number",
            "documentation": [
                "[deprecated]getRowCount()를 사용한다. 행의 수를 반환한다.",
                "*@return*  \n행의 수"
            ]
        },
        {
            "label": "getDataList(): String",
            "documentation": [
                "현재 binding된 dataList의 Id를 반환한다. (dataList속성 값)",
                "*@return*  \ndata의 Id"
            ]
        },
        {
            "label": "getDisabled(type: String, rowIndex: Number, colIndex: Number||String): Boolean",
            "documentation": [
                "type에 따라 세부 disabled 속성을 반환한다.type에 따른 세부 내용- all :  gridView 전체, row, column, cell 에 지정된 disabled 속성값들을 전부 체크하여 해당 cell에 적용된 실제 disabled 속성값을 반환한다.- grid : gridView 전체에 disabled 속성의 적용여부를 반환한다.- row :  해당 row에 disabled 속성의 적용여부를 반환하며 getRowDisabled API와 동일하다.  gridView 전체에 disabled속성을 넣더라도 해당 row에 disabled속성을 직접 넣은 경우가 아닌 경우 false를 반환한다.- column : 해당 column에 disabled 속성의 적용여부를 반환하며 getColumnDisabled API와 동일하다.  gridView 전체에 disabled속성을 넣더라도 해당 column에 disabled속성을 직접 넣은 경우가 아닌 경우 false를 반환한다.- cell : 해당 cell에 disabled 속성의 적용여부를 반환하며 getCellDisabled API와 동일하다.gridView 전체 또는 해당 cell을 포함하는 row나 column에 disabled속성을 넣더라도 해당 cell에 disabled속성을 직접 넣은 경우가 아닌 경우 false를 반환한다.",
                "*@param* `type` &mdash; [default:grid, row, column, cell, all]disabled 속성을 가져 올 type.",
                "*@param* `rowIndex` &mdash; disabled속성을 가져올 행 index",
                "*@param* `colIndex` &mdash; disabled속성을 가져올 열 index 또는 id",
                "*@return*  \n해당 type에 적용된 disabled속성값"
            ]
        },
        {
            "label": "getFocusedColumnID(): String",
            "documentation": [
                "포커스가 위치한 셀이 속한 column의 ID를 반환한다.",
                "*@return*  \n포커스가 위치한 셀이 속한 column의 ID"
            ]
        },
        {
            "label": "getFocusedColumnIndex(): Number",
            "documentation": [
                "포커스가 위치한 셀의 colIndex를 반환한다.",
                "*@return*  \n포커스가 위치한 셀의 colIndex"
            ]
        },
        {
            "label": "getFocusedRowIndex(): Number",
            "documentation": [
                "포커스가 위치한 셀의 rowIndex를 반환한다.",
                "*@return*  \n포커스가 위치한 셀의 rowIndex"
            ]
        },
        {
            "label": "getFocusedRowStatus(): String",
            "documentation": [
                "포커스가 위치한 셀이 속한 row의 상태를 상태문자로 반환한다.상태값의 세부 내용 - 초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\"",
                "*@return*  \n포커스가 위치한 셀이 속한 row의 상태를 나타내는 문자 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")"
            ]
        },
        {
            "label": "getFooterData(footerId: String||Number, display?: String): string",
            "documentation": [
                "footerId에 해당하는 footer의 값을 반환한다. inputType이 expression인 경우 계산된 값을 반환한다.",
                "*@param* `footerId` &mdash; footer의 id 혹은 index",
                "*@param* `display` &mdash; [displayData] displayData를 넘긴 경우 foramt된 값이 반환된다.",
                "*@return*  \nfooterId에 해당하는 footer의 값"
            ]
        },
        {
            "label": "getFooterStyle(footerId: Number||String, style: String)",
            "documentation": [
                "그리드의 footerId에 해당하는 footer의 스타일 속성값을 가져온다.",
                "*@param* `footerId` &mdash; 그리드 컬럼의 index 또는 id",
                "*@param* `style` &mdash; 가져올 스타일 속성"
            ]
        },
        {
            "label": "getGridReadOnly(): Boolean",
            "documentation": [
                "gridView 전체에 대한 readOnly 속성을 반환한다.",
                "*@return*  \n그리드의 읽기 전용 속성"
            ]
        },
        {
            "label": "getHeaderBackgroundColor(headerId: String): String",
            "documentation": [
                "header 셀에 적용된 배경색 값을 가져온다.",
                "*@param* `headerId` &mdash; header cell의 id",
                "*@return*  \nheader 셀의 배경색 값"
            ]
        },
        {
            "label": "getHeaderColor(headerId: String): String",
            "documentation": [
                "header 셀에 적용 된 글씨 색상값을 가져온다.",
                "*@param* `headerId` &mdash; header cell의 id",
                "*@return*  \nheader 셀이 글씨 색상값"
            ]
        },
        {
            "label": "getHeaderID(header: Number): ",
            "documentation": [
                "header index로 header id를 반환한다.",
                "*@param* `header` &mdash; index",
                "*@return*  \n"
            ]
        },
        {
            "label": "getHeaderIndex(header: String): ",
            "documentation": [
                "header id로 header index를 찾아온다.",
                "*@param* `header` &mdash; id",
                "*@return*  \n"
            ]
        },
        {
            "label": "getHeaderPosition(headerId: String, propertyName: String): Number",
            "documentation": [
                "header 셀의 위치 정보(top이나 left)를 반환한다.",
                "*@param* `headerId` &mdash; header의 Id",
                "*@param* `propertyName` &mdash; [top, left]반환할 위치 정보의 이름",
                "*@return*  \nheader의 위치값"
            ]
        },
        {
            "label": "getHeaderSize(headerId: String, sizeName: String): Number",
            "documentation": [
                "header 셀의 크기 정보(width나 height)를 반환한다.",
                "*@param* `headerId` &mdash; header의 Id",
                "*@param* `sizeName` &mdash; [width, height]반환할 크기 정보의 이름",
                "*@return*  \nheader의 크기값"
            ]
        },
        {
            "label": "getHeaderValue(headerId: String): String",
            "documentation": [
                "header의 값을 반환한다.",
                "*@param* `headerId` &mdash; header의 id",
                "*@return*  \nheader의 value"
            ]
        },
        {
            "label": "getOpenStatus(rowIndex: Number): Boolean",
            "documentation": [
                "gridView에 drilldown을 적용한 경우 rowIndex에 해당하는 행의 drilldown이 열려있는지 닫혀있는지 여부를 boolean으로 반환한다.",
                "*@param* `rowIndex` &mdash; openStatus를 가져오려는 행의 index",
                "*@return*  \n[true, false]drilldown의 open 여부"
            ]
        },
        {
            "label": "getOverflowX(): String",
            "documentation": [
                "overflowX 속성의 설정값을 반환한다.",
                "*@return*  \n[default:auto, hidden, scroll]overflowX속성의 설정값"
            ]
        },
        {
            "label": "getOverflowY(): String",
            "documentation": [
                "overflowY 속성의 설정값을 반환한다.",
                "*@return*  \n[default:auto, hidden, scroll]overflowY속성의 설정값"
            ]
        },
        {
            "label": "getParentRowIndex(rowIndex: Number): Number",
            "documentation": [
                "drilldown 사용시 rowIndex에 해당하는 행의 부모 행의 rowIndex를 반환한다.",
                "*@param* `rowIndex` &mdash; 부모를 찾으려는 행의 index",
                "*@return*  \n부모행의 rowIndex"
            ]
        },
        {
            "label": "getReadOnly(type: String, rowIndex: Number, colIndex: Number||String): Boolean",
            "documentation": [
                "type에 따라 readOnly 속성을 반환한다.type에 따른 세부 내용- grid : gridView 전체에 readOnly 속성의 적용여부를 반환한다.- row :  해당 row에 readOnly 속성의 적용여부를 반환하며 getRowReadOnly API와 동일한다.gridView 전체에 readOnly속성을 넣더라도 해당 row에 readOnly속성을 직접 넣은 경우가 아닌 경우 false를 반환한다.- column : 해당 column에 readOnly 속성의 적용여부를 반환하며 getColumnReadOnly API와 동일하다.gridView 전체에 readOnly속성을 넣더라도 해당 column에 readOnly속성을 직접 넣은 경우가 아닌 경우 false를 반환한다.- cell : 해당 cell에 readOnly 속성의 적용여부를 반환하며 getCellReadOnly API와 동일하다.gridView 전체 또는 해당 cell을 포함하는 row나 column에 readOnly속성을 넣더라도 해당 cell에 readOnly속성을 직접 넣은 경우가 아닌 경우 false를 반환한다.- all :  gridView 전체, row, column, cell에 지정된 readOnly 속성값들을 전부 계산하여 해당 cell에 적용된 실제 readOnly 속성값을 반환한다.",
                "*@param* `type` &mdash; [default:grid, row, column, cell, all]readOnly 속성을 가져올 type",
                "*@param* `rowIndex` &mdash; readOnly속성을 가져올 행 index",
                "*@param* `colIndex` &mdash; readOnly속성을 가져올 열 index 또는 id",
                "*@return*  \n해당 type에 적용된 readOnly속성값"
            ]
        },
        {
            "label": "getRealRowIndex(rowIndex: Number): Number",
            "documentation": [
                "drilldown을 적용 한 경우 화면에 표현 된 rowIndex를 기준으로 실제 데이터의 rowIndex를 반환한다.",
                "*@param* `rowIndex` &mdash; 현재 표시되고 있는 행의 index",
                "*@return*  \nrow의 실제 index"
            ]
        },
        {
            "label": "getRowBackgroundColor(rowIndex: Number): String",
            "documentation": [
                "rowIndex에 해당하는 행의 배경색을 반환한다.",
                "*@param* `rowIndex` &mdash; 배경색을 반환할 행의 index",
                "*@return*  \n행의 배경색"
            ]
        },
        {
            "label": "getRowColor(rowIndex: Number): String",
            "documentation": [
                "rowIndex에 해당하는 행의 글자색을 반환한다.",
                "*@param* `rowIndex` &mdash; 글자색을 반환할 행의 index",
                "*@return*  \n행의 글자색"
            ]
        },
        {
            "label": "getRowDisabled(rowIndex: Number): Boolean",
            "documentation": [
                "rowIndex에 해당하는 행에 적용된 disabled속성값을 반환한다.",
                "*@param* `rowIndex` &mdash; disabled속성을 가져올 행의 index",
                "*@return*  \n해당 행에 적용된 disabled속성값"
            ]
        },
        {
            "label": "getRowReadOnly(rowIndex: Number): Boolean",
            "documentation": [
                "rowIndex에 해당하는 행에 적용된 readonly속성 값을 반환한다.",
                "*@param* `rowIndex` &mdash; readonly속성을 가져올 행 index",
                "*@return*  \n해당 행에 적용된 readonly속성값으로 별도로 속성을 지정하지 않은 경우 \"\"(empty string)을 반환한다."
            ]
        },
        {
            "label": "getTopRowIndex(): Number",
            "documentation": [
                "현재 화면에 보여지는 최상단 row의 rowIndex를 반환한다. gridView에 표현 된 데이터가 없으면 없으면 -1을 반환한다.",
                "*@return*  \n최상단 row의 rowIndex"
            ]
        },
        {
            "label": "getTotalCol(): Number",
            "documentation": [
                "컬럼의 개수를 반환한다.",
                "*@return*  \n컬럼의 개수"
            ]
        },
        {
            "label": "getTotalRow(): Number",
            "documentation": [
                "행의 개수를 반환한다.",
                "*@return*  \n행의 개수"
            ]
        },
        {
            "label": "getUncheckedData(colIndex: Number||String): Array",
            "documentation": [
                "colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 배열로 반환한다.",
                "*@param* `colIndex` &mdash; ckeck여부를 검사할 컬럼 index 또는 id",
                "*@return*  \nrow data를 배열로 저장한 배열로 2차원 배열"
            ]
        },
        {
            "label": "getUncheckedIndex(colIndex: Number||String): Array",
            "documentation": [
                "colIndex에 해당하는 열의 inputType속성이 radio/checkbox인 경우 uncheck된 행의 index를 배열로 반환한다.",
                "*@param* `colIndex` &mdash; 컬럼의 index 혹은 컬럼 id",
                "*@return*  \n행 index가 담긴 1차원 배열"
            ]
        },
        {
            "label": "getUncheckedJSON(colIndex: Number||String): Array",
            "documentation": [
                "colIndex에 해당하는 열이 radio/checkbox일 경우 uncheck된 행의 data를 JSON으로 변환하여 배열에 담아 반환한다.",
                "*@param* `colIndex` &mdash; ckeckbox여부를 검사할 열 index 또는 id",
                "*@return*  \n행의 JSON Data를 담은 1차원 배열\n//checkbox, 이름, 생년월일이 순서대로 컬럼에 정의 된 gridView가 있고 inputType속성이 checkbox인 컬럼의 id가 chk인 경우\n\nvar tmpRs = gridView1.getUncheckedJSON(\"chk\");\t//checkbox컬럼의 id가 chk.\n//return 예시 ) [{\"name\":\"아이유\",\"birthday\":\"19930516\",\"chk\":\"0\",\"rowStatus\":\"R\"},{\"name\":\"정형돈\",\"birthday\":\"19780207\",\"chk\":\"0\",\"rowStatus\":\"R\"}]"
            ]
        },
        {
            "label": "getUncheckedXML(colIndex: Number||String): XML",
            "documentation": [
                "colIndex에 해당하는 열의 inputType속성이 radio/checkbox인 경우 uncheck된 행의 data를 XML로 반환한다.",
                "*@param* `colIndex` &mdash; 컬럼의 index 또는 id",
                "*@return*  \nXML Data"
            ]
        },
        {
            "label": "getVisibleColData(colIndex: Number||String): Array",
            "documentation": [
                "colIndex에 해당하는 열의 화면에 보이는 데이터(filter나 sort가 반영 된)를 배열로 반환한다.",
                "*@param* `colIndex` &mdash; 데이터를 가져올 컬럼의 index 혹은 컬럼 id",
                "*@return*  \ncolIndex에 해당하는 열의 데이터가 담긴 배열"
            ]
        },
        {
            "label": "getVisibleRowNum(): Number",
            "documentation": [
                "현재 화면(눈에 보여지는 영역)에 그려진 row의 수를 반환한다. (subtotal, footer 제외)총 10건의 row의 데이터가 셋팅 된 gridView가 화면에는 4건이 보여지고 넘치는 영역은 스크롤로 표현 될 때 반환 값은 4이다.",
                "*@return*  \n현재 눈에 보여지는 row의 수"
            ]
        },
        {
            "label": "hasChild(rowIndex: Number): Boolean",
            "documentation": [
                "drilldown이 적용 된 경우 rowIndex에 해당하는 행이 child row를 가지고 있는지의 여부를 반환한다.",
                "*@param* `rowIndex` &mdash; child row를 가지고 있는지 검사 할 rowIndex",
                "*@return*  \nchild row를 가지고 있는지 여부"
            ]
        },
        {
            "label": "initGrid(): array",
            "documentation": [
                "전체 데이터 삭제, 필터 삭제, 컬럼 기본정보(selectbox의 nodeset 등)를 초기화하고 가지고 있던 데이터를 1차원 배열로 반환한다.",
                "*@return*  \n전체 데이터를 담은 1차원 배열"
            ]
        },
        {
            "label": "isEditing(): Boolean",
            "documentation": [
                "gridView가 현재 편집중 인지의 여부를 반환한다.",
                "*@return*  \n편집중 인지의 여부"
            ]
        },
        {
            "label": "modifyCheckedStatus(colIndex: String, status: String)",
            "documentation": [
                "col에 해당하는 열의 inputType이 checkbox일 때 check된 행의 상태코드값을 일괄 변경한다.",
                "*@param* `colIndex` &mdash; check여부를 검사할 컬럼의 index 혹은 컬럼 id",
                "*@param* `status` &mdash; [R,C,U,D,V]변경할 상태코드값"
            ]
        },
        {
            "label": "modifyUncheckStatus(col: String, status: String)",
            "documentation": [
                "col에 해당하는 열의 inputType이 checkbox일 때 uncheck된 행의 상태코드값을 일괄 변경한다.",
                "*@param* `col` &mdash; uncheck 여부를 검사할 컬럼의 index 혹은 컬럼 id",
                "*@param* `status` &mdash; [R,C,U,D,V]변경할 상태코드값"
            ]
        },
        {
            "label": "print(options: JSON)",
            "documentation": [
                "그리드의 내용을 리포팅툴로 출력한다.",
                "*@param* `options` &mdash; JSON형태로 저장된 출력 옵션 (vendor마다 옵션지원 범위가 다름)"
            ]
        },
        {
            "label": "readCSV(options: JSON)",
            "documentation": [
                "csv 파일을 읽어 그리드의 데이터를 설정한다. (JDK 1.5이상에서 사용 가능)",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 csv 업로드 옵션"
            ]
        },
        {
            "label": "redrawColumn(colIndex: String||Number, valid?: Boolean)",
            "documentation": [
                "col에 해당하는 열을 다시 그려(reset)준다.",
                "*@param* `colIndex` &mdash; 컬럼의 id 또는 index",
                "*@param* `valid` &mdash; [defulat:true, false]cell의 inputType이 select인 경우 selectbox와 cell의 value의 적합성에 따라 데이터를 처리 유무."
            ]
        },
        {
            "label": "refreshColumnItemset(col: String)",
            "documentation": [
                "inputType이 select인 경우에만 동작하며 col에 해당하는 컬럼의 itemset을 갱신한다.",
                "*@param* `col` &mdash; 갱신할 column의 id 또는 index"
            ]
        },
        {
            "label": "removeFocusedCell()",
            "documentation": [
                "셀에 적용 된 모든 포커스(선택되어있는 셀)를 제거한다"
            ]
        },
        {
            "label": "saveCSV(options: JSON)",
            "documentation": [
                "데이터를 CSV 파일로 저장한다. (JDK 1.5이상에서 사용 가능)",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 csv 다운로드 옵션"
            ]
        },
        {
            "label": "setAutoFit(options?: Object)",
            "documentation": [
                "그리드의 사이즈에 맞게 컬럼의 크기를 변경하여 꽉차게 그려줍니다. autoFit옵션이 lastColumn경우 마지막 컬럼의 폭만 변경이 되고, allColumn이면 전체 컬럼을 폭을 균일하게 변경합니다.",
                "*@param* `options` &mdash; JSON형태로 저장된 그리드의 setAutoFit 옵션"
            ]
        },
        {
            "label": "setBottomRowIndex(bottomRowIndex: Number)",
            "documentation": [
                "화면에 보여지는 gridView 영역에 bottomRowIndex 해당하는 row가 최하단에 위치하도록 조정한다.(세로 스크롤 위치를 이동)",
                "*@param* `bottomRowIndex` &mdash; 최하단에 위치할 rowIndex"
            ]
        },
        {
            "label": "setCaption(htmlStr: String)",
            "documentation": [
                "gridView의 HTML caption 속성의 값을 설정한다.(gridView는 table로 구성되어있다.)",
                "*@param* `htmlStr` &mdash; caption의 값으로 순수 텍스트이외 HTML Tag을 조합 한 문자열도 가능"
            ]
        },
        {
            "label": "setCellBackgroundColor(rowIndex: Number, colIndex: Number||String, color: String)",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 배경색을 설정한다.",
                "*@param* `rowIndex` &mdash; 배경색을 설정할 행 index",
                "*@param* `colIndex` &mdash; 배경색을 설정할 열 index 또는 id",
                "*@param* `color` &mdash; 배경색으로 설정할 색"
            ]
        },
        {
            "label": "setCellChecked(rowIndex: Number, colIndex: String||Number, flag: Boolean)",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 inputType이 checkbox/radio인 경우 flag에 따라 true이면 check, false이면 uncheck해 줍니다.",
                "*@param* `rowIndex` &mdash; 셀의 행의 index",
                "*@param* `colIndex` &mdash; 셀의 열의 id 또는 index",
                "*@param* `flag` &mdash; [true,false]셀의 체크 여부"
            ]
        },
        {
            "label": "setCellColor(rowIndex: Number, colIndex: Number||String, color: String)",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 글자색을 설정한다.",
                "*@param* `rowIndex` &mdash; 글자색을 설정할 행 index",
                "*@param* `colIndex` &mdash; 글자색을 설정할 열 index 또는 id",
                "*@param* `color` &mdash; 글자색으로 설정할 색"
            ]
        },
        {
            "label": "setCellDisabled(rowIndex: Number, colIndex: Number||String, disabled: Boolean)",
            "documentation": [
                "colIndex와 rowIndex에 해당하는 셀의 disabled속성 값을 설정한다.",
                "*@param* `rowIndex` &mdash; disabled 속성을 설정할 행 번호",
                "*@param* `colIndex` &mdash; disabled 속성을 설정할 열 index 또는 id",
                "*@param* `disabled` &mdash; [true,false]disabled 속성에 적용할 값"
            ]
        },
        {
            "label": "setCellReadOnly(rowIndex: Number, colIndex: Number||String, readOnly: Boolean)",
            "documentation": [
                "colIndex와 rowIndex에 해당하는 셀의 readonly속성 값을 설정한다.",
                "*@param* `rowIndex` &mdash; readonly 속성을 설정할 행 index",
                "*@param* `colIndex` &mdash; readonly 속성을 설정할 열 index 또는 id",
                "*@param* `readOnly` &mdash; [true,false]readonly 속성에 적용할 값"
            ]
        },
        {
            "label": "setColumnBackgroundColor(colIndex: Number||String, color: String)",
            "documentation": [
                "colIndex에 해당하는 열의 배경색을 일괄 설정한다.",
                "*@param* `colIndex` &mdash; 배경색을 설정할 열 index 또는 id",
                "*@param* `color` &mdash; 배경색으로 설정할 색"
            ]
        },
        {
            "label": "setColumnChooseOption(gridView의: Number, chooseOptionValue: String, chooseOptionLabel: String)",
            "documentation": [
                "gridView에 column의 inputtype이 select일때 selectbox에 chooseOption의 label, value값을 변경함",
                "*@param* `gridView의` &mdash; colindex",
                "*@param* `chooseOptionValue` &mdash; 변경값",
                "*@param* `chooseOptionLabel` &mdash; 변경값"
            ]
        },
        {
            "label": "setColumnColor(colIndex: Number||String, color: String)",
            "documentation": [
                "colIndex에 해당하는 열의 글자색을 일괄 설정한다.",
                "*@param* `colIndex` &mdash; 글자색을 설정할 열 index 또는 id",
                "*@param* `color` &mdash; 글자색으로 설정할 색"
            ]
        },
        {
            "label": "setColumnDisabled(colIndex: Number||String, disabled: Boolean)",
            "documentation": [
                "colIndex에 해당하는 열에 disabled속성을 일괄 설정한다.",
                "*@param* `colIndex` &mdash; disabled속성을 설정할 열 index 또는 id",
                "*@param* `disabled` &mdash; [true, false]disabled속성에 적용할 값"
            ]
        },
        {
            "label": "setColumnOrder(columnOrderArray: Array)",
            "documentation": [
                "주어진 array를 기준으로 컬럼 순서를 재설정하며 파라메터에 정의되지 않은 컬럼은 파라메터 컬럼 뒤쪽으로 위치된다.",
                "*@param* `columnOrderArray` &mdash; 컬럼의 순서를 차례로 담은 배열(컬럼 index와 id 모두 사용 가능)"
            ]
        },
        {
            "label": "setColumnReadOnly(colIndex: Number||String, readOnly: Boolean)",
            "documentation": [
                "colIndex에 해당하는 열에 readonly속성을 설정한다.",
                "*@param* `colIndex` &mdash; readonly속성을 설정할 열 index 또는 id",
                "*@param* `readOnly` &mdash; [true, false]readonly속성에 적용할 값"
            ]
        },
        {
            "label": "setColumnVisible(colIndex: Number||String, colVisibleFlag: Boolean)",
            "documentation": [
                "column의 hidden 여부를 설정한다.",
                "*@param* `colIndex` &mdash; hidden 여부를 설정한 column의 index 또는 id",
                "*@param* `colVisibleFlag` &mdash; [true, flase]visible 여부(true인 경우 해당 column을 표시하고 false인 경우는 숨김)"
            ]
        },
        {
            "label": "setColumnWidth(colIndex: String||Number, size: Number)",
            "documentation": [
                "컬럼의 width을 변경한다.",
                "*@param* `colIndex` &mdash; 폭을 변경할 column의 index 또는 id",
                "*@param* `size` &mdash; 변경할 컬럼의 폭으로 px단위로 계산된다"
            ]
        },
        {
            "label": "setDisabled(type: String, rowIndex: Number, colIndex: Number||String, disableFlag: Boolean)",
            "documentation": [
                "type에 따라 disabled 속성 값을 설정한다.",
                "*@param* `type` &mdash; [grid, row, column, cell]disabled 속성을 설정할 type",
                "*@param* `rowIndex` &mdash; disabled 속성을 설정할 행 index",
                "*@param* `colIndex` &mdash; disabled 속성을 설정할 열 index 또는 id",
                "*@param* `disableFlag` &mdash; disabled 속성에 적용할 값"
            ]
        },
        {
            "label": "setDisplayFormat(colIndex: Number||String, displayFormat: String)",
            "documentation": [
                "컬럼의 displayFormat속성을 설정한다.displayFormat의 경우 dataList에 정의 된 컬럼의 dataType 속성에 따라 적용 범위가 다르므로 확인하여 적용해야한다.",
                "*@param* `colIndex` &mdash; 컬럼의 index 또는 id",
                "*@param* `displayFormat` &mdash; 컬럼에 적용할 displayFormat"
            ]
        },
        {
            "label": "setDisplayFormatter(colIndex: Number||String, displayFormatter: String)",
            "documentation": [
                "컬럼의 displayFormatter 속성을 설정한다.",
                "*@param* `colIndex` &mdash; 컬럼의 index 또는 id",
                "*@param* `displayFormatter` &mdash; displayFormatter 속성에 적용할 Function명"
            ]
        },
        {
            "label": "setFixedColumn(fixedColNum: Number)",
            "documentation": [
                "세로 틀고정을 설정한다.",
                "*@param* `fixedColNum` &mdash; 맨 왼쪽부터 시작해서 영역을 고정시킬 컬럼들의 수. 1번째 컬럼을 틀 고정 할 경우 1로 입력한다."
            ]
        },
        {
            "label": "setFocusedCell(rowIndex: Number, colIndex: Number||String, editMode: Boolean)",
            "documentation": [
                "셀로 포커스(선택)를 주고 해당 셀로 이동한다.",
                "*@param* `rowIndex` &mdash; 포커스를 이동할 셀의 행 index",
                "*@param* `colIndex` &mdash; 포커스를 이동할 셀의 열 index 또는 id",
                "*@param* `editMode` &mdash; [default:false, true]editMode로 전환할지 여부"
            ]
        },
        {
            "label": "setFocusedHeaderObj(headerId: String)",
            "documentation": [
                "헤더에 text가 아닌 inputType이 selectbox, checkbox와 같은 Object일 경우 포커스를 준다.",
                "*@param* `headerId` &mdash; header의 id"
            ]
        },
        {
            "label": "setFooterData(footerId: Number||String, data: String)",
            "documentation": [
                "footer의 inputType이 text인 경우 data를 footer에 넣어준다.",
                "*@param* `footerId` &mdash; footer의 index 또는 id",
                "*@param* `data` &mdash; footer에 넣을 값"
            ]
        },
        {
            "label": "setFooterDisplayFormat(footerId: Number||String, displayFormat: String)",
            "documentation": [
                "footer의 displayFormat을 설정한다.displayFormat은 dataType속성값에 따라 동작이 다르므로 주의한다.",
                "*@param* `footerId` &mdash; 컬럼의 index 또는 id",
                "*@param* `displayFormat` &mdash; 컬럼에 적용할 displayFormat"
            ]
        },
        {
            "label": "setFooterStyle(footerId: String||Number, style: String, value: String)",
            "documentation": [
                "footer cell의 스타일 속성을 설정한다.",
                "*@param* `footerId` &mdash; 그리드 footer cell의 id 또는 index(rowNum 컬럼은 \"$rowNum\", rowStatus 컬럼은 \"$rowStatus\"로 지정)",
                "*@param* `style` &mdash; 적용할 CSS 속성명",
                "*@param* `value` &mdash; 적용할 CSS 속성값"
            ]
        },
        {
            "label": "setFooterValue(footerId: String||Number, data: String)",
            "documentation": [
                "footer의 inputType이 text인 경우만 적용되며 data의 값을 footer에 설정한다.",
                "*@param* `footerId` &mdash; footer의 id 또는 index",
                "*@param* `data` &mdash; footer에 넣을 값"
            ]
        },
        {
            "label": "setGridHeight(height: Number)",
            "documentation": [
                "gridView의 높이를 설정한다.",
                "*@param* `height` &mdash; 변경할 height값. px로 계산된다."
            ]
        },
        {
            "label": "setGridReadOnly(readOnly: Boolean)",
            "documentation": [
                "gridView 전체에 readOnly 속성을 설정한다.",
                "*@param* `readOnly` &mdash; [true, false]readOnly 적용여부"
            ]
        },
        {
            "label": "setGridSize(width: Number, height: Number)",
            "documentation": [
                "gridView의 높이와 넓이을 설정한다.",
                "*@param* `width` &mdash; 변경할 width값으로 px단위로 계산된다.",
                "*@param* `height` &mdash; 변경할 height값으로 px단위로 계산된다."
            ]
        },
        {
            "label": "setGridWidth(width: Number)",
            "documentation": [
                "gridView의 넓이를 설정한다.",
                "*@param* `width` &mdash; 변경할 width값. px로 계산된다."
            ]
        },
        {
            "label": "setHeaderBackgroundColor(headerId: String||Number, color: String)",
            "documentation": [
                "header 셀의 배경 색상을 설정한다.",
                "*@param* `headerId` &mdash; header cell의 id 또는 index",
                "*@param* `color` &mdash; background에 지정할 색상"
            ]
        },
        {
            "label": "setHeaderColor(headerId: String||Number, color: String)",
            "documentation": [
                "header 셀의 글씨 색상을 설정한다.",
                "*@param* `headerId` &mdash; header cell의 id 또는 index",
                "*@param* `color` &mdash; 글씨 색상"
            ]
        },
        {
            "label": "setHeaderDisabled(headerId: Number||String, disabled: Boolean)",
            "documentation": [
                "header의 disalbled를 설정한다.",
                "*@param* `headerId` &mdash; header의 index 또는 id",
                "*@param* `disabled` &mdash; [true, false]header의 disabled 여부"
            ]
        },
        {
            "label": "setHeaderHide(hide: Boolean)",
            "documentation": [
                "header의 hidden 여부를 설정한다.",
                "*@param* `hide` &mdash; [true, false]header의 hidden 여부"
            ]
        },
        {
            "label": "setHeaderNodeSet(headerId: String, nodeset?: String, label?: String, value?: String)",
            "documentation": [
                "header의 inputType이 select의 경우 적용되며 list의 nodeSet을 설정한다.",
                "*@param* `headerId` &mdash; header의 id",
                "*@param* `nodeset` &mdash; 변경하려는 nodeset값으로 \"data:\"라는 prefix 뒤에 dataList id를 정의.",
                "*@param* `label` &mdash; 변경하려는 label로 dataList의 컬럼 id",
                "*@param* `value` &mdash; 변경하려는 value로 dataList의 컬럼 id"
            ]
        },
        {
            "label": "setHeaderSortImage(headerId: String, orderNum?: Number, sortOrd?: Number)",
            "documentation": [
                "header의 sort 이미지를 설정하며 data의 sort는 dataList의 sort API를 이용해야 한다.",
                "*@param* `headerId` &mdash; header의 ID",
                "*@param* `orderNum` &mdash; [default:-1, 1, 0]sort 상태를 나타내는 숫자 값 (오름차순이면 1, 내림차순이면 -1, sort를 하지 않는 상태이면 0)",
                "*@param* `sortOrd` &mdash; [default:0]multisort의 경우 sort의 우선순위를 나타내는 숫자 값. 하위호환성을 위해 이 값이 설정되어있지않으면 기본값은 0"
            ]
        },
        {
            "label": "setHeaderStyle(headerId: String||Number, style: String, value: String)",
            "documentation": [
                "그리드의 headerId에 해당하는 header cell의 스타일을 설정한다.",
                "*@param* `headerId` &mdash; 그리드 header cell의 id 또는 index(rowNum 컬럼은 \"$rowNum\", rowStatus 컬럼은 \"$rowStatus\"로 설정)",
                "*@param* `style` &mdash; 적용할 CSS 속성명",
                "*@param* `value` &mdash; 적용할 CSS 속성값"
            ]
        },
        {
            "label": "setHeaderValue(headerId: String, value: String)",
            "documentation": [
                "header의 value를 설정한다.inputType이 text인 경우 display되는 문자열이 변경된다.",
                "*@param* `headerId` &mdash; header의 id",
                "*@param* `value` &mdash; header의 value"
            ]
        },
        {
            "label": "setNoResultMessage(message: String)",
            "documentation": [
                "gridView에 데이터가 없을 경우 표시할 문자열을 설정한다.",
                "*@param* `message` &mdash; 데이터 없을 때 표시할 문자열"
            ]
        },
        {
            "label": "setReadOnly(type: String, rowIndex: Number, colIndex: Number||String, readOnlyFlag: Boolean)",
            "documentation": [
                "type에 따라 readOnly 속성값을 설정한다.",
                "*@param* `type` &mdash; [grid, row, column, cell]readOnly 속성을 설정할 type",
                "*@param* `rowIndex` &mdash; readOnly속성을 설정할 행 index",
                "*@param* `colIndex` &mdash; readOnly속성을 설정할 열 index 또는 id",
                "*@param* `readOnlyFlag` &mdash; [true, false]readOnly 속성에 적용할 값"
            ]
        },
        {
            "label": "setRowBackgroundColor(rowIndex: Number, color: String)",
            "documentation": [
                "rowIndex에 해당하는 행의 배경색을 설정한다.",
                "*@param* `rowIndex` &mdash; 행의 index",
                "*@param* `color` &mdash; 배경색의 값"
            ]
        },
        {
            "label": "setRowColor(rowIndex: Number, color: String)",
            "documentation": [
                "rowIndex에 해당하는 행의 글자색을 설정한다.",
                "*@param* `rowIndex` &mdash; 행의 index",
                "*@param* `color` &mdash; 글자색의 값"
            ]
        },
        {
            "label": "setRowDisabled(rowIndex: Number, disableFlag: Boolean)",
            "documentation": [
                "colIndex에 해당하는 행의 disabled속성을 설정한다.",
                "*@param* `rowIndex` &mdash; disabled속성을 설정할 행 index",
                "*@param* `disableFlag` &mdash; [true, false]disabled 여부"
            ]
        },
        {
            "label": "setRowNumColumnWidth(size: Number)",
            "documentation": [
                "rowNum 컬럼의 폭을 변경한다.",
                "*@param* `size` &mdash; 변경할 컬럼의 폭으로 px로 계산된다."
            ]
        },
        {
            "label": "setRowReadOnly(rowIndex: Number, readOnly: Boolean)",
            "documentation": [
                "rowIndex에 해당하는 행의 readonly속성을 설정한다.",
                "*@param* `rowIndex` &mdash; readonly속성을 설정할 행 index",
                "*@param* `readOnly` &mdash; [true, false]readonly속성의 값"
            ]
        },
        {
            "label": "setRowStatusColumnWidth(size: Number)",
            "documentation": [
                "rowStatus컬럼의 폭을 변경한다.",
                "*@param* `size` &mdash; 변경할 컬럼의 폭으로 px로 계산된다"
            ]
        },
        {
            "label": "setStartRowNumber(rowIndex: Number)",
            "documentation": [
                "rowNum 컬럼에 표현되는 행번호의 시작되는 숫자의 index를 설정한다.index의 값이므로 10을 설정하면 화면에는 11부터 시작된다. gridView의 rowNumVisible 속성의 값의 true일 경우에만 정상 표현된다.",
                "*@param* `rowIndex` &mdash; 행의 번호의 시작 index"
            ]
        },
        {
            "label": "setSummary(str: String)",
            "documentation": [
                "gridView의 HTML summary 속성값을 설정한다.",
                "*@param* `str` &mdash; summary 속성에 설정될 string"
            ]
        },
        {
            "label": "setTopRowIndex(topRowIndex: Number)",
            "documentation": [
                "세로 스크롤의 위치를 옮겨 topRowIndex에 해당하는 row가 첫번째 row에 보여지도록 설정한다.",
                "*@param* `topRowIndex` &mdash; 상단에 표현할 rowIndex"
            ]
        },
        {
            "label": "showChooseOption(gridView의: Number, chooseOption: Boolean)",
            "documentation": [
                "gridView에 column의 inputtype이 select일때 selectbox에 chooseOption을 설정함",
                "*@param* `gridView의` &mdash; colindex",
                "*@param* `chooseOption` &mdash; on/off"
            ]
        },
        {
            "label": "spanAll(openFlag: Boolean||Number)",
            "documentation": [
                "drilldown을 사용하는 gridView에서 전체 데이터를 모두 펼치거나 모두 접는다. 인자로 숫자를 넣는 경우 해당 depth까지 데이터를 펼친다.",
                "*@param* `openFlag` &mdash; [true, false]open 여부, 숫자를 넣는 경우 해당 depth까지 데이터를 펼친다."
            ]
        },
        {
            "label": "toggle(rowIndex: Number)",
            "documentation": [
                "drilldown을 적용 한 경우 rowIndex에 해당하는 행에 drilldown을 toggle한다.(행이 닫혀있으면 열리고 열려있으면 닫힌다)",
                "*@param* `rowIndex` &mdash; toggle하려는 행의 index"
            ]
        }
    ],
    "group": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getAttributeNode(attributeName: String)",
            "documentation": [
                "기본적으로 tagname속성의 확장을 위해 만든 html attributes(스튜디오에서의 명칭)를 이용하여 정의 된 속성값을 반환한다.정의 한 tagname의 Tag가 갖는 html 속성 또한 반환가능하다. 예를 들어 id,class,style등의 속성은 반환되나 tagname과 같은 속성값은 반환되지 않는다.",
                "*@param* `attributeName` &mdash; 속성명"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "init(options?: Object)",
            "documentation": [
                "Group 하위의 입력 가능한 컴포넌트의 value를 초기화(기본 '') 시킨다. 파라메터를 통해 제외시킬 컴포넌트의 옵션을 적용 할 수 있다.초기화가 가능한 컴포넌트로는 calendar, checkbox, grid, input, inputCalendar, multiselect, radio, selectbox, textarea 가 있다.",
                "*@param* `options` &mdash; 초기화 동작에서 제외되는 컴포넌트를 설정하는 값의 객체. "
            ]
        },
        {
            "label": "invoke(funcName: String, param?: Object, options?: JSON)",
            "documentation": [
                "Group 하위의 모든 컴포넌트에 API 또는 사용자 정의함수를 호출시켜주는 함수이다.",
                "*@param* `funcName` &mdash; 호출하려는 API명 또는 사용자 함수를 사용할 때는 \"assert\"로 정의",
                "*@param* `param` &mdash; 호출하려는 API에 넘겨질 파라메터 또는 사용자 정의함수",
                "*@param* `options` &mdash; 함수 호출에서 제외되는 컴포넌트를 설정하는 값의 객체. "
            ]
        },
        {
            "label": "removeAttributeNode(nodeName: String)",
            "documentation": [
                "attributes 노드에서 nodeName에 해당하는 하위 노드를 삭제합니다.nodeName으로 사용할 수 있는 값은 config.xml의 attributes 설정을 따릅니다.",
                "*@param* `nodeName` &mdash; 삭제할 하위 노드의 이름"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setAttributeNode(nodeName: String, nodeValue: String)",
            "documentation": [
                "attributes 노드에서 nodeName에 해당하는 하위 노드에 값을 설정합니다.nodeName으로 사용할 수 있는 값은 config.xml의 attributes 설정을 따릅니다.",
                "*@param* `nodeName` &mdash; 값을 설정할 하위 노드의 이름",
                "*@param* `nodeValue` &mdash; 노드에 설정할 값"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "그룹 하위 component에 disabled속성을 적용한다.",
                "*@param* `disabled` &mdash; Disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: String)",
            "documentation": [
                "그룹 하위의 component에 readOnly속성을 적용합니다.",
                "*@param* `readOnly` &mdash; readOnly설정 값 (true | false)"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "iframe": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getSrc(): String",
            "documentation": [
                "src 속성에 정의 된 URL의 full경로를 반환한다.",
                "*@return*  \nsrc 속성에 정의 된 URL의 full경로"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getWindow(): Object",
            "documentation": [
                "iframe 페이지의 window 객체를 반환되며 반환 된 객체 하위로 ifrmae 페이지에 정의된 컴포넌트 및 전역 객체 등을 접근할 수 있다.",
                "*@return*  \niframe의 window 객체"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setSrc(pageURL: String)",
            "documentation": [
                "src 속성값을 설정한다.",
                "*@param* `pageURL` &mdash; 화면 URL"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "image": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getAlt(): String",
            "documentation": [
                "alt속성값을 반환한다.",
                "*@return*  \nalt속성값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getLongdesc(): String",
            "documentation": [
                "longdesc속성값을 반환한다.",
                "*@return*  \nlongdesc속성값"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getSrc(): String",
            "documentation": [
                "src 속성에 정의 된 URL의 full경로를 반환한다.",
                "*@return*  \nsrc 속성에 정의 된 URL의 full경로"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setAlt(alt: String)",
            "documentation": [
                "alt속성값을 설정한다.",
                "*@param* `alt` &mdash; 설정할 문자열"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLongdesc(longdesc: String)",
            "documentation": [
                "longdesc속성값을 설정한다.",
                "*@param* `longdesc` &mdash; "
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setSrc(url: String)",
            "documentation": [
                "src 속성값을 설정한다.",
                "*@param* `url` &mdash; 이미지의 URL"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "input": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDataType(): String",
            "documentation": [
                "[default:text]dataType 속성값을 반환한다.",
                "*@return*  \ninput의 dataType"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getDisplayFormat(): String",
            "documentation": [
                "현재 컴포넌트에 설정 된 displayFormat을 반환한다.",
                "*@return*  \n현재 설정 된 displayFormat"
            ]
        },
        {
            "label": "getDisplayFormatter(): String",
            "documentation": [
                "현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환한다.",
                "*@return*  \ndisplayFormatter에 설정 된 함수"
            ]
        },
        {
            "label": "getDisplayValue(): String",
            "documentation": [
                "현재 보여지는(format이 적용 된) 값을 반환한다.",
                "*@return*  \nforamt이 적용 된 값"
            ]
        },
        {
            "label": "getFormattedValue(): String",
            "documentation": [
                "formatted된 input의 값을 반환한다.",
                "*@return*  \nformatted된 input의 값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "컴포넌트의 value를 반환한다.",
                "*@return*  \n컴포넌트의 value"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDefaultValue(initValue: String)",
            "documentation": [
                "컴포넌트의 initValue를 설정한다.주요 활용은 본 컴포넌트 상위의 group 컴포넌트의 init API를 사용 할 때 컴포넌트의 value를 ''(empty string) 대신 개발자가 설정한 초기값, 즉 initValue의 값으로 설정 할 때 쓰인다.",
                "*@param* `initValue` &mdash; 새로 설정 할 initValue"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setDisplayFormat(format: String)",
            "documentation": [
                "컴포넌트의 displayFormat 속성을 설정한다.",
                "*@param* `format` &mdash; 새로 설정할 displayFormat"
            ]
        },
        {
            "label": "setDisplayFormatter(formatter: String)",
            "documentation": [
                "컴포넌트의 displayFormatter 속성을 설정한다.",
                "*@param* `formatter` &mdash; 새로 설정 할 format용 함수명"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPlaceholder(placeholderStr: String)",
            "documentation": [
                "placeholder 속성값을 변경한다.",
                "*@param* `placeholderStr` &mdash; 변경할 placeholder의 값"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
                "*@param* `ref` &mdash; 적용할 ref의 경로."
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "컴포넌트의 value를 설정한다.",
                "*@param* `value` &mdash; input의 value 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate(): Boolean",
            "documentation": [
                "컴포넌트의 정의 된 유효성에 관련 속성값을 통해 유효성 검사를 실행한다.유효성 관련 속성 : mandatory, minLength, maxLength, minByteLength, maxByteLength",
                "*@return*  \n유효성 검사 결과 값"
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "inputCalendar": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "blur()",
            "documentation": [
                "input에 포커스를 제거(blur)한다"
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "input의 focus를 주며 browser의 focus동작에 방식에 영향을 받는다."
            ]
        },
        {
            "label": "getDefaultDate(): String",
            "documentation": [
                "현재 컴포넌트에 설정된 defaultDate를 반환합니다. (defaultDate : Input이 비어있는 경우, Calendar에 표시될 기본 날짜. defalutDate 미설정시, 현재 시스템 날짜가 Calendar에 표시된다.)",
                "*@return*  \n현재 설정된 defaultDate"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getDisplayFormat(): String",
            "documentation": [
                "현재 컴포넌트에 설정된 displayFormat을 반환합니다.",
                "*@return*  \n현재 설정된 displayFormat"
            ]
        },
        {
            "label": "getFormattedValue(formatStr?: String): String",
            "documentation": [
                "formatStr의 패턴이 적용된 value를 반환하며 foramtStr의 값이 없는 경우  displayFormat속성에 적용된 패턴을 사용하여 value를 반환한다.",
                "*@param* `formatStr` &mdash; format을 적용할 문자열",
                "*@return*  \nformat이 적용된 value"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getIoFormat(): String",
            "documentation": [
                "현재 컴포넌트에 설정된 ioFormat속성값을 반환한다.",
                "*@return*  \n현재 설정된 ioFormat속성값"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "inputCalendar의 title 속성을 가져온다.",
                "*@return*  \ninputCalendar의 title 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "input에 입력 된 value를 구분자 없이 반환한다. ex) 2007/11/08 -> 20071108",
                "*@return*  \n구분자 없는 날짜 문자열."
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "select()",
            "documentation": [
                "input에 입력 된 값을 select한다."
            ]
        },
        {
            "label": "setCalendarValueType(calendarValueType: String, options?: JSON)",
            "documentation": [
                "calendarValueType과 displayFormat 및 ioFormat속성을 동적으로 변경한다.",
                "*@param* `calendarValueType` &mdash; [yearMonth, yearMonthDate, yearMonthDateHour, yearMonthDateTime, yearMonthDateTimeSec]새로 설정할 calendarValueType.",
                "*@param* `options` &mdash; 설정할 ioFormat 및 displayFormat. 지정하지 않을 경우 해당 calendarValueType 기본값이 설정됨"
            ]
        },
        {
            "label": "setDefaultDate(dateStr: String)",
            "documentation": [
                "defaultDate속성을 설정한다.",
                "*@param* `dateStr` &mdash; 설정하려는 date 문자열"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setDisplayFormat(format: String)",
            "documentation": [
                "컴포넌트의 displayFormat속성을 설정한다.",
                "*@param* `format` &mdash; 새로 설정할 displayFormat"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setFormat(ioFormat: String, displayFormat: String)",
            "documentation": [
                "ioFormat속성과 displayFormat속성을 설정한다.",
                "*@param* `ioFormat` &mdash; 새로 설정할 ioFormat",
                "*@param* `displayFormat` &mdash; 새로 설정할 displayFormat"
            ]
        },
        {
            "label": "setInputReadOnly(readOnly: Boolean): ",
            "documentation": [
                "인자로 넘겨받은 boolean값에 따라 inputbox만을 readOnly할 수 있다.",
                "*@param* `readOnly` &mdash; 속성을 활성화 시키려면 true, 비활성화 시키려면 false",
                "*@return*  \n"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
                "*@param* `ref` &mdash; 적용할 ref의 경로."
            ]
        },
        {
            "label": "setSkin(skin: String)",
            "documentation": [
                "calendar의 skin을 설정한다.",
                "*@param* `skin` &mdash; [class1, class2, class3, class4, class5]사용할 skin명"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "컴포넌트의 value를 설정한다. calendar 역시 value로 선택되어진다.",
                "*@param* `value` &mdash; value값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate(): Boolean",
            "documentation": [
                "현재 설정된 validate설정에 따라 valid여부를 반환합니다. 속성 dateValidCheck=\"true\"로 설정된 경우, 해당 날짜의 유효성(length, year, month, date 범위 및 윤년 등)을 체크합니다.",
                "*@return*  \n입력 값이 유효한 값일 경우 true, 그렇지 않으면 false를 반환한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "layout": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLayout()",
            "documentation": [
                "화면 레이아웃을 조정한다.레이아웃 컴포넌트가 중첩된 경우, 부모 레이아웃이 조정된 후 순서대로 자식 레이아웃을 조정한다.height 에 auto 와 % 단위를 같이 사용하는 경우, % 는 auto 단위와 동일하게 동작한다.height 에 auto 와 fr 단위를 같이 사용하는 경우, 레이아웃 상위 컴포넌트를 기준으로 남은 공간을 계산한다.width 에 auto 단위를 사용하는 경우, 1fr 과 동일하게 동작한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "linkedDataList": [
        {
            "label": "clearFilter()",
            "documentation": [
                "linkedDataList에 설정되어 있는 filter상태를 초기화합니다."
            ]
        },
        {
            "label": "clearSort()",
            "documentation": [
                "linkedDataList의 모든 정렬을 취소해줍니다."
            ]
        },
        {
            "label": "clearSortFilter()",
            "documentation": [
                "linkedDataList에 설정된 sort상태의 filter를 초기상태로 합니다."
            ]
        },
        {
            "label": "getAllData(): Object",
            "documentation": [
                "linkedDataList의 모든 data를 배열로 반환합니다.",
                "*@return*  \nlinkedDataList의 data 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getAllFilteredData(): Object",
            "documentation": [
                "linkedDataList에서 filterRowIndex 순서의 모든 fliteredData를 배열로 반환합니다.",
                "*@return*  \nlinkedDataList의 data 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getAllFilteredJSON(): Object",
            "documentation": [
                "linkedDataList에 filteredRow 순서의 모든 filteredData를 JSON객체로 반환합니다.",
                "*@return*  \nlinkedDataList의 JSON객체 data"
            ]
        },
        {
            "label": "getAllFilteredXML(options: Object): Xml Element",
            "documentation": [
                "linkedDataList에 filteredRow의 순서의 모든 filteredData를 XML로 반환합니다.",
                "*@param* `options` &mdash; ",
                "*@return*  \nlinkedDataList의 data"
            ]
        },
        {
            "label": "getAllJSON(): Object",
            "documentation": [
                "linkedDataList의 모든 data를 JSON객체로 반환합니다.",
                "*@return*  \nlinkedDataList의 JSON객체 data"
            ]
        },
        {
            "label": "getAllNoFilteredData(): Object",
            "documentation": [
                "linkedDataList의 filter상태가 되지 않은 상태의 모든 데이터를 가져옵니다.",
                "*@return*  \nlinkedDataList의 data 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getAllXML(): Xml Element",
            "documentation": [
                "linkedDataList의 모든 data를 XML로 반환합니다.",
                "*@return*  \nlinkedDataList의 data"
            ]
        },
        {
            "label": "getCellData(rowIndex: Number, colIndex: String): String",
            "documentation": [
                "rowIndex와 colIndex에 해당하는 셀의 데이터를 반환합니다.",
                "*@param* `rowIndex` &mdash; 셀의 행 번호",
                "*@param* `colIndex` &mdash; 셀의 컬럼 번호 혹은 컬럼의 아이디",
                "*@return*  \nrowIndex와 colIndex에 해당하는 셀의 데이터"
            ]
        },
        {
            "label": "getColData(colID: Number): Object",
            "documentation": [
                "colIndex에 해당하는 열의 데이터(filter나 sort처리되지 않은)를 배열로 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 가져올 열 번호 혹은 컬럼 아이디",
                "*@return*  \ncolIndex에 해당하는 열의 데이터의 배열"
            ]
        },
        {
            "label": "getColumnDistinctDataArray(colIndex: Number): Object",
            "documentation": [
                "해당 colIndex에 존재하는 중복된 항목을 제거한 data를 배열을 정렬하여 보여줍니다.",
                "*@param* `colIndex` &mdash; 중복된 항목을 제거한 data를 검색 col의 Index",
                "*@return*  \ndata를 저장한 배열"
            ]
        },
        {
            "label": "getDataLength(): number",
            "documentation": [
                "현재 화면에 보이는 행의 수를 반환합니다. getRowCount()와 동일.",
                "*@return*  \n행의 수"
            ]
        },
        {
            "label": "getDataRow(filteredRowIndex: Number): Object",
            "documentation": [
                "rowIndex에 해당하는 행의 데이터를 컬럼의 아이디를 키로 하는 해쉬 형태로 반환합니다.",
                "*@param* `filteredRowIndex` &mdash; 데이터를 가져올 행 번호",
                "*@return*  \nfilteredRowIndex에 해당하는 행의 데이터의 배열"
            ]
        },
        {
            "label": "getDeletedData(): Object",
            "documentation": [
                "삭제 상태인 행들을 배열로 반환합니다.",
                "*@return*  \n삭제 상태인 행들의 데이터 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getDeletedIndex(): Object",
            "documentation": [
                "삭제 상태인 행의 번호를 배열로 반환합니다.",
                "*@return*  \n삭제 상태인 행의 번호의 배열"
            ]
        },
        {
            "label": "getDeletedJSON(): Object",
            "documentation": [
                "삭제 상태인 행들의 데이터를 JSON객체로 반환합니다.",
                "*@return*  \n삭제 상태인 행들의 JSON객체 데이터"
            ]
        },
        {
            "label": "getDeletedXML(): XML Element",
            "documentation": [
                "삭제 상태인 행들의 데이터를 XML로 반환합니다.",
                "*@return*  \n삭제 상태인 행들의 데이터 XML"
            ]
        },
        {
            "label": "getFilteredColData(colIndex: number): Object",
            "documentation": [
                "FilteredRow에 해당하는 Col의 데이터를 배열로 반환합니다.",
                "*@param* `colIndex` &mdash; ",
                "*@return*  \ncolIndex에 해당하는 열의 filter데이터의 배열"
            ]
        },
        {
            "label": "getFilteredRowIndex(realRowIndex: Number)",
            "documentation": [
                "RowIndex에 대한 filteredRowIndex를 리턴한다.",
                "*@param* `realRowIndex` &mdash; "
            ]
        },
        {
            "label": "getFusionChartData(chartType: String, labelColumn: String, seriesColumns: String): Object",
            "documentation": [
                "linkedDataList를 fusionChart의 json데이터로 반환합니다",
                "*@param* `chartType` &mdash; fusionChart의 차트타입",
                "*@param* `labelColumn` &mdash; fusionChart의 lable 데이터로 사용할 DataCollection의 column의 ID값",
                "*@param* `seriesColumns` &mdash; fusionChart의 series 데이터로 사용할 DataCollection column 정보로 배열형식의 문자열",
                "*@return*  \nfusionChart_Data 변환된 fusionChart data(json)"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "linkedDataList 객체의 id를 반환합니다.",
                "*@return*  \nlinkedDataList 객체의 id를 반환합니다."
            ]
        },
        {
            "label": "getInsertedData(): Object",
            "documentation": [
                "삽입 상태인 행들의 데이터를 배열로 반환합니다.",
                "*@return*  \n삽입 상태인 행들의 데이터 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getInsertedIndex(): Object",
            "documentation": [
                "삽입 상태인 행의 번호를 배열로 반환합니다.",
                "*@return*  \n삽입 상태인 행의 번호의 배열"
            ]
        },
        {
            "label": "getInsertedJSON(): Object",
            "documentation": [
                "삽입 상태인 행들의 데이터를 JSON객체로 반환합니다.",
                "*@return*  \n삽입 상태인 행들의 JSON객체 데이터"
            ]
        },
        {
            "label": "getInsertedXML(): XML Element",
            "documentation": [
                "삽입 상태인 행들의 데이터를 XML로 반환합니다.",
                "*@return*  \n삽입 상태인 행들의 데이터 XML"
            ]
        },
        {
            "label": "getLinkedRealRowIndex(filteredRowIndex: Number): Number",
            "documentation": [
                "linkedDataList를 독립적인 0번째부터 시작하는 data set으로 가정했을때의 realRowIndex, 즉 linkedDataList 세계에서의 realRowIndex. drilldown에서 주로 사용",
                "*@param* `filteredRowIndex` &mdash; ",
                "*@return*  \nlinkedDataList 내부의 realRowIndex"
            ]
        },
        {
            "label": "getMatchedColumnData(matchCol: Number, dataValue: String, targetCol: Number, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colIndex의 값이 dataValue와 같은 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다.",
                "*@param* `matchCol` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `targetCol` &mdash; 데이터를 가져올 열번호",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \ntargetCol에 해당하는 열의 값을 가지고 있는 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getMatchedData(colID: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID 값이 dataValue와 같은 행들의 data를 배열로 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안의 data를 가지고 있는 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getMatchedIndex(colID: String, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 index를 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colID해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 index를 가지고 있는 배열"
            ]
        },
        {
            "label": "getMatchedJSON(colID: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 data를 JSON객체로 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colID해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안의 data를 가지고 있는 JSON객체"
            ]
        },
        {
            "label": "getMatchedXML(colID: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Xml element",
            "documentation": [
                "stRowIndex부터 lastRowIndex까지의 범위의 행중에서 colID의 값이 dataValue와 같은 행들의 data를 XML로 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colID해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안의 data를 가지고 있는 XML"
            ]
        },
        {
            "label": "getModifiedData(): Object",
            "documentation": [
                "변경(삽입, 갱신, 삭제) 행들의 데이터를 배열로 반환합니다.",
                "*@return*  \n변경(삽입, 갱신, 삭제) 행들의 데이터 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getModifiedIndex(): Object",
            "documentation": [
                "추가나 삭제 상태인 행의 번호를 배열로 반환합니다.",
                "*@return*  \n추가나 삭제 상태인 행의 번호의 배열"
            ]
        },
        {
            "label": "getModifiedJSON(): Object",
            "documentation": [
                "변경(삽입, 갱신, 삭제) 행들의 데이터를 JSON객체로 반환합니다.",
                "*@return*  \n변경(삽입, 갱신, 삭제) 행들의 JSON객체 데이터"
            ]
        },
        {
            "label": "getModifiedXML(): Xml Element",
            "documentation": [
                "변경(삽입, 갱신, 삭제) 행들의 데이터를 XML로 반환합니다.",
                "*@return*  \n변경(삽입, 갱신, 삭제) 행들의 데이터 XML"
            ]
        },
        {
            "label": "getObjectType(): String",
            "documentation": [
                "dataCollection의 Type을 반환합니다.",
                "*@return*  \ndataCollection의 타입을 반환합니다.[dataMap, linkedDataList, linkedDataList]"
            ]
        },
        {
            "label": "getOption(attr: String): String",
            "documentation": [
                "linkedDataList 객체의 옵션을 조회하는 API",
                "*@param* `attr` &mdash; 조회하는 옵션의 이름",
                "*@return*  \n조회한 객체의 옵션이 존재할 경우 옵션의 value를 반환합니다."
            ]
        },
        {
            "label": "getOriginalCellData(filteredRowIndex: Number, colID: String): String",
            "documentation": [
                "filteredRowIndex와 colID에 해당하는 셀의 데이터를 반환합니다.",
                "*@param* `filteredRowIndex` &mdash; 셀의 초기 행 번호",
                "*@param* `colID` &mdash; 셀의 초기 컬럼 번호 혹은 컬럼의 아이디",
                "*@return*  \nrowIndex와 colIndex에 해당하는 셀의 데이터"
            ]
        },
        {
            "label": "getParentRealRowIndex(linkedRealRowIndex: Number): Number",
            "documentation": [
                "linkedRealRowIndex(linkedDataList 세계에서의 realRowIndex)를 통해 실제 realRowIndex(부모 dataList에 해당하는 rowIndex)를 반환한다.",
                "*@param* `linkedRealRowIndex` &mdash; ",
                "*@return*  \n부모 dataList의 rowIndex 즉 realRowIndex"
            ]
        },
        {
            "label": "getRangeData(from: Number, to: Number): Object",
            "documentation": [
                "from부터 to 까지의 범위의 행의 data를 배열로 반환합니다.",
                "*@param* `from` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `to` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안의 data를 가지고 있는 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getRangeJSON(from: Number, to: Number): Object",
            "documentation": [
                "from부터 to 까지의 범위의 행의 data를 JSON객체로 반환합니다.",
                "*@param* `from` &mdash; 데이터를 가져오는 범위의 시작 행 번호",
                "*@param* `to` &mdash; 데이터를 가져오는 범위의 끝 행 번호",
                "*@return*  \nrowIndex에 해당하는 행의 JSON객체 데이터"
            ]
        },
        {
            "label": "getRangeXML(from: Number, to: Number): Xml Element",
            "documentation": [
                "from부터 to 까지의 범위의 행의 data를 xml로 반환합니다.",
                "*@param* `from` &mdash; 데이터를 가져오는 범위의 시작 행 번호",
                "*@param* `to` &mdash; 데이터를 가져오는 범위의 끝 행 번호",
                "*@return*  \nrowIndex에 해당하는 행의 xml데이터"
            ]
        },
        {
            "label": "getRealRowIndex(filteredRowIndex: Number)",
            "documentation": [
                "filteredRowIndex에 대한 실제 데이터의 filteredRowIndex를 리턴한다.",
                "*@param* `filteredRowIndex` &mdash; 현재 표시되고 있는 셀의 행 번호"
            ]
        },
        {
            "label": "getRowCount(): Number",
            "documentation": [
                "linkedDataList의 데이터 row의 건수를 반환합니다.",
                "*@return*  \nlinkedDataList의 데이터 row의 건수"
            ]
        },
        {
            "label": "getRowData(filteredRowIndex: Number): Object",
            "documentation": [
                "rowIndex에 해당하는 행의 데이터를 배열로 반환합니다.",
                "*@param* `filteredRowIndex` &mdash; 데이터를 가져올 행 번호",
                "*@return*  \nrowIndex에 해당하는 행의 데이터의 배열"
            ]
        },
        {
            "label": "getRowIndexByStatus(statusStr: String): Object",
            "documentation": [
                "statusStr과 상태가 일치하는 행의 번호를 배열로 반환합니다.",
                "*@param* `statusStr` &mdash; 상태가 일치하는 행을 찾기 위한 문자열",
                "*@return*  \nstatusStr과 상태가 일치하는 행의 번호의 배열"
            ]
        },
        {
            "label": "getRowJSON(filteredRowIndex: Number): Object",
            "documentation": [
                "filteredRowIndex에 해당하는 행의 data를 JSON객체로 반환합니다.",
                "*@param* `filteredRowIndex` &mdash; 데이터를 가져올 행 번호",
                "*@return*  \n해당 행의 JSON객체 데이터"
            ]
        },
        {
            "label": "getRowStatus(filteredRowIndex: Number): String",
            "documentation": [
                "filteredRowIndex에 해당하는 행의 상태를 반환합니다. (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")",
                "*@param* `filteredRowIndex` &mdash; 상태를 반환할 행 번호",
                "*@return*  \n행의 상태를 나타내는 문자 (초기상태:\"R\", 갱신:\"U\", 삽입:\"C\", 삭제:\"D\", 삽입 후 삭제:\"V\")"
            ]
        },
        {
            "label": "getRowStatusValue(filteredRowIndex: Number): Number",
            "documentation": [
                "filteredRowIndex에 해당하는 행의 상태를 숫자로 반환합니다. (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)",
                "*@param* `filteredRowIndex` &mdash; 상태를 반환할 행 번호",
                "*@return*  \n행의 상태를 나타내는 숫자 (초기상태:0, 갱신:1, 삽입:2, 삭제:3, 삽입 후 삭제:4)"
            ]
        },
        {
            "label": "getRowXML(filteredRowIndex: Number): XML Element",
            "documentation": [
                "filteredRowIndex에 해당하는 행의 data를 XML로 반환합니다.",
                "*@param* `filteredRowIndex` &mdash; 데이터를 가져올 행 번호",
                "*@return*  \n행의 XML 데이터"
            ]
        },
        {
            "label": "getTotalCol(): Number",
            "documentation": [
                "컬럼의 개수를 반환 한다.",
                "*@return*  \n컬럼의 개수"
            ]
        },
        {
            "label": "getTotalRow(): Number",
            "documentation": [
                "행의 개수를 반환 한다.",
                "*@return*  \n행의 개수"
            ]
        },
        {
            "label": "getUnmatchedColumnData(matchCol: Number, dataValue: String, targetCol: Number, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colIndex의 값이 dataValue와 다른 행들을 찾아서 targetCol에 해당하는 열의 값들을 배열로 반환합니다.",
                "*@param* `matchCol` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colIndex해당하는 열의 값과 비교할 data",
                "*@param* `targetCol` &mdash; 데이터를 가져올 열번호",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \ntargetCol에 해당하는 열의 값을 가지고 있는 배열 (1차원 배열)"
            ]
        },
        {
            "label": "getUnmatchedData(colID: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 다른 행들의 data를 배열로 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colID해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 data를 가지고 있는 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getUnmatchedIndex(colID: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 다른 행들의 index를 배열로 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colID해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 index를 가지고 있는 배열"
            ]
        },
        {
            "label": "getUnmatchedJSON(colID: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Object",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 다른 행들의 data를 JSON객체로 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colID해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 index를 가지고 있는 JSON객체"
            ]
        },
        {
            "label": "getUnmatchedXML(colID: Number, dataValue: String, exactMatch: Boolean, stRowIndex: Number, lastRowIndex: Number: Number): Xml element",
            "documentation": [
                "stRowIndex부터 lastRowIndex 까지의 범위의 행중에서 colID의 값이 dataValue와 다른 행들의 data를 Xml로 반환합니다.",
                "*@param* `colID` &mdash; 데이터를 검사할 열번호 혹은 컬럼 아이디",
                "*@param* `dataValue` &mdash; colID해당하는 열의 값과 비교할 data",
                "*@param* `exactMatch` &mdash; 정확히 일치하는지 여부",
                "*@param* `stRowIndex` &mdash; 데이터를 가져오는 것을 시작할 행 번호",
                "*@param* `lastRowIndex` &mdash; 데이터를 가져오는 것을 끝낼 행 번호",
                "*@return*  \n범위안에 일치하는 index를 가지고 있는 Xml"
            ]
        },
        {
            "label": "getUpdatedData(): Object",
            "documentation": [
                "갱신 상태인 행들의 데이터를 배열로 반환합니다.",
                "*@return*  \n갱신 상태인 행들의 데이터 배열 (2차원 배열)"
            ]
        },
        {
            "label": "getUpdatedIndex(): Object",
            "documentation": [
                "갱신 상태인 행의 번호를 배열로 반환합니다.",
                "*@return*  \n갱신 상태인 행의 번호의 배열"
            ]
        },
        {
            "label": "getUpdatedJSON(): Object",
            "documentation": [
                "갱신 상태인 행들의 데이터를 JSON객체로 반환합니다.",
                "*@return*  \n갱신 상태인 행들의 JSON객체 데이터"
            ]
        },
        {
            "label": "getUpdatedXML(): Xml Element",
            "documentation": [
                "갱신 상태인 행들의 데이터를 XML로 반환합니다.",
                "*@return*  \n갱신 상태인 행들의 데이터 XML"
            ]
        },
        {
            "label": "multisort(options: Object)",
            "documentation": [
                "option에 따라서 여러개의 열을 동시에 정렬해줍니다.",
                "*@param* `options` &mdash; 정렬에 대한 옵션을 JSON형식으로 가지고 있는 object"
            ]
        },
        {
            "label": "removeColumnFilter(colID: Number)",
            "documentation": [
                "colID에 해당하는 열에 적용된 filter를 삭제합니다.",
                "*@param* `colID` &mdash; filter를 삭제할 열 번호 혹은 컬럼 아이디"
            ]
        },
        {
            "label": "removeColumnFilterAll()",
            "documentation": [
                "모든 열에 적용된 filter를 삭제합니다."
            ]
        },
        {
            "label": "setColumnFilter(filterOptions: Object)",
            "documentation": [
                "colIndex에 해당하는 열에 filter를 적용합니다.",
                "*@param* `filterOptions` &mdash; filter를 적용할 옵션 "
            ]
        },
        {
            "label": "setCondition(type: string, condition: string)",
            "documentation": [
                "linkedDataList의 filter or sort를 설정합니다.",
                "*@param* `type` &mdash; filter / sort 설정할 상태 값.",
                "*@param* `condition` &mdash; 정렬 상태의 조건을 입력합니다."
            ]
        },
        {
            "label": "setOption(key: String, value: String)",
            "documentation": [
                "linkedDataList 객체의 옵션을 설정하는 API",
                "*@param* `key` &mdash; 조회하는 옵션의 이름",
                "*@param* `value` &mdash; 조회한 옵션에 설정할 값"
            ]
        },
        {
            "label": "sort(bodyColumnID: String, sortType: Number)",
            "documentation": [
                "linkedDataList의 bodyColumnID에 해당하는 열을 정렬해줍니다.",
                "*@param* `bodyColumnID` &mdash; 정렬시킬 열의 아이디",
                "*@param* `sortType` &mdash; 정렬 옵션 0이면 오름차순 1이면 내림차순 2이면 정렬을 취소"
            ]
        }
    ],
    "mapchart": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addMapEvent(evName: String, func: func)",
            "documentation": [
                "지도에 필요한 이벤트를 직접 추가한다. d3이 지원하는 이벤트만 효과가 있다.",
                "*@param* `evName` &mdash; 추가하고자 할 이벤트",
                "*@param* `func` &mdash; 추가하고자 할 이벤트 핸들러 함수"
            ]
        },
        {
            "label": "addPattern(patternData: object)",
            "documentation": [
                "svg에 하나의 패턴을 만들기 위한 함수",
                "*@param* `patternData` &mdash; 패턴에 대한 정보를 가지고 있는 JSON 객체"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "changeMap(code: String)",
            "documentation": [
                "인자로 넘겨준 code에 해당하는 지도가 그려지도록 화면을 변경한다.",
                "*@param* `code` &mdash; 변경하고자 하는 지도의 코드값"
            ]
        },
        {
            "label": "createPattern(userPatternData: object, useDefaultPattern?: boolean)",
            "documentation": [
                "",
                "*@param* `userPatternData` &mdash; 패턴에 대한 정보를 가지고 있는 JSON 객체들의 배열",
                "*@param* `useDefaultPattern` &mdash; 컴포넌트 내부에 있는 pattern 사용 여부"
            ]
        },
        {
            "label": "drillup()",
            "documentation": [
                "현재 지도의 부모 지도가 그려지도록 지도를 변경한다. 현재 지도가 최상위 지도(전국지도)인 경우에는 아무 동작을 하지 않는다."
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getCurrentMap(): String",
            "documentation": [
                "현재 그려진 지도의 코드값을 가져온다.",
                "*@return*  \n현재 그려진 지도의 코드값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getParentMap(): String",
            "documentation": [
                "현재 지도의 부모 지도의 코드값을 가져온다.",
                "*@return*  \n현재 지도의 부모 지도의 코드값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setScale(scale: Float)",
            "documentation": [
                "지도의 배율을 설정하는 함수",
                "*@param* `scale` &mdash; 설정할 배율값 (0보다 큰 float값으로 설정한다.)"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "menu": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "closeMenu()",
            "documentation": [
                "현재 열려있는 메뉴를 닫습니다."
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSelectedMenuIndex()",
            "documentation": [
                "1 Depth 메뉴를 클릭 상태로 변경합니다. ( 0부터 시작하는 인덱스를 인자값으로 받습니다. )"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setXML(xmlDoc: XML Document)",
            "documentation": [
                "xml data를 받아서 menu에 세팅합니다.",
                "*@param* `xmlDoc` &mdash; menu에 세팅할 xml data"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "showChildrenHorizontal(메뉴의: Number, 메뉴를: Boolean)",
            "documentation": [
                "",
                "*@param* `메뉴의` &mdash; node index",
                "*@param* `메뉴를` &mdash; 가로보기 설정 여부 true, false"
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "multiselect": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "deleteItem(index: String): Object",
            "documentation": [
                "인자로 넘겨진 index에 해당하는 항목을 삭제합니다.",
                "*@param* `index` &mdash; 삭제하고자 하는 항목의 index",
                "*@return*  \n삭제된 항목 오브젝트\n {\n     label : new String(),\n     value : new String(),\n     xml : new Object()\n };"
            ]
        },
        {
            "label": "deleteSelectedItems()",
            "documentation": [
                "선택되어 있는 항목을 삭제합니다."
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getAllValue(): String",
            "documentation": [
                "컴포넌트의 모든 항목의 value를 반환합니다. 선택된 항목들은 공백으로 구분된 문자열로 반환합니다.",
                "*@return*  \n모든 항목들의 value"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getIdxValue(index: Number): String",
            "documentation": [
                "해당 index의 항목의 value를 반환합니다.",
                "*@param* `index` &mdash; 해당 항목의 인덱스",
                "*@return*  \n해당 index의 항목의 value"
            ]
        },
        {
            "label": "getItemCount(): Number",
            "documentation": [
                "컴포넌트가 가진 항목 수를 반환합니다.",
                "*@return*  \n컴포넌트가 가진 항목 수"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedIndex(separator?: String): Number",
            "documentation": [
                "선택된 항목들의 index를 반환합니다.항목이 여러 개인 경우, separator를 구분자로 하여 반환합니다.separator를 설정하지 않은 경우 space를 구분자로 사용합니다.",
                "*@param* `separator` &mdash; 항목 구분자",
                "*@return*  \n선택된 항목들의 index"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getText(separator?: String): String",
            "documentation": [
                "현재 선택된 항목의 label을 반환합니다.항목이 여러 개인 경우, separator를 구분자로 하여 반환합니다.separator를 설정하지 않은 경우 space를 구분자로 사용합니다.",
                "*@param* `separator` &mdash; 항목 구분자",
                "*@return*  \n선택된 항목들의 label"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(separator?: String): String",
            "documentation": [
                "컴포넌트의 선택된 항목들의 value를 반환합니다.항목이 여러 개인 경우, separator를 구분자로 하여 반환합니다.separator를 설정하지 않은 경우 space를 구분자로 사용합니다.",
                "*@param* `separator` &mdash; 항목 구분자",
                "*@return*  \n선택된 항목들의 value"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSelectedIndex(idx: Number)",
            "documentation": [
                "해당 인덱스에 해당하는 항목을 선택합니다.",
                "*@param* `idx` &mdash; 선택하려는 항목의 인덱스"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 propertyName에 해당하는 style의 값을 설정합니다.",
                "*@param* `propertyName` &mdash; 바꾸고 싶은 style 값의 이름",
                "*@param* `value` &mdash; 설정할 style의 값"
            ]
        },
        {
            "label": "setText(label: String)",
            "documentation": [
                "인자로 넘겨진 label과 같은 label을 가지는 항목을 선택합니다.여러 항목을 선택하려고 하는 경우는 label을 공백으로 구분하여 인자로 넘겨야 합니다.",
                "*@param* `label` &mdash; 선택하고자 하는 항목의 label"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "컴포넌트에 인자로 넘겨진 value와 같은 값을 가진 항목을 선택하고 model에 반영합니다.",
                "*@param* `value` &mdash; 선택하고자 하는 항목의 value"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate()",
            "documentation": [
                "multiselect의 validate를 체크합니다. multiselect는 필수입력 여부만 체크합니다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "multiupload": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "browserDisable(disable: Boolean)",
            "documentation": [
                "transparent 모드에서 파일 열기 기능을 disable 시킵니다. (transparent mode 전용)",
                "*@param* `disable` &mdash; disable 여부"
            ]
        },
        {
            "label": "changeAction(action: String)",
            "documentation": [
                "multiupload 객체가 입력받은 값을 multiupload할 때 URL을 설정합니다.",
                "*@param* `action` &mdash; multiupload시에 전송될 URL"
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "disable: BooleanCancel(disable: Boolean)",
            "documentation": [
                "취소 버튼  disable 시킵니다.",
                "*@param* `disable` &mdash; 여부"
            ]
        },
        {
            "label": "disable: BooleanUpload(disable: Boolean)",
            "documentation": [
                "업로드 버튼  disable 시킵니다.",
                "*@param* `disable` &mdash; 여부"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getFileCount(): Number",
            "documentation": [
                "현재 전송할 파일의 수를 반환합니다.",
                "*@return*  \n전송할 파일의 수"
            ]
        },
        {
            "label": "getFileInfos(): Array<Object",
            "documentation": [
                "현재 멀티업로드 그리드에 있는 파일정보를 배열로 반환합니다.",
                "*@return*  \n> 그리드에 있는 파일정보  \n [{\n    name \t\t: new String(),\t\t//파일명.\n    size \t\t: new Integer(),\t//파일 사이즈(단위:byte).\n    displaySize : new String() \t\t//화면표시 파일 사이즈\n }]"
            ]
        },
        {
            "label": "getFileNames(): Array",
            "documentation": [
                "현재 멀티업로드 그리드에 있는 파일명을 배열로 반환합니다.",
                "*@return*  \n그리드에 있는 파일명"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "isUploading(): Boolean",
            "documentation": [
                "업로드 중인지 여부를 반환합니다.",
                "*@return*  \n업로드 여부"
            ]
        },
        {
            "label": "removeAllFiles()",
            "documentation": [
                "현재 멀티업로드 그리드에 있는 파일명을 모두 삭제합니다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "removeFile(name: String)",
            "documentation": [
                "업로드 하기 위해 선택된 파일 중에서 업로드에서 제외하려는 파일을 리스트에서 삭제합니다.",
                "*@param* `name` &mdash; 삭제하려는 파일명"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setMaxFileCount(value: Number)",
            "documentation": [
                "멀티 업로드 컴포넌트의 전송 가능 파일 개수를 value로 설정합니다.",
                "*@param* `value` &mdash; 최대 개수"
            ]
        },
        {
            "label": "setMaxFileSize(value: Number)",
            "documentation": [
                "멀티 업로드 컴포넌트의 전송 가능 파일 사이즈를 value로 설정합니다.",
                "*@param* `value` &mdash; 최대 파일 사이즈(Kb)"
            ]
        },
        {
            "label": "setMessageDuplicateText(label: String)",
            "documentation": [
                "멀티 업로드 컴포넌트의 중복 메시지 text 를 바꿉니다.",
                "*@param* `label` &mdash; 변경할 중복 메시지"
            ]
        },
        {
            "label": "setMessageMaxCountText(label: String)",
            "documentation": [
                "멀티 업로드 컴포넌트의 최대파일 세부 메시지 text를 바꿉니다.",
                "*@param* `label` &mdash; 변경할 메세지"
            ]
        },
        {
            "label": "setMessageMaxSizeText(label: String)",
            "documentation": [
                "멀티 업로드 컴포넌트의 최대 사이즈 메시지 text 를 바꿉니다.",
                "*@param* `label` &mdash; 변경할 메시지"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setParam(index: Number, name: String, value: String)",
            "documentation": [
                "업로드 param 지정을 지정합니다.",
                "*@param* `index` &mdash; 파라미터의 인덱스",
                "*@param* `name` &mdash; 파라미터 이름",
                "*@param* `value` &mdash; 파라미터 값"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRefCancelText(label: String)",
            "documentation": [
                "멀티 업로드 컴포넌트의 취소중 text 를 바꿉니다.",
                "*@param* `label` &mdash; 제목"
            ]
        },
        {
            "label": "setRefProgressText(label: String)",
            "documentation": [
                "멀티 업로드 컴포넌트의 진행중 text를 바꿉니다.",
                "*@param* `label` &mdash; 변경할 text"
            ]
        },
        {
            "label": "setRefSuccessText(label: String)",
            "documentation": [
                "멀티 업로드 컴포넌트의 완료 text를 바꿉니다.",
                "*@param* `label` &mdash; 변경할 text"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "startUpload()",
            "documentation": [
                "멀티 업로드 컴포넌트의 업로드를 시작합니다."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "output": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getFormatValue(): String",
            "documentation": [
                "format이 적용 된 값을 반환한다.",
                "*@return*  \nforamt된 값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getRawValue(): String",
            "documentation": [
                "format이 적용되지 않은 value를 반환한다.",
                "*@return*  \n가공되지 않은 value"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "화면에 보여지는 값을 반환한다.Format이 적용되지않은 값은 getRawValue API를 사용한다.",
                "*@return*  \n현재 화면에 보여지는 값."
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setBackgroundImage(url: String)",
            "documentation": [
                "배경이미지를 설정한다. 해당값은 CSS의 background-image 속성값으로 설정된다.",
                "*@param* `url` &mdash; 이미지의 URL"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setDisplayFormat(format: String)",
            "documentation": [
                "displayFormat 속성을 설정한다.",
                "*@param* `format` &mdash; 새로 설정할 displayFormat"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setHeight(height: Number)",
            "documentation": [
                "height를 설정하며 px단위로 적용된다. 숫자가 아닌 값이 오면 무시한다.",
                "*@param* `height` &mdash; 컴포넌트 height"
            ]
        },
        {
            "label": "setLabel(label: Stirng)",
            "documentation": [
                "label속성(value)의 값을 변경한다.setValue와 동일한 기능을 제공한다.",
                "*@param* `label` &mdash; 출력 할 text"
            ]
        },
        {
            "label": "setLocaleRef(localeRef: String)",
            "documentation": [
                "localeRef 속성값을 설정한다.",
                "*@param* `localeRef` &mdash; 새로 설정할 localeRef 값"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정한다.",
                "*@param* `ref` &mdash; 적용할 ref의 경로"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "value(화면에 출력되는 text)를 설정한다.",
                "*@param* `value` &mdash; 화면에 출력될 text"
            ]
        },
        {
            "label": "setWidth(width: Number)",
            "documentation": [
                "width를 설정하며 px단위로 적용된다. 숫자가 아닌 값이 오면 무시한다.",
                "*@param* `width` &mdash; 컴포넌트의 width."
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "pageControl": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedIndex(): Number",
            "documentation": [
                "선택된 index를 반환하는 함수입니다.",
                "*@return*  \n현재 선택된 index."
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "moveToLeft(direction?: String)",
            "documentation": [
                "선택된 index를 1 감소시킵니다.",
                "*@param* `direction` &mdash; pagingType이 2일때 드래그 모션에 상관 없이 강제 이동 방향을 표시.(previous: 좌, next: 우)"
            ]
        },
        {
            "label": "moveToRight(direction?: String)",
            "documentation": [
                "선택된 index를 1 증가시킵니다.",
                "*@param* `direction` &mdash; pagingType이 2일때 드래그 모션에 상관 없이 강제 이동 방향을 표시.(previous: 좌, next: 우)"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setCount(count: Number)",
            "documentation": [
                "PageList의 Total page count를 새로 지정하는 함수입니다. 변경된 total page count값으로 pageList가 갱신됩니다.API 호출시 페이지가 첫페이지로 초기화 됩니다.",
                "*@param* `count` &mdash; 변경할 PageList의 Total Page Count"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSelectedIndex(idx: Number, direction?: String)",
            "documentation": [
                "page의 선택된 index를 변경하는 함수입니다.",
                "*@param* `idx` &mdash; 선택하고자 하는 index",
                "*@param* `direction` &mdash; pagingType이 2일때 드래그 모션에 상관 없이 강제 이동 방향을 표시.(previous: 좌, next: 우)"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 propertyName에 해당하는 style의 값을 설정합니다.",
                "*@param* `propertyName` &mdash; 바꾸고 싶은 style 값의 이름",
                "*@param* `value` &mdash; 설정할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "pageInherit": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getSrc(): String",
            "documentation": [
                "현재 설정된 화면의 src url을 반환합니다.",
                "*@return*  \n현재 설정된 화면의 src url"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "pageList": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getCount(): Number:Y",
            "documentation": [
                "PageList의 Total page count를 반환하는 함수입니다.",
                "*@return*  \nTotal page count"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getLabel(idx: Number): String",
            "documentation": [
                "idx에 해당하는 label을 반환합니다.",
                "*@param* `idx` &mdash; page의 index값",
                "*@return*  \nidx에 해당하는 label"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPageSize()",
            "documentation": [
                "PageList의 pageSize를 조회하는 함수입니다."
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedIndex(): Number",
            "documentation": [
                "선택된 index를 반환하는 함수입니다.",
                "*@return*  \n현재 선택된 index."
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "moveLeft()",
            "documentation": [
                "선택된 index를 1 감소시킵니다."
            ]
        },
        {
            "label": "moveRight()",
            "documentation": [
                "선택된 index를 1 증가시킵니다."
            ]
        },
        {
            "label": "pageLeft()",
            "documentation": [
                "pageSize 기준으로 이전 page의 첫번째 page를 선택합니다. pageSize=10이고 현재 23일때, pageLeft를 하면 11로 이동합니다."
            ]
        },
        {
            "label": "pageRight()",
            "documentation": [
                "pageSize 기준으로 다음 page의 첫번째 page를 선택합니다. pageSize=10이고 현재 23일때, pageRight하면 31로 이동합니다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setCount(count: Number, flag?: Boolean)",
            "documentation": [
                "PageList의 Total page count를 새로 지정하는 함수입니다. 변경된 total page count값으로 pageList가 갱신됩니다.API 호출시 페이지가 첫페이지로 초기화 됩니다.",
                "*@param* `count` &mdash; 변경할 PageList의 Total Page Count",
                "*@param* `flag` &mdash; 이전 출력 형태 유지 유무, true : 유지, false 또는 미설정시 1페이지로 갱신."
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setIdxClass(idx: Number)",
            "documentation": [
                "setSelectedIndex와 같은 역할을 하는 함수입니다.",
                "*@param* `idx` &mdash; 선택하고자 하는 index"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSelectedIndex(idx: Number)",
            "documentation": [
                "page의 선택된 index를 변경하는 함수입니다.",
                "*@param* `idx` &mdash; 선택하고자 하는 index"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "setSelectedIndex와 같은 역할을 하는 함수입니다.",
                "*@param* `value` &mdash; 선택하고자 하는 index"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "panelContainer": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addPanel(options?: Object)",
            "documentation": [
                "panel 을 추가합니다.",
                "*@param* `options` &mdash; panel 속성 Object"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "closePanel(id: String)",
            "documentation": [
                "panel을 닫습니다.",
                "*@param* `id` &mdash; 닫고자 하는 panel의 id"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPanelInfo(): String",
            "documentation": [
                "panel의 속성정보들을 얻습니다.",
                "*@return*  \npanel의 속성"
            ]
        },
        {
            "label": "getPanelInfoById(id: String): String",
            "documentation": [
                "panel id에 맞는 panel 속성을 찾는다.",
                "*@param* `id` &mdash; 찾고자 하는 속성의 panel id",
                "*@return*  \npanel id에 맞는 속성"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "openPanel(id: String)",
            "documentation": [
                "panel을 엽니다.",
                "*@param* `id` &mdash; 열고자 하는 panel의 id"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "removePanel(rowIndex: Number, colIndex: Number)",
            "documentation": [
                "rowIndex , colIndex 에 맞는 panel을 삭제합니다.",
                "*@param* `rowIndex` &mdash; 선택하고자 하는 rowIndex",
                "*@param* `colIndex` &mdash; 선택하고자 하는 colIndex"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPanelTitle(id: String, title: String)",
            "documentation": [
                "panel의 title을 설정합니다.",
                "*@param* `id` &mdash; title을 설정하고 자 하는 panel id",
                "*@param* `title` &mdash; panel title에 설정하고자 하는 title"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "pivotTable": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "radio": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addItem(value: String, label: String, index: Number): Number",
            "documentation": [
                "항목을 추가하는 기능으로 index를 주지 않으면 하위로 추가된다.",
                "*@param* `value` &mdash; 항목의 value",
                "*@param* `label` &mdash; 항목의 label",
                "*@param* `index` &mdash; 항목의 추가 될 index",
                "*@return*  \n추가 된 항목의 index"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "click(index: Number)",
            "documentation": [
                "index에 해당하는 항목을 click 한 것과 같은 효과를 내어 click에 관련한 이벤트도 발생된다.",
                "*@param* `index` &mdash; click 이벤트를 발생시킬 항목의 index"
            ]
        },
        {
            "label": "deleteItem(index: Number): JSON",
            "documentation": [
                "index에 해당하는 항목을 삭제한다.",
                "*@param* `index` &mdash; 삭제할 항목의 index",
                "*@return*  \n삭제된 항목의 정보가 담긴 JSON\n label : 항목의 label\n value : 항목의 value"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getItemCount(): Number",
            "documentation": [
                "항목 수를 반환한다.",
                "*@return*  \n항목 수"
            ]
        },
        {
            "label": "getItemDisabled(index: Number): Boolean",
            "documentation": [
                "index에 해당하는 항목의 활성화(disabled) 여부를 반환한다.",
                "*@param* `index` &mdash; 항목의 index",
                "*@return*  \n항목의 비활성화 여부"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getSelectedIndex(): Number",
            "documentation": [
                "선택 된 항목의 index를 반환한다.",
                "*@return*  \n선택 된 항목의 index"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getText(): String",
            "documentation": [
                "선택 된 항목의 label을 반환한다.",
                "*@return*  \n선택 된 항목의 label"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "선택 된 항목의 value를 반환한다.",
                "*@return*  \n선택 된 항목의 value"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeAll()",
            "documentation": [
                "모든 항목을 삭제한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "reset()",
            "documentation": [
                "항목의 선택을 해제한다."
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setItemDisabled(index: Number, falg: Boolean)",
            "documentation": [
                "index에 해당하는 항목을 비활성화시키거나 활성화 시킨다.",
                "*@param* `index` &mdash; 항목의 index",
                "*@param* `falg` &mdash; 비활성화 여부"
            ]
        },
        {
            "label": "setNodeSet(nodeset: String, label?: String, value?: String)",
            "documentation": [
                "항목의 itemset 설정을 변경하는 기능으로 DataList와 연동 할 경우 nodeset 파라메터에 \"data:\" prefix를 꼭 붙여야한다.",
                "*@param* `nodeset` &mdash; DataList의 ID로 \"data:\"이라는 prefix를 붙여야한다. ( 또는 InstanceData의 XPath )",
                "*@param* `label` &mdash; label에 설정 될 column의 id로 값을 할당하지 않으면 기존에 설정된 값이 그대로 적용된다. ( 또는 label에 설정 할 nodeset 하위의 XPath )",
                "*@param* `value` &mdash; value에 설정 될 column의 id로 값을 할당하지 않으면 기존에 설정된 값이 그대로 적용된다. ( 또는 value에 설정 할 nodeset 하위의 XPath )"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
                "*@param* `ref` &mdash; 적용 할 ref의 경로"
            ]
        },
        {
            "label": "setSelectedIndex(index: Number)",
            "documentation": [
                "index에 해당하는 항목을 선택한다.",
                "*@param* `index` &mdash; 항목의 index"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "파라메터로 넘어온 value가 항목에 있는 경우 해당 항목이 선택되며 해당값으로 value가 할당된다.value에 해당하는 항목이 없는 경우 아무 동작이 일어나지 않는다.",
                "*@param* `value` &mdash; 선택하려는 항목의 value"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate(): Boolean",
            "documentation": [
                "컴포넌트의 정의 된 유효성에 관련 속성값을 통해 유효성 검사를 실행한다.유효성 관련 속성 : mandatory",
                "*@return*  \n유효성 검사 결과 값"
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "repeat": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getInstanceValue(): String",
            "documentation": [
                "현재 컴포넌트가 참조하고 있는 instance nodeValue를 반환하는 함수입니다.",
                "*@return*  \n현재 컴포넌트가 참조하고 있는 instance nodeValue"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getRepeat(): Object",
            "documentation": [
                "현재 컴포넌트를 반복시키는 repeat컴포넌트의 객체를 반환하는 함수입니다.보통의 경우에는 사용할 필요가 없지만 repeat안에 repeat을 구현시 상위 repeat으로 거슬러올라가기 위한 연결고리입니다.단일 repeat의 경우는 사용하지 않습니다.",
                "*@return*  \n현재 컴포넌트를 반복시키는 repeat컴포넌트의 객체"
            ]
        },
        {
            "label": "getRepeatChildren(originalId: String): Object",
            "documentation": [
                "repeat으로 반복된 컴퍼넌트들의 child객체를 반환합니다.",
                "*@param* `originalId` &mdash; repeat내부의 그려진 컴포넌트의 원본 Id",
                "*@return*  \noriginalId를 통해 만들어진 반복 컴포넌트들의 array"
            ]
        },
        {
            "label": "getRepeatIndex(): String",
            "documentation": [
                "현재 컴포넌트가 속한 반복부의 index를 반환하는 함수입니다.",
                "*@return*  \n현재 컴포넌트가 속한 반복부의 index"
            ]
        },
        {
            "label": "getRepeatInstanceNode(): XML Element",
            "documentation": [
                "현재 컴포넌트가 속한 반복부가 참조하고 있는 instance node를 반환하는 함수입니다.",
                "*@return*  \n현재 컴포넌트가 속한 반복부가 참조하고 있는 instance node"
            ]
        },
        {
            "label": "getSibling(originalID: String): Object",
            "documentation": [
                "현재 컴포넌트와 동일 반복부에 존재하는 컴포넌트 객체를 반환하는 함수입니다.",
                "*@param* `originalID` &mdash; 찾고싶은 컴포넌트의 원본ID",
                "*@return*  \n현재 컴포넌트가 속한 반복부의 컴포넌트 중 원본id가 넘겨준 originalID와 같은 객체"
            ]
        },
        {
            "label": "getSiblingId(originalID: String): String",
            "documentation": [
                "현재 컴포넌트와 동일 반복부에 존재하는 컴포넌트 id를 반환하는 함수입니다.",
                "*@param* `originalID` &mdash; 찾고싶은 컴포넌트의 원본ID",
                "*@return*  \n현재 컴포넌트가 속한 반복부의 컴포넌트 중 원본id가 넘겨준 originalID와 같은 객체의 id"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "init(options?: Object)",
            "documentation": [
                "컴포넌트 하위의 옵션에 해당하는 컴포넌트를 제외한 컴포넌트의 값을 초기화 시킵니다. 초기화가 가능한 컴포넌트 (calendar, checkbox, input, inputCalendar, multiselect, radio, selectbox, textarea)",
                "*@param* `options` &mdash; 초기화 동작에서 제외되는 컴포넌트를 설정하는 값의 객체(excludePlugin, excludeId을 속성으로 지정)"
            ]
        },
        {
            "label": "invoke(funcName: String, param?: Object, options?: Object)",
            "documentation": [
                "컴포넌트 하위의 모든 컴포넌트의 함수를 동일하게 호출시켜주는 함수입니다.예) repeat 이하의 모든 컴포넌트에 setValue를 하고 싶을 경우",
                "*@param* `funcName` &mdash; 호출하려는 함수의 이름",
                "*@param* `param` &mdash; 호출하려는 함수에 넘겨질 인자 혹은 그 인자를 반환하는 함수 객체",
                "*@param* `options` &mdash; 함수 호출에서 제외되는 컴포넌트를 설정하는 값의 객체. "
            ]
        },
        {
            "label": "refreshRepeat()",
            "documentation": [
                "컴포넌트가 ref로 바인드되어 있을 경우 instance를 가지고 컴포넌트를 갱신합니다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "roundRectangle": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, height: Number)",
            "documentation": [
                "roundRectangle 의 width , height 를 설정합니다.",
                "*@param* `width` &mdash; ",
                "*@param* `height` &mdash; "
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "scrollView": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getScrollLeft(): Number",
            "documentation": [
                "scrollView의 scrollLeft 값을 반환합니다.",
                "*@return*  \nscrollLeft 값에 해당하는 값"
            ]
        },
        {
            "label": "getScrollTop(): Number",
            "documentation": [
                "scrollView의 scrollTop 값을 반환합니다.",
                "*@return*  \nscrollTop 값에 해당하는 값"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "resetScrollBottom()",
            "documentation": [
                "1회성 이벤트인 onscrollbottom 이벤트가 다시 발생할 수 있도록 설정합니다."
            ]
        },
        {
            "label": "scrollBy(xnum?: Number, ynum?: Number)",
            "documentation": [
                "scrollView의 스크롤 위치를 입력 받은 수치만큼 더하여 줍니다.",
                "*@param* `xnum` &mdash; 스크롤의 가로 변량",
                "*@param* `ynum` &mdash; 스크롤의 세로 변량"
            ]
        },
        {
            "label": "scrollTo(scrollLeft?: Number, scrollTop?: Number)",
            "documentation": [
                "scrollView의 스크롤 위치를 조정합니다.",
                "*@param* `scrollLeft` &mdash; 스크롤의 가로 위치, 바꾸지 않고 싶다면 null을 입력",
                "*@param* `scrollTop` &mdash; 스크롤의 세로 위치, 바꾸지 않고 싶다면 null을 입력"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "searchbox": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDataType(): String",
            "documentation": [
                "[default:text]dataType 속성값을 반환한다.",
                "*@return*  \nsearchbox의 dataType"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getDisplayFormat(): String",
            "documentation": [
                "현재 컴포넌트에 설정 된 displayFormat을 반환한다.",
                "*@return*  \n현재 설정된 displayFormat"
            ]
        },
        {
            "label": "getDisplayFormatter(): String",
            "documentation": [
                "현재 컴포넌트의 displayFormatter에 설정 된 함수를 반환한다.",
                "*@return*  \n현재 컴포넌트에 설정된 format용 함수"
            ]
        },
        {
            "label": "getDisplayValue(): String",
            "documentation": [
                "현재 보여지는(format이 적용 된) 값을 반환한다.",
                "*@return*  \nforamt이 적용되어진 값"
            ]
        },
        {
            "label": "getFormattedValue(): String",
            "documentation": [
                "formatted된 searchbox의 값을 반환한다.",
                "*@return*  \nformatted된 searchbox의 값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "컴포넌트의 value를 반환한다.",
                "*@return*  \nsearchbox의 값"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setDisplayFormat(format: String)",
            "documentation": [
                "컴포넌트의 displayFormat 속성을 설정한다.",
                "*@param* `format` &mdash; 새로 설정할 displayFormat"
            ]
        },
        {
            "label": "setDisplayFormatter(formatter: String)",
            "documentation": [
                "컴포넌트의 displayFormatter 속성을 설정한다.",
                "*@param* `formatter` &mdash; 새로 설정할 format용 함수"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "컴포넌트의 value를 설정한다.",
                "*@param* `value` &mdash; searchbox의 value 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate(): Boolean",
            "documentation": [
                "컴포넌트의 정의 된 유효성에 관련 속성값을 통해 유효성 검사를 실행한다.유효성 관련 속성 : mandatory, minLength, maxLength, minByteLength, maxByteLength",
                "*@return*  \n유효성 검사 결과 값"
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "secret": [
        {
            "label": "getDataType(): String",
            "documentation": [
                "[default:text]dataType 속성값을 반환한다.",
                "*@return*  \nsecret의 dataType"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "컴포넌트의 value를 반환한다.",
                "*@return*  \n컴포넌트의 value"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "컴포넌트의 value를 설정한다.",
                "*@param* `value` &mdash; secret의 value 값"
            ]
        },
        {
            "label": "validate(): Boolean",
            "documentation": [
                "컴포넌트의 정의 된 유효성에 관련 속성값을 통해 유효성 검사를 실행한다.유효성 관련 속성 : mandatory, minLength, maxLength, minByteLength, maxByteLength",
                "*@return*  \n유효성 검사 결과 값"
            ]
        }
    ],
    "selectbox": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addItem(value: String, label: String, index?: Number): Number",
            "documentation": [
                "항목을 추가하는 기능으로 index를 주지 않으면 하위로 append된다.주의 사항으로는 chooseOption 및 allOption 속성을 사용 할 경우 해당 item들도 index에 포함된다.",
                "*@param* `value` &mdash; 항목의 value",
                "*@param* `label` &mdash; 항목의 label",
                "*@param* `index` &mdash; 항목이 추가 될 index",
                "*@return*  \n추가 된 항목의 index"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeChooseOption(newValue: String, newLabel: String)",
            "documentation": [
                "chooseOption의 label과 value의 값을 변경한다.",
                "*@param* `newValue` &mdash; 변경할 chooseOption의 value 값",
                "*@param* `newLabel` &mdash; 변경할 chooseOption의 label 값"
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "deleteItem(idx: Number): JSON",
            "documentation": [
                "index에 해당하는 항목을 삭제하며 chooseOpion속성과 allOption속성이 true로 설정 된 경우 항목의 index에 포함된다.",
                "*@param* `idx` &mdash; 삭제 할 항목의 index",
                "*@return*  \n삭제된 항목의 정보가 담긴 JSON\n label : 항목의 label.\n value : 항목의 value."
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getItemCount(): Number",
            "documentation": [
                "항목 수를 반환하며 chooseOption, allOption 속성이 적용 된 경우 해당 item도 count에 포함된다.",
                "*@return*  \n항목 수"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedIndex(): Number",
            "documentation": [
                "선택된 항목의 index를 반환하며 chooseOption, allOption 속성이 적용 된 경우 해당 item도 index에 포함된다.",
                "*@return*  \n선택 된 항목의 index."
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getText(isOriginal?: Boolean): String",
            "documentation": [
                "현재 선택된 항목의 label을 반환한다.",
                "*@param* `isOriginal` &mdash; [default:true, false] true시 formatter가 적용되지 않은 값 반환. false시 formatter가 적용 된 값 반환.",
                "*@return*  \n현재 선택된 항목의 label"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "선택된 항목의 value값을 반환한다.",
                "*@return*  \n선택된 항목의 value"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨깁니다."
            ]
        },
        {
            "label": "removeAll(isInitialize?: Boolean)",
            "documentation": [
                "[default:false, true] 모든 항목을 삭제하는 기능으로 chooseOption, allOption이 정의 된 경우 isInitialize값을 true로 적용하면 해당 항목은 삭제되지 않는다.",
                "*@param* `isInitialize` &mdash; "
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setNodeSet(nodeset: String, label?: String, value?: String)",
            "documentation": [
                "항목의 itemset 설정을 변경하는 기능으로 DataList와 연동 할 경우 nodeset 파라메터에 \"data:\" prefix를 꼭 붙여야한다.",
                "*@param* `nodeset` &mdash; DataList의 ID로 \"data:\"이라는 prefix를 붙여야한다. ( 또는 InstanceData의 XPath )",
                "*@param* `label` &mdash; label에 설정 될 column의 id로 값을 할당하지 않으면 기존에 설정된 값이 그대로 적용된다. ( 또는 label에 설정 할 nodeset 하위의 XPath )",
                "*@param* `value` &mdash; value에 설정 될 column의 id로 값을 할당하지 않으면 기존에 설정된 값이 그대로 적용된다. ( 또는 value에 설정 할 nodeset 하위의 XPath )"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
                "*@param* `ref` &mdash; 적용 할 ref의 경로."
            ]
        },
        {
            "label": "setSelectedIndex(idx: Number)",
            "documentation": [
                "idx에 해당하는 index로 항목을 선택하는 기능으로 chooseOption, allOption 속성이 정의 된 경우 해당 item도 index에 포함된다.",
                "*@param* `idx` &mdash; 항목의 index."
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setText(lbl: String, isOriginal?: Boolean)",
            "documentation": [
                "lbl 파라메터와 같은 label을 가지는 항목을 선택한다.",
                "*@param* `lbl` &mdash; 선택하고자 하는 항목의 label",
                "*@param* `isOriginal` &mdash; [default:true, false]format이 적용되지 않은 원래 값으로 label을 찾을 것인지에 대한 여부. true시 format이 적용되지 않은 값으로, false시 format이 적용된 값으로 적용."
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String): Boolean",
            "documentation": [
                "파라메터로 넘어온 value가 항목에 있는 경우 해당 항목이 선택되며 해당값으로 value가 할당된다.value에 해당하는 항목이 없는 경우 아무 동작이 일어나지 않는다.",
                "*@param* `value` &mdash; 선택하려는 항목의 value",
                "*@return*  \n셋팅 결과"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "showChooseOption(chooseOption: boolean)",
            "documentation": [
                "chooseOption을 설정합니다.",
                "*@param* `chooseOption` &mdash; 설정값"
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate()",
            "documentation": [
                "컴포넌트의 정의 된 유효성에 관련 속성값을 통해 유효성 검사를 실행한다.유효성 관련 속성 : mandatory"
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "slideHide": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setHeight(height: Number)",
            "documentation": [
                "slideHide 객체의 높이를 설정합니다. slideDirection이 left,right일 경우에만 사용됩니다.",
                "*@param* `height` &mdash; slideHide의 변경할 height"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setSlideHide(status: String)",
            "documentation": [
                "slide 상태 또는 hide상태로 만든다. Animation이 일어나지 않고 즉시 반영된다.",
                "*@param* `status` &mdash; \"slide\" 또는 \"hide\" 값을 전달한다. 그 이외의 값은 처리를 하지 않는다."
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setWidth(width: Number)",
            "documentation": [
                "slideHide 객체의 넓이를 설정합니다. slideDirection이 up,down일 경우에만 사용됩니다.",
                "*@param* `width` &mdash; slideHide의 변경할 width"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "startHide()",
            "documentation": [
                "slideHide객체의 hide를 시작합니다."
            ]
        },
        {
            "label": "startSlide()",
            "documentation": [
                "slideHide객체의 slide를 시작합니다."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "slider": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): Number",
            "documentation": [
                "slider의 값을 반환합니다.",
                "*@return*  \n현재 slider의 값"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "바인딩 된 ref 경로를 동적으로 변경합니다.",
                "*@param* `ref` &mdash; 변경할 ref의 XPath"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: Number)",
            "documentation": [
                "slider에 인자로 받은 value로 값을 설정합니다.",
                "*@param* `value` &mdash; slider에 설정할 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "span": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDataType(): String",
            "documentation": [
                "[default:text]dataType 속성값을 반환한다.",
                "*@return*  \ninput의 dataType"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getFormatValue(): String",
            "documentation": [
                "format이 적용 된 값을 반환한다",
                "*@return*  \nformat이 적용된 값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getLabel(): String",
            "documentation": [
                "label을 반환한다. getValue와 동일한 기능을 제공한다.",
                "*@return*  \nlabel값"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "컴포넌트의 value를 반환한다.",
                "*@return*  \n컴포넌트의 value"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setDisplayFormat(format: String)",
            "documentation": [
                "컴포넌트의 displayFormat 속성을 설정한다.",
                "*@param* `format` &mdash; 새로 설정할 displayFormat"
            ]
        },
        {
            "label": "setDisplayFormatter(formatter: String)",
            "documentation": [
                "컴포넌트의 displayFormatter 속성을 설정한다.",
                "*@param* `formatter` &mdash; 새로 설정 할 format용 함수명"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLabel(lable: String)",
            "documentation": [
                "label(value)의 값을 변경한다.",
                "*@param* `lable` &mdash; 출력 할 text"
            ]
        },
        {
            "label": "setLocaleRef(localeRef: String)",
            "documentation": [
                "localeRef 속성값을 설정한다.",
                "*@param* `localeRef` &mdash; 새로 설정할 localeRef 값"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
                "*@param* `ref` &mdash; 적용할 ref의 경로."
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "화면에 출력될 text인 value(label 속성에 정의 된 값)를 설정한다.",
                "*@param* `value` &mdash; input의 value 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다. 엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "spinner": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue()",
            "documentation": [
                "spinner의 값을 얻어옵니다.."
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "객체의 disabled 속성을 제어합니다. Disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `disabled` &mdash; Disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Integer, heigth: Integer)",
            "documentation": [
                "컴포넌트의 크기를 설정합니다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "value로 spinner의 값을 설정합니다.",
                "*@param* `value` &mdash; spinner에 설정할 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "submit": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getBackgroundImage(): String",
            "documentation": [
                "type속성의 값이 button 인 경우 CSS로 정의 된 background-image 속성값을 반환한다.",
                "*@return*  \n현재 CSS에 설정된 background-image 속성값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getLabel(): String",
            "documentation": [
                "label을 반환한다. getValue와 동일한 기능을 제공한다.",
                "*@return*  \nlabel값"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getSubmission(): Object",
            "documentation": [
                "submit 컴포넌트의 submission 속성으로 지정된 submission의 실제 객체를 반환한다.예를 들어 xml파일 model부분에 submission1이라는 ID의 submission객체가 존재하고,submit 객체의 submission 속성값으로 submission1이라는 값이 set되어 있으면, getSubmission()method의 반환값은 아이디가 submission1인 submission 태그를 파싱하여 만든 내부 객체가 된다.",
                "*@return*  \nsubmit 컴포넌트의 submission객체"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getType(): String",
            "documentation": [
                "컴포넌트의 현재 설정된 Type을 반환합니다.",
                "*@return*  \n현재 설정되어 있는 type 속성값"
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "표시되어 있는 label을 반환한다. getLabel과 동일한 기능을 제공한다.",
                "*@return*  \nlabel값"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setBackgroundImage(imgUrl: String)",
            "documentation": [
                "type속성의 값이 button 인 경우 배경이미지를 설정한다.해당값은 CSS의 background-image 속성값으로 설정된다.",
                "*@param* `imgUrl` &mdash; 이미지 URL"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLabel(lable: String)",
            "documentation": [
                "label(value)의 값을 변경한다.setValue와 동일한 기능을 제공한다.",
                "*@param* `lable` &mdash; 출력 할 text"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setSubmission(submission: String)",
            "documentation": [
                "submit 컴포넌트의 submission을 설정한다.submission의 id를 인자로 넘겨주면, 파싱한 모델 내에서 ID에 맞는 submission 객체를 찾아서 submit 내부에 set하여 준다",
                "*@param* `submission` &mdash; submit 객체의 submission의 id"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(lable: String)",
            "documentation": [
                "label(value)의 값을 변경한다.setLabel와 동일한 기능을 제공한다.",
                "*@param* `lable` &mdash; 출력 할 text"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "tabContainer": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addTab(id: String, options: Object, options: Object.label, options: Object.frameMode, options: Object.src)",
            "documentation": [
                "id를 아이디로 가진 tab을 추가합니다.같은 id의 tab이 존재하면 추가가 아니라 선택합니다.",
                "*@param* `id` &mdash; 새로만들 tab의 아이디",
                "*@param* `options` &mdash; 새로만들 tab의 옵션",
                "*@param* `options.label` &mdash; : tab의 라벨 텍스트.",
                "*@param* `options.frameMode` &mdash; : iframe.",
                "*@param* `options.src` &mdash; : contents안 쪽의 내용을 가지고있는 파일 주소."
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "deleteTab(idx: Number)",
            "documentation": [
                "해당 idx의 tab을 찾아서 삭제합니다.",
                "*@param* `idx` &mdash; index or id"
            ]
        },
        {
            "label": "disableTab(idx: Number)",
            "documentation": [
                "해당 idx의 tab을 찾아서 disable시킵니다.",
                "*@param* `idx` &mdash; disable시킬 tab의 인덱스"
            ]
        },
        {
            "label": "enableTab(idx: Number)",
            "documentation": [
                "해당 idx의 tab을 찾아서 enable시킵니다.",
                "*@param* `idx` &mdash; enable시킬 tab의 인덱스"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getCount(): Number",
            "documentation": [
                "tab의 전체 갯수를 반환합니다.",
                "*@return*  \ntab의 전체 갯수"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getLabelText(idx: Number)",
            "documentation": [
                "idx로 tab을 찾아서 tab의 label을 반환합니다.",
                "*@param* `idx` &mdash; tab의 index"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedID(): String",
            "documentation": [
                "선택된 tab의 id를 반환합니다.",
                "*@return*  \n선택된 tab의 id"
            ]
        },
        {
            "label": "getSelectedIndex(): Number",
            "documentation": [
                "선택된 tab의 index를 반환합니다.",
                "*@return*  \n선택된 tab의 index"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getWindow(idx?: Number): Object",
            "documentation": [
                "Tab Index에 해당하는 window content를 반환한다.index가 없으며 현재 선택된 Tab의 window content를 반환한다.",
                "*@param* `idx` &mdash; Tab Index",
                "*@return*  \nwindow"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "init(options?: Object, options?: Object.excludePlugin, options?: Object.excludeId, options?: Object.fireEvent)",
            "documentation": [
                "컴포넌트 하위의 옵션에 해당하는 컴포넌트를 제외한 컴포넌트의 값을 초기화 시킵니다. (calendar, checkbox, grid, input, inputCalendar, multiselect, radio, selectbox, textarea)",
                "*@param* `options` &mdash; 초기화 동작에서 제외되는 컴포넌트를 설정하는 값의 객체(excludePlugin, excludeId을 속성으로 지정)",
                "*@param* `options.excludePlugin` &mdash; : 초기화 기능에서 제외되는 컴포넌트의 명칭. 복수 개를 정의할 경우, 공백을 구분자로 한다.",
                "*@param* `options.excludeId` &mdash; : 초기화 기능에서 제외되는 컴포넌트 ID. 복수 개를 정의할 경우, 공백을 구분자로 한다.",
                "*@param* `options.fireEvent` &mdash; : 초기화로 인한 값 변동에 따라 이벤트 발생 여부로 기본값은 false. 이벤트 발생을 막는다."
            ]
        },
        {
            "label": "invoke(funcName: String, param?: Object, options?: Object, options?: Object.excludePlugin, options?: Object.excludeId)",
            "documentation": [
                "컴포넌트 하위의 모든 컴포넌트의 함수를 동일하게 호출시켜주는 함수입니다.예) tabContainer 이하의 모든 컴포넌트에 setValue를 하고 싶을 경우",
                "*@param* `funcName` &mdash; 호출하려는 함수의 이름",
                "*@param* `param` &mdash; 호출하려는 함수에 넘겨질 인자 혹은 그 인자를 반환하는 함수 객체",
                "*@param* `options` &mdash; 함수 호출에서 제외되는 컴포넌트를 설정하는 값의 객체.",
                "*@param* `options.excludePlugin` &mdash; : 함수 호출에서 제외되는 컴포넌트의 명칭. 복수 개를 정의할 경우, 공백을 구분자로 한다.",
                "*@param* `options.excludeId` &mdash; : 함수 호출에서 제외되는 컴포넌트 ID. 복수 개를 정의할 경우, 공백을 구분자로 한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLabelText(idx: Number, label: String)",
            "documentation": [
                "idx로 tab을 찾아서 tab의 label을 바꿔줍니다.",
                "*@param* `idx` &mdash; label을 바꿀 tab의 인덱스",
                "*@param* `label` &mdash; 바꿔줄 label값"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSelectedIndex(idx: Number)",
            "documentation": [
                "tab의 index를 인자로 받아 그 index로 tab을 선택해줍니다.",
                "*@param* `idx` &mdash; 선택하려는 index"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "tabControl": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addTab(id: String, tabOpt: JSON, contOpt: JSON)",
            "documentation": [
                "tab을 추가하는 기능으로 tab과 content의 세부 생성 옵션을 설정할 수 있다.",
                "*@param* `id` &mdash; tab의 ID",
                "*@param* `tabOpt` &mdash; tab의 생성 옵션",
                "*@param* `contOpt` &mdash; content의 생성 옵션"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "deleteTab(idx: Number)",
            "documentation": [
                "탭의 index로 탭을 삭제한다(닫는다).",
                "*@param* `idx` &mdash; 삭제하(닫으)려는 텝의 index"
            ]
        },
        {
            "label": "disableTab(tabIndex: Number)",
            "documentation": [
                "tab을 disabeld 처리한다.",
                "*@param* `tabIndex` &mdash; disabled할 tab의 index"
            ]
        },
        {
            "label": "enableTab(tabIndex: Number)",
            "documentation": [
                "tab의 disabeld를 해제한다.",
                "*@param* `tabIndex` &mdash; enabled할 tab의 index."
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getFrame(idx: Number): Object",
            "documentation": [
                "tab의 index에 해당하는 wframe 또는 iframe을 반환한다.iframe안의 객체(컴포넌트,function 등)에 접근하려면 getWindow API를 사용한다.",
                "*@param* `idx` &mdash; tab의 index",
                "*@return*  \ntab index에 해당하는 wframe 또는 iframe 객체"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getLabelText(idx: Number): String",
            "documentation": [
                "tab의 label을 반환한다.",
                "*@param* `idx` &mdash; tab의 index",
                "*@return*  \ntab의 label"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedTabID(): String",
            "documentation": [
                "현재 선택된 tab의 ID를 반환한다.",
                "*@return*  \n선택된 tab의 ID"
            ]
        },
        {
            "label": "getSelectedTabIndex(): Number",
            "documentation": [
                "현재 선택된 tab의 index를 반환한다.",
                "*@return*  \ntab의 index"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTabCount(): Number",
            "documentation": [
                "현재 tab의 개수를 반환한다.",
                "*@return*  \n현재 tab의 개수"
            ]
        },
        {
            "label": "getTabID(tabIndex: Number): String",
            "documentation": [
                "tab index에 해당하는 ID 리턴합니다.",
                "*@param* `tabIndex` &mdash; tab의 index",
                "*@return*  \ntab의 ID"
            ]
        },
        {
            "label": "getTabIndex(tabID: String): Number",
            "documentation": [
                "tab의 ID로 해당 tab의 index를 반환한다.",
                "*@param* `tabID` &mdash; tab의 ID",
                "*@return*  \ntab의 index"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getWindow(tabIndex?: Number): windowObject",
            "documentation": [
                "tab index에 해당하는 window 객체를 반환한다.반환된 객체를 통해 웹스퀘어 컴포넌트 및 function, 변수 등에 접근이 가능한다.tab의 index가 없으며 현재 선택된 tab의 window content를 반환한다.",
                "*@param* `tabIndex` &mdash; tab의 index",
                "*@return*  \nwindowObject"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "hideTab(tabIndex: Number)",
            "documentation": [
                "tab을 숨김(hidden)처리 한다.",
                "*@param* `tabIndex` &mdash; hide할 tab의 index"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setContentsHeight(height: Number)",
            "documentation": [
                "컨텐츠 영역의 높이(px단위)를 설정한다",
                "*@param* `height` &mdash; height(숫자만 입력한다)"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLabelText(idx: Number, label: Number)",
            "documentation": [
                "tab의 label을 설정한다.",
                "*@param* `idx` &mdash; tab의 index",
                "*@param* `label` &mdash; tab의 label"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSelectedTabIndex(tabIndex: Number)",
            "documentation": [
                "tab의 index에 해당하는 tab을 선택한다.",
                "*@param* `tabIndex` &mdash; tab의 index ( id를 넘기게 되면 idx로 처리 함)"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "showTab(tabIndex: Number)",
            "documentation": [
                "hide된 tab을 보여둔다.",
                "*@param* `tabIndex` &mdash; tab의 index"
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "textarea": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "컴포넌트의 value를 반환한다.",
                "*@return*  \n컴포넌트의 value"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPlaceholder(placeholderStr: String)",
            "documentation": [
                "placeholder 속성값을 변경한다.",
                "*@param* `placeholderStr` &mdash; 변경할 placeholder의 값"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정하는 기능으로 DataCollection과 연동시 \"data:\"라는 prefix를 꼭 붙여야한다.명시하지 않는 경우 InstanceData의 XPath로 인식한다.",
                "*@param* `ref` &mdash; 적용할 ref의 경로."
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "컴포넌트의 value를 설정한다.",
                "*@param* `value` &mdash; textarea의 value값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "validate()",
            "documentation": [
                "textarea의 validate를 체크합니다. textarea는 필수입력 여부만 체크합니다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "textbox": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getAttributeNode(attributeName: String)",
            "documentation": [
                "기본적으로 tagname속성의 확장을 위해 만든 html attributes(스튜디오에서의 명칭)를 이용하여 정의 된 속성값을 반환한다.정의 한 tagname의 Tag가 갖는 html 속성 또한 반환가능하다. 예를 들어 id,class,style등의 속성은 반환되나 tagname과 같은 속성값은 반환되지 않는다.",
                "*@param* `attributeName` &mdash; 속성명"
            ]
        },
        {
            "label": "getDataType(): String",
            "documentation": [
                "dataType 속성값을 반환한다.",
                "*@return*  \ntextbox의 dataType"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getFormatValue(): String",
            "documentation": [
                "format이 적용 된 값을 반환한다.",
                "*@return*  \nforamt된 값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "format이 적용 되지 않은 value(label 속성에 정의 된 값)를 반환한다.",
                "*@return*  \nformat이 적용 되지 않은 값."
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeAttributeNode(nodeName: String)",
            "documentation": [
                "attributes 노드에서 nodeName에 해당하는 하위 노드를 삭제합니다. nodeName으로 사용할 수 있는 값은 config.xml의 attributes 설정을 따릅니다.",
                "*@param* `nodeName` &mdash; 삭제할 하위 노드의 이름"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setDisplayFormat(format: String)",
            "documentation": [
                "displayFormat 속성을 설정한다.",
                "*@param* `format` &mdash; 새로 설정할 displayFormat"
            ]
        },
        {
            "label": "setDisplayFormatter(formatter: String)",
            "documentation": [
                "컴포넌트의 displayFormatter 속성을 설정한다.",
                "*@param* `formatter` &mdash; 새로 설정 할 format용 함수명"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLocaleRef(localeRef: String)",
            "documentation": [
                "localeRef 속성값을 설정한다.",
                "*@param* `localeRef` &mdash; 새로 설정할 localeRef 값"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setRef(ref: String)",
            "documentation": [
                "ref 속성을 설정한다.",
                "*@param* `ref` &mdash; 적용할 ref의 경로"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(value: String)",
            "documentation": [
                "화면에 출력될 text인 value(label 속성에 정의 된 값)를 설정한다.",
                "*@param* `value` &mdash; 화면에 출력될 text"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다. 엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "treeview": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "appendData(index: Number, xmlArray: Array)",
            "documentation": [
                "index에 해당하는 노드 하위에 사용자 데이터를 기반으로 노드를 추가한다.dynamicAppend속성이 true로 설정되야한다.",
                "*@param* `index` &mdash; 노드의 index",
                "*@param* `xmlArray` &mdash; 추가할 노드의 XML 데이터가 담긴 1차원 배열"
            ]
        },
        {
            "label": "appendNode(parentNode: Object, childNode: Object)",
            "documentation": [
                "TreeView에서 반환하는 Node를 기반으로 parentNode 하위에 childNode를 추가한다.dynamicAppend속성이 true로 설정되야하며 일반적으로 TreeView끼리의 노드 추가 시에 사용되며 TreeView의 이벤트 또는 API로 Node를 반환 받아 파라메터로 사용한다.",
                "*@param* `parentNode` &mdash; 기준 Node",
                "*@param* `childNode` &mdash; 추가할 Node"
            ]
        },
        {
            "label": "appendXmlNodes(parentNode: Object, xmlArray: Array)",
            "documentation": [
                "TreeView에서 반환하는 Node(parentNode)의 하위에 XML 데이터를 기반으로 노드를 추가한다.dynamicAppend속성이 true로 설정되야한다.",
                "*@param* `parentNode` &mdash; 기준 Node",
                "*@param* `xmlArray` &mdash; 추가할 노드의 XML 데이터가 담긴 1차원 배열"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "checkByValue(value: String, checkValue: Boolean||String, childCheck?: Boolean)",
            "documentation": [
                "value를 기반으로 노드(항목)을 찾아 checkbox의 value를 설정한다.trueValue, falseValue 속성의 값을 참조하여 check되며 해당 속성이 정의되지 않은 경우 각 true, false로 제어 가능하다.",
                "*@param* `value` &mdash; 대상 노드의 value",
                "*@param* `checkValue` &mdash; checkbox의 value ( trueValue와 falseValue 속성이 정의되지 않은 경우 true, false로 제어가능하다 )",
                "*@param* `childCheck` &mdash; 선택한 노드의 자녀 노드의 checkbox check여부"
            ]
        },
        {
            "label": "collapseNode(value: String||Number, hierarchy?: Boolean)",
            "documentation": [
                "value 또는 index를 기반으로 찾은 노드(항목)를 접는다. index는 1부터 시작한다.",
                "*@param* `value` &mdash; 대상 노드의 value 또는 index (index는 1부터 시작한다.)",
                "*@param* `hierarchy` &mdash; 자식 노드까지 적용할지의 여부"
            ]
        },
        {
            "label": "disableCheckboxByValue(value: String, checkDisabled: Boolean, childDisalbed?: Boolean)",
            "documentation": [
                "value를 기반으로 노드(항목)을 찾아 checkbox의 disabled를 설정한다.",
                "*@param* `value` &mdash; 대상 노드의 value",
                "*@param* `checkDisabled` &mdash; checkbox의 disabled 적용 여부",
                "*@param* `childDisalbed` &mdash; 자녀 노드까지의 적용 여부"
            ]
        },
        {
            "label": "expandNode(value: String||Number, hierarchy?: Boolean)",
            "documentation": [
                "value 또는 index를 기반으로 찾은 노드(항목)를 확장한다. index는 1부터 시작한다.",
                "*@param* `value` &mdash; value 대상 노드의 value 또는 index (index는 1부터 시작한다.)",
                "*@param* `hierarchy` &mdash; 자식 노드까지 적용할지의 여부"
            ]
        },
        {
            "label": "findNodeByIndex(index: String, select?: boolean): Node",
            "documentation": [
                "초기에 각 노드에 설정된 index를 기반으로 노드 반환한다. 두번째 인자가 true인 경우 해당 노드를 선택한다.index는 1부터 시작하며 로딩 후 노드의 순서가 변경되도 초기에 설정된 index로 접근해야 한다.",
                "*@param* `index` &mdash; 초기 로딩 시 할당 된 노드의 index",
                "*@param* `select` &mdash; [default:true, false]노드를 선택 할지의 여부",
                "*@return*  \n검색된 Node"
            ]
        },
        {
            "label": "findNodeByValue(value: String, select?: boolean): Node",
            "documentation": [
                "value를 기반으로 노드를 찾아서 해당 노드를 반환한다. 두번째 인자가 true인 경우 해당 노드를 선택한다.반환 된 노드는 appendData, appendNode등의 API의 파라메터로 사용할 수 있다.",
                "*@param* `value` &mdash; 찾을 node의 value",
                "*@param* `select` &mdash; [default:true, false]노드를 선택 할지의 여부",
                "*@return*  \n검색된 Node"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getCheckedIndexes(options: JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy ): Array",
            "documentation": [
                "checkbox가 체크된 노드들의 index(초기 로딩시 설정)를 배열에 담아 반환한다.로딩 후 노드의 순서가 변경되면 index가 화면에 보여지는 순서와 다르게 반환될 수 있다.",
                "*@param* `options` &mdash; hierarchy를 포함한 JSON",
                "*@return*  \n체크된 노드들의 index가 담긴 배열"
            ]
        },
        {
            "label": "getCheckedLabels(options: JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy ): Array",
            "documentation": [
                "checkbox가 체크된 노드들의 label을 배열에 담아 반환한다.",
                "*@param* `options` &mdash; hierarchy를 포함한 JSON",
                "*@return*  \n체크된 노드들의 label가 담긴 배열"
            ]
        },
        {
            "label": "getCheckedNodes(options: JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy ): Array",
            "documentation": [
                "checkbox가 체크된 노드들을 배열에 담아 반환한다.로딩 후 노드의 순서가 변경되면 index가 화면에 보여지는 순서와 다르게 반환될 수 있다.",
                "*@param* `options` &mdash; hierarchy를 포함한 JSON",
                "*@return*  \n체크된 노드들이 담긴 배열"
            ]
        },
        {
            "label": "getCheckedValues(options: JSON> options hierarchy를 포함한 JSON\n | <Boolean>  options.hierarchy ): Array",
            "documentation": [
                "checkbox가 체크된 노드들의 value를 배열에 담아 반환한다.",
                "*@param* `options` &mdash; hierarchy를 포함한 JSON",
                "*@return*  \n체크된 노드들의 value가 담긴 배열"
            ]
        },
        {
            "label": "getChildData(value: String): Object",
            "documentation": [
                "value에 해당하는 node의 자식의 data(model에 존재하는)를 반환합니다.",
                "*@param* `value` &mdash; 자식의 data를 반환할 node의 value",
                "*@return*  \n자식의 data를 가지고 있는 배열"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getParentValue(value: String): String",
            "documentation": [
                "노드의 value를 기반으로 부모 노드를 찾아 value를 반환한다.value로 검색 된 노드가 최상위 노드이거나 검색된 노드가 없을 경우 빈값(emptyString)을 반환한다.",
                "*@param* `value` &mdash; 노드의 value",
                "*@return*  \n부모 노드의 vlaue"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedIndex(): String",
            "documentation": [
                "선택된 노드의 index(초기 로딩시 설정 된 값)를 반환한다.로딩 후 노드의 순서가 변경되면 보여지는 노드의 순서와 index가 다를 수 있다.",
                "*@return*  \n선택된 노드의 index(초기 로딩시 설정 된 값)"
            ]
        },
        {
            "label": "getSelectedLabel(): String",
            "documentation": [
                "선택된 노드의 label을 반환한다.선택된 노드가 없는 경우 빈값(emptyString)을 반환한다.",
                "*@return*  \n선택된 노드의 label"
            ]
        },
        {
            "label": "getSelectedNode(): Object",
            "documentation": [
                "선택된 노드객체를 반환한다.반환된 노드는 appendNode, appendData등의 API에 파라메터로 사용가능하며 노드에 담긴 값을 통해 자식노드, 부모노드 등의 정보를 참조할 수 있다.",
                "*@return*  \n선택된 노드 - 주요 정보만 명시됨\n"
            ]
        },
        {
            "label": "getSelectedValue(): String",
            "documentation": [
                "선택된 노드의 value를 반환한다.선택된 노드가 없는 경우 빈값(emptyString)을 반환한다.",
                "*@return*  \n선택된 노드의 value"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getXPathByValue(value: String): String",
            "documentation": [
                "value에 해당하는 노드의 XPath를 반환한다.본 기능은 데이터를 InstanceData로 연동하거나 XML로 데이터를 제어할 때 사용한다.DataList와 연동된 경우 DataList의 baseNode와 repeatNode속성값을 참조하여 XPath를 반환한다.",
                "*@param* `value` &mdash; 노드의 value",
                "*@return*  \nXpath"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "isLeaf(): boolean",
            "documentation": [
                "선택된 노드가 leaf인지(자식노드가 없는지)의 여부를 반환한다.",
                "*@return*  \n[true,false]leaf인지의 여부"
            ]
        },
        {
            "label": "isOpen(index: String): Node",
            "documentation": [
                "초기에 각 노드에 설정된 index를 기반으로 해당 index에 상응하는 노드가 열려있는지 닫혀있는지 여부를 반환한다.자식 노드들이 보여져 있는 상태면 true를, 자식 노드들이 숨겨져 있는 상태면 false를 각각 리턴한다. 자식이 없는 노드의 경우 false를 리턴한다.",
                "*@param* `index` &mdash; 초기 로딩 시 할당 된 노드의 index",
                "*@return*  \nindex에 해당하는 Node의 open 여부"
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "removeNode(node: Object)",
            "documentation": [
                "노드 객체를 기반으로 노드(자식노드 포함)를 삭제한다.",
                "*@param* `node` &mdash; 노드 객체"
            ]
        },
        {
            "label": "removeNodeList(nodeList: Array)",
            "documentation": [
                "노드 객체를 기반으로 다건의 노드(자식노드 포함)를 삭제한다. 삭제 후 컴포넌트를 다시 그리며 removeNode함수를 여러 번 호출하는 것보다 처리속도가 빠른다.",
                "*@param* `nodeList` &mdash; 노드가 담긴 1차원 배열"
            ]
        },
        {
            "label": "setCustomFormatter(userFunction: Function)",
            "documentation": [
                "사용자가 지정한 함수를 treeview의 node를 돌면서 각각 한번씩 호출합니다.",
                "*@param* `userFunction` &mdash; 초기에 세팅된 label값, formattedLabel, node를 각각 인자로 받아 formattedLabel 반환하는 사용자 함수"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLabelByIndex(index: Number, label: String)",
            "documentation": [
                "노드의 index를 기반으로 label을 변경한다.index값은 초기 로딩 시 설정 된 노드의 index로 1부터 시작한다.",
                "*@param* `index` &mdash; 노드의 index",
                "*@param* `label` &mdash; 새로 설정할 label의 값"
            ]
        },
        {
            "label": "setLabelByValue(value: String, label: String)",
            "documentation": [
                "노드의 value를 기반으로 label을 변경한다.",
                "*@param* `value` &mdash; 노드의 value",
                "*@param* `label` &mdash; 새로 설정할 label의 값"
            ]
        },
        {
            "label": "setLabelStyle(index: Number||String, styleName: String, styleValue: String, applyChildNodes?: Boolean)",
            "documentation": [
                "해당 node의 label style(node의 글자색, 글자크기, 글꼴 등)을 변경합니다.",
                "*@param* `index` &mdash; 노드의 index 또는 value",
                "*@param* `styleName` &mdash; style의 속성명",
                "*@param* `styleValue` &mdash; style 속성값",
                "*@param* `applyChildNodes` &mdash; [default:false, true]하위노드 적용 여부"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "spanAll(openCloseFlag: boolean)",
            "documentation": [
                "openCloseFlag에 따라서 모든 자식 노드를 span시켜 준다.",
                "*@param* `openCloseFlag` &mdash; 자식 노드를 접을지 확장할 지의 여부"
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "trigger": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getBackgroundImage(): String",
            "documentation": [
                "type속성의 값이 button 인 경우 CSS로 정의 된 background-image 속성값을 반환한다.",
                "*@return*  \n현재 CSS에 설정된 background-image 속성값"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getLabel(): String",
            "documentation": [
                "label을 반환한다. getValue와 동일한 기능을 제공한다.",
                "*@return*  \nlabel값"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getType(): String",
            "documentation": [
                "컴포넌트의 현재 설정된 Type을 반환합니다.",
                "*@return*  \n현재 설정되어 있는 type 속성값"
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "표시되어 있는 label을 반환한다. getLabel과 동일한 기능을 제공한다.",
                "*@return*  \nlabel값"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setBackgroundImage(imgUrl: String)",
            "documentation": [
                "type속성의 값이 button 인 경우 배경이미지를 설정한다.해당값은 CSS의 background-image 속성값으로 설정된다.",
                "*@param* `imgUrl` &mdash; 이미지 URL"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setLabel(lable: String)",
            "documentation": [
                "label(value)의 값을 변경한다.setValue와 동일한 기능을 제공한다.",
                "*@param* `lable` &mdash; 출력 할 text"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setValue(lable: String)",
            "documentation": [
                "label(value)의 값을 변경한다.setLabel와 동일한 기능을 제공한다.",
                "*@param* `lable` &mdash; 출력 할 text"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "upload": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "addParam(key: String, value: String)",
            "documentation": [
                "Upload 객체가 입력받은 값을 upload할 때 post로 value를 key값으로 전달 한다.",
                "*@param* `key` &mdash; Upload시에 전송될 key값",
                "*@param* `value` &mdash; Upload시에 전송될 value값"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "changeFormAction(action: String)",
            "documentation": [
                "Upload 객체가 입력받은 값을 upload할 때 URL을 설정합니다.입력된 action은 HTML Object 중에 Form의 action과 같은 방법으로 사용합니다.",
                "*@param* `action` &mdash; Upload시에 전송될 URL"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getActionUrl(): String",
            "documentation": [
                "option의 action속성을 반환합니다.",
                "*@return*  \noption의 action속성"
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getValue(): String",
            "documentation": [
                "파일 이름을 가지고 옵니다.",
                "*@return*  \n파일이름"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "reset()",
            "documentation": [
                "업로드 component를 초기화합니다."
            ]
        },
        {
            "label": "setCallback(obj: Function)",
            "documentation": [
                "파일 업로드가 끝났을 경우에 호출하는 함수를 설정합니다.",
                "*@param* `obj` &mdash; 호출하는 함수"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "upload 컴포넌트를 disabled 처리를 한다.",
                "*@param* `disabled` &mdash; disabled 처리를 위한 boolean값(true, false)"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setSubDir(value: String)",
            "documentation": [
                "subDir의 값을 새로 설정합니다.",
                "*@param* `value` &mdash; subDir속성에 새로 설정할 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "submit()",
            "documentation": [
                "file을 전송합니다."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "wframe": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getSrc(): String",
            "documentation": [
                "src속성의 값을 반환한다.(현재 설정된 화면의 경로)",
                "*@return*  \nsrc속성의 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "windowContainer": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "closeWindow()",
            "documentation": [
                "현재 활성화되어 있는 window를 닫는다.window의 닫기 버튼을 누른 것과 동일하다."
            ]
        },
        {
            "label": "createWindow(title: String, iconUrl: String, src: String, windowTitle?: String, windowId?: String, openAction?: String, closeAction?: String, windowTooltip?: String)",
            "documentation": [
                "window를 생성(open)한다.",
                "*@param* `title` &mdash; 툴바의 네임레이어에 표시되는 타이틀.",
                "*@param* `iconUrl` &mdash; 현재는 사용되지 않으며 null로 입력한다.(각 윈도우의 아이콘 url 문자열)",
                "*@param* `src` &mdash; window에 link할 페이지의 URL.",
                "*@param* `windowTitle` &mdash; window의 헤더에 표시될 타이틀로 null 이나 \"\"입력시 title값이 출력.",
                "*@param* `windowId` &mdash; window ID로 null 이나 \"\"입력시 title이 id로 생성.",
                "*@param* `openAction` &mdash; [existWindow, newWindow, selectWindow]existWindow : id가 동일한 윈도우가 떠있으면 그 윈도우를 사용하여 다시 표시 / newWindow : 항상 새로운 창을 생성 / selectWindow : id가 동일한 창이 있으면 그 윈도우를 선택",
                "*@param* `closeAction` &mdash; window가 닫힐 때 동작을 지정하는 함수명(return은 boolean으로 하여야 함 false일 경우 닫기 중지, true일 경우 닫기)",
                "*@param* `windowTooltip` &mdash; 툴바의 네임레이어에 표현될 tooltip.(미입력시 windowTitle이 tooltip으로 셋팅됨)"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSelectedIndex(): Number",
            "documentation": [
                "선택된 window의 index를 반환한다.",
                "*@return*  \n선택된 window의 index"
            ]
        },
        {
            "label": "getSelectedWindowId()",
            "documentation": [
                "선택된 window의 windowId를 반환한다.createWindow API를 호출 시 windowId를 설정하지 않은 경우 title의 값이 ID로 설정된다."
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getWindow(title: String): Object",
            "documentation": [
                "인자로 넘겨진 title를 가진 window의 window 객체를 반환한다.window에 link된 WedSquare페이지의 Function 또는 컴포넌트 등에 접근할 때 사용된다.",
                "*@param* `title` &mdash; 윈도우 title",
                "*@return*  \nwindow 객체"
            ]
        },
        {
            "label": "getWindowByWindowId(windowId: String, focus?: Boolean): Object",
            "documentation": [
                "인자로 넘겨진 windowID를 가진 window의 window 객체를 반환한다.",
                "*@param* `windowId` &mdash; window ID",
                "*@param* `focus` &mdash; window에 focus를 줄지의 여부",
                "*@return*  \nwindow 객체"
            ]
        },
        {
            "label": "getWindowLabel(windowId: String, type: String)",
            "documentation": [
                "인자값으로 넘어오는 type에 따라 label(text)값을 반환한다.type의 종류 : toolbar(툴바에 있는 네임레이어의 값), window(헤더의 title의 값), tooltip(툴바에 있는 네임레이어에 mouse over시 나오는 tooltip)",
                "*@param* `windowId` &mdash; 반환할 window의 id",
                "*@param* `type` &mdash; [toolbar, window, tooltip]label의 type"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setAllWindowStatusMsg(msg: String)",
            "documentation": [
                "모든 window의 상태 메세지를 설정한다.",
                "*@param* `msg` &mdash; 상태 메세지"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setFocus(index: Number)",
            "documentation": [
                "index에 해당하는 window에 focus를 준다.",
                "*@param* `index` &mdash; Window index"
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, height: Number)",
            "documentation": [
                "컴포넌트의 크기를 조정한다.",
                "*@param* `width` &mdash; 컴포넌트의 폭",
                "*@param* `height` &mdash; 컴포넌트의 높이"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setWindowCustomMsg(msg: String)",
            "documentation": [
                "현재 선택되어 있는 window의 사용자정의 메세지를 설정한다. (useCustomMsg=\"true\"인경우)",
                "*@param* `msg` &mdash; 상태 메세지"
            ]
        },
        {
            "label": "setWindowLabel(windowId: String, type: String, value: String)",
            "documentation": [
                "windowId에 해당하는 window의 type에 따른 label값을 설정한다.type의 종류 : toolbar(툴바에 있는 네임레이어의 값), window(헤더의 title의 값), tooltip(툴바에 있는 네임레이어에 mouse over시 나오는 tooltip), all(앞의 3가지 모두).",
                "*@param* `windowId` &mdash; window의 id",
                "*@param* `type` &mdash; [toolbar, window, tooltip, all]설정할 label의 type",
                "*@param* `value` &mdash; 설정할 label의 값"
            ]
        },
        {
            "label": "setWindowPosition(left: Number, top: Number)",
            "documentation": [
                "현재 선택되어 있는 window의 x,y 위치를 조정한다.(px단위로 적용된다.)",
                "*@param* `left` &mdash; ",
                "*@param* `top` &mdash; "
            ]
        },
        {
            "label": "setWindowSize(width: Number, height: Number)",
            "documentation": [
                "현재 선택되어 있는 window의 크기를 조정한다.(px단위로 적용된다.)",
                "*@param* `width` &mdash; window의 넓이",
                "*@param* `height` &mdash; window의 높이"
            ]
        },
        {
            "label": "setWindowStatusMsg(msg: String)",
            "documentation": [
                "현재 선택되어 있는 window의 상태 메세지를 설정한다.",
                "*@param* `msg` &mdash; 상태 메세지"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "xhtml": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ],
    "xsl": [
        {
            "label": "addClass(className: String)",
            "documentation": [
                "컴포넌트에 class를 추가한다.",
                "*@param* `className` &mdash; 추가하고 싶은 class의 이름"
            ]
        },
        {
            "label": "bind(eventType: String, function: Function)",
            "documentation": [
                "컴포넌트의 이벤트를 동적으로 할당한다.",
                "*@param* `eventType` &mdash; 할당 할 이벤트명.",
                "*@param* `function` &mdash; 동적으로 할당 할 이벤트의 핸들러 function."
            ]
        },
        {
            "label": "changeClass(oldClassName: String, newClassName: String)",
            "documentation": [
                "컴포넌트에서 oldClassName의 이름을 가진 class를 newClassName으로 변경한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `oldClassName` &mdash; 삭제 할 class의 이름",
                "*@param* `newClassName` &mdash; 추가 할 class의 이름"
            ]
        },
        {
            "label": "focus()",
            "documentation": [
                "컴포넌트에 focus를 준다."
            ]
        },
        {
            "label": "getDisabled(): Boolean",
            "documentation": [
                "현재 설정되어있는 disabled 속성값을 반환한다.",
                "*@return*  \ndisabled 속성값"
            ]
        },
        {
            "label": "getID(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 id를 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 id"
            ]
        },
        {
            "label": "getOpacity(): Integer",
            "documentation": [
                "CSS로 정의 된 컴포넌트의 Opacity(불투명도) 값을 반환한다.",
                "*@return*  \nOpacity 값"
            ]
        },
        {
            "label": "getPluginName(): String",
            "documentation": [
                "웹스퀘어 컴포넌트의 pluginName(컴포넌트명)을 반환한다.",
                "*@return*  \n웹스퀘어 컴포넌트의 pluginName"
            ]
        },
        {
            "label": "getPosition(positionName: String): Number",
            "documentation": [
                "컴포넌트의 left 또는 top의 위치 값을 반환한다. %로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `positionName` &mdash; [left,top]위치 종류",
                "*@return*  \n컴포넌트의 위치 값"
            ]
        },
        {
            "label": "getReadOnly(): Boolean",
            "documentation": [
                "현재 설정되어있는 readOnly 속성값을 반환한다.",
                "*@return*  \n현재 설정되어있는 readOnly 속성"
            ]
        },
        {
            "label": "getSize(sizeName: String): Number",
            "documentation": [
                "컴포넌트의 크기 값을 반환합니다.%로 설정된 경우, 픽셀로 변환하여 반환한다.",
                "*@param* `sizeName` &mdash; [height,innerHeight,outerHeight,outerMarginHeight,width,innerWidth,outerWidth,outerMarginWidth]크기 값의 종류. szieName별 계산 방법은 아래를 참고.",
                "*@return*  \n컴포넌트의 크기 값"
            ]
        },
        {
            "label": "getStyle(propertyName: String): String",
            "documentation": [
                "컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `propertyName` &mdash; 반환 할 style의 property 이름",
                "*@return*  \nstyle의 속성값"
            ]
        },
        {
            "label": "getStyleValue(style: String): String",
            "documentation": [
                "[deprecated]getStyle로 사용.컴포넌트에 적용 된 CSS의 propertyName에 해당하는 값을 반환한다.",
                "*@param* `style` &mdash; 정의 된 style에서 사용자가 반환 받고자하는 속성명.",
                "*@return*  \nstyle 속성에 정의 된 값(색을 반환하는 경우에는 색HexCode로 반환)"
            ]
        },
        {
            "label": "getTitle(): String",
            "documentation": [
                "title 속성값을 반환한다.",
                "*@return*  \ntitle 속성값."
            ]
        },
        {
            "label": "getUserData(key: String): String",
            "documentation": [
                "setUserData API로 설정 된 사용자 데이터 또는 소스(화면 XML)에 사용자가 임의의 property로 정의 된 값을 반환한다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@return*  \nkey에 해당하는 데이터"
            ]
        },
        {
            "label": "getXPath(): String",
            "documentation": [
                "xpath를 반환합니다.",
                "*@return*  \n설정된 xpath"
            ]
        },
        {
            "label": "getXSL(): String",
            "documentation": [
                "xsl파일의 경로를 반환합니다.",
                "*@return*  \nxsl파일의 경로"
            ]
        },
        {
            "label": "hasClass(className: String): Boolean",
            "documentation": [
                "컴포넌트가 parameter로 받은 className의 class를 가지고 있는지의 여부를 반환한다.",
                "*@param* `className` &mdash; 검색 할 className",
                "*@return*  \nclass를 가지고 있는지의 여부"
            ]
        },
        {
            "label": "hide()",
            "documentation": [
                "컴포넌트를 화면에서 보이지 않도록 숨긴다.엔진 내부적으로는 CSS를 display:none;과 visibility:hidden;으로 처리한다."
            ]
        },
        {
            "label": "removeClass(className: String)",
            "documentation": [
                "컴포넌트에 className의 class를 삭제한다.기본 설정은 addClass API를 통해 추가 된 class만 적용되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 삭제 할 class명"
            ]
        },
        {
            "label": "setDisabled(disabled: Boolean)",
            "documentation": [
                "컴포넌트의 disabled 속성을 설정한다. disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력한다.",
                "*@param* `disabled` &mdash; disabled 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setEventPause(evList?: String, flag: Boolean)",
            "documentation": [
                "컴포넌트의 이벤트를 disable 또는 enable시킨다.",
                "*@param* `evList` &mdash; 대상 이벤트 목록. 해당 인자가 주어지지 않을 경우 해당 컴포넌트의 모든 사용자 이벤트가 대상이 된다. (null을 지정하면 된다.)",
                "*@param* `flag` &mdash; true인 경우 pause시키며, false인 경우 pause를 해제한다."
            ]
        },
        {
            "label": "setOpacity(value: Number)",
            "documentation": [
                "컴포넌트의 CSS Opacity(불투명도)값를 설정한다.",
                "*@param* `value` &mdash; Opacity 값 (0과 1사이의 실수)"
            ]
        },
        {
            "label": "setPosition(left: Number, top: Number, mode?: String)",
            "documentation": [
                "컴포넌트의 위치(left,top)를 설정한다.",
                "*@param* `left` &mdash; left의 값 또는 null.",
                "*@param* `top` &mdash; top의 값 또는 null.",
                "*@param* `mode` &mdash; [defulat:absolute, delta]absolute이면 x,y로 현재 값을 설정하고 delta이면 현재 값에 x,y값만큼을 더해서 설정."
            ]
        },
        {
            "label": "setReadOnly(readOnly: Boolean)",
            "documentation": [
                "readOnly 속성값을 설정한다. readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false를 입력합니다.",
                "*@param* `readOnly` &mdash; readOnly 속성을 활성화 시키려면 true 비활성화 시키려면 false"
            ]
        },
        {
            "label": "setSize(width: Number, heigth: Number)",
            "documentation": [
                "컴포넌트의 크기(width,height)를 설정한다.",
                "*@param* `width` &mdash; 새로 설정할 컴포넌트의 width값 또는 null",
                "*@param* `heigth` &mdash; 새로 설정할 컴포넌트의 height값 또는 null"
            ]
        },
        {
            "label": "setStyle(propertyName: String, value: String)",
            "documentation": [
                "컴포넌트의 property별 style을 설정한다.",
                "*@param* `propertyName` &mdash; style 속성 이름",
                "*@param* `value` &mdash; 적용 할 style의 값"
            ]
        },
        {
            "label": "setUserData(key: String, value: String)",
            "documentation": [
                "컴포넌트에 사용자 데이터를 설정한다. 컴포넌트에 설정이 가능한 key가 아닌 경우, key 설정이 불가능하며 log에 관련 내용이 출력 된다.",
                "*@param* `key` &mdash; 임의 데이터의 키",
                "*@param* `value` &mdash; 임의 데이터의 값"
            ]
        },
        {
            "label": "setXPath(xpath: String)",
            "documentation": [
                "xpath를 입력받은 문자열로 설정합니다.",
                "*@param* `xpath` &mdash; 설정할 xpath"
            ]
        },
        {
            "label": "setXSL(xsl: String)",
            "documentation": [
                "xsl을 입력받은 문자열로 설정합니다.",
                "*@param* `xsl` &mdash; 설정할 xsl파일의 경로"
            ]
        },
        {
            "label": "show(displayType?: String)",
            "documentation": [
                "컴포넌트를 화면에 보이도록 설정한다.엔진 내부적으로는 CSS를 display속성과 visibility:show;으로 처리한다.",
                "*@param* `displayType` &mdash; [default:block ,inline ,none ,\"\"]display의 속성 값."
            ]
        },
        {
            "label": "toggleClass(className: String)",
            "documentation": [
                "컴포넌트가 className의 이름을 가진 class를 가지고 있다면 제거하고, 가지고 있지 않다면 추가한다.기본 설정은 addClass API를 통해 추가 된 class만 삭제되며 컴포넌트의 class 속성에 직접 정의 된 class를 삭제해야하는 경우는 config.xml파일의 설정을 아래와 같이 적용해야한다.<style><removeDefaultClass value=\"true\" /></style>",
                "*@param* `className` &mdash; 설정 할 className"
            ]
        },
        {
            "label": "transform()",
            "documentation": [
                "xpath의 데이터를 사용하여 xsl화면을 그립니다."
            ]
        },
        {
            "label": "trigger(type: String, array?: Array)",
            "documentation": [
                "컴포넌트에 등록 된 특정 이벤트를 발생시킨다.",
                "*@param* `type` &mdash; 발생시킬 이벤트 이름",
                "*@param* `array` &mdash; 이벤트 핸들러에 전달할 파라미터 배열"
            ]
        },
        {
            "label": "unbind(type?: String, function?: Function)",
            "documentation": [
                "컴포넌트에 등록 된 이벤트를 제거한다.",
                "*@param* `type` &mdash; 제거할 이벤트 이름. 생략할 경우 해당 컴포넌트의 모든 이벤트를 제거한다.",
                "*@param* `function` &mdash; 제거할 이벤트의 핸들러 함수. 생략할 경우 해당 이벤트 type으로 등록된 모든 핸들러 함수를 제거한다."
            ]
        },
        {
            "label": "visible(flag: Boolean)",
            "documentation": [
                "[deprecated]show/hide 로 사용하거나 setStyle을 통해 visible 속성을 설정한다.컴포넌트의 style 중 visibility 값을 설정한다. true이면 \"visible\", false이면 \"hidden\"을 설정.",
                "*@param* `flag` &mdash; visibility 값을 설정할 값(true이면 \"visible\", false이면 \"hidden\"을 설정)"
            ]
        }
    ]
}